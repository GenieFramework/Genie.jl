var documenterSearchIndex = {"docs":
[{"location":"api/renderer-js.html","page":"-","title":"-","text":"CurrentModule = Renderer.Js","category":"page"},{"location":"api/renderer-js.html","page":"-","title":"-","text":"get_template\nto_js\nrender\njs\nGenie.Router.error","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#Working-With-Genie-Apps:-Intermediate-Topics","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"WARNING: THIS PAGE IS UNDER CONSTRUCTION – THE CONTENT IS USABLE BUT INCOMPLETE","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#Handling-forms","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Handling forms","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Now, the problem is that Bill Gates reads – a lot! It would be much easier if we would allow our users to add a few books themselves, to give us a hand. But since, obviously, we're not going to give them access to our Julia REPL, we should setup a web page with a form. Let's do it.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"We'll start by adding the new routes:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"# routes.jl\nroute(\"/bgbooks/new\", BooksController.new)\nroute(\"/bgbooks/create\", BooksController.create, method = POST, named = :create_book)","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"The first route will be used to display the page with the new book form. The second will be the target page for submitting our form - this page will accept the form's payload. Please note that it's configured to match POST requests and that we gave it a name. We'll use the name in our form so that Genie will dynamically generate the correct links to the corresponding URL (to avoid hard coding URLs). This way we'll make sure that our form will always submit to the right URL, even if we change the route (as long as we don't change the name).","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Now, to add the methods in BooksController. Add these definition under the billgatesbooks function (make sure you add them in BooksController, not in BooksController.API):","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"# BooksController.jl\nfunction new()\n  html(:books, :new)\nend\n\nfunction create()\n  # code here\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"The new method should be clear: we'll just render a view file called new. As for create, for now it's just a placeholder.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Next, to add our view. Add a blank file called new.jl.html in app/resources/books/views. Using Julia:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"julia> touch(\"app/resources/books/views/new.jl.html\")","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Make sure that it has this content:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"<!-- app/resources/books/views/new.jl.html -->\n<h2>Add a new book recommended by Bill Gates</h2>\n<p>\n  For inspiration you can visit <a href=\"https://www.gatesnotes.com/Books\" target=\"_blank\">Bill Gates' website</a>\n</p>\n<form action=\"$(Genie.Router.linkto(:create_book))\" method=\"POST\">\n  <input type=\"text\" name=\"book_title\" placeholder=\"Book title\" /><br />\n  <input type=\"text\" name=\"book_author\" placeholder=\"Book author\" /><br />\n  <input type=\"submit\" value=\"Add book\" />\n</form>","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Notice that the form's action calls the linkto method, passing in the name of the route to generate the URL, resulting in the following HTML: <form method=\"POST\" action=\"/bgbooks/create\">.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"We should also update the BooksController.create method to do something useful with the form data. Let's make it create a new book, persist it to the database and redirect to the list of books. Here is the code:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"# BooksController.jl\nusing Genie.Router, Genie.Renderer\n\nfunction create()\n  Book(title = params(:book_title), author = params(:book_author)) |> save && redirect(:get_bgbooks)\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"A few things are worth pointing out in this snippet:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"again, we're accessing the params collection to extract the request data, in this case passing in the names of our","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"form's inputs as parameters.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"We need to bring Genie.Router into scope in order to access params;","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"we're using the redirect method to perform a HTTP redirect. As the argument we're passing in the name of the route,","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"just like we did with the form's action. However, we didn't set any route to use this name. It turns out that Genie gives default names to all the routes.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"We can use these – but a word of notice: these names are generated using the properties of the route, so if the route changes it's possible that the name will change too. So either make sure your route stays unchanged – or explicitly name your routes. The autogenerated name, get_bgbooks corresponds to the method (GET) and the route (bgbooks).","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"In order to get info about the defined routes you can use the Router.named_routes function:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"julia> Router.named_routes()\nOrderedCollections.OrderedDict{Symbol, Genie.Router.Route} with 6 entries:\n  :get_bgbooks        => [GET] /bgbooks => billgatesbooks | :get_bgbooks\n  :get_bgbooks_new    => [GET] /bgbooks/new => new | :get_bgbooks_new\n  :get                => [GET] / => () | :get\n  :get_api_v1_bgbooks => [GET] /api/v1/bgbooks | :get_api_v1_bgbooks\n  :create_book        => [POST] /bgbooks/create | :create_book","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Let's try it out. Input something and submit the form. If everything goes well a new book will be persisted to the database – and it will be added at the bottom of the list of books.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#Uploading-files","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Uploading files","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Our app looks great – but the list of books would be so much better if we'd display the covers as well. Let's do it!","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#Modify-the-database","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Modify the database","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"The first thing we need to do is to modify our table to add a new column, for storing a reference to the name of the cover image. Per best practices, we'll use database migrations to modify the structure of our table:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"julia> SearchLight.Generator.newmigration(\"add cover column\")\n[debug] New table migration created at db/migrations/2019030813344258_add_cover_column.jl","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Now we need to edit the migration file - please make it look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"# db/migrations/*_add_cover_column.jl\nmodule AddCoverColumn\n\nimport SearchLight.Migrations: add_column, add_index\n\n# SQLite does not support column removal so the `remove_column` method is not implemented in the SearchLightSQLite adapter\n# If using SQLite leave the next line commented -- otherwise uncomment it\n# import SearchLight.Migrations: remove_column\n\nfunction up()\n  add_column(:books, :cover, :string)\nend\n\nfunction down()\n  # if using the SQLite backend, leave the next line commented -- otherwise uncomment it\n  # remove_column(:books, :cover)\nend\n\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Looking good - lets ask SearchLight to run it:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"julia> SearchLight.Migration.lastup()\n[debug] Executed migration AddCoverColumn up","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"If you want to double check, ask SearchLight for the migrations status:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"julia> SearchLight.Migration.status()\n\n|   |                  Module name & status  |\n|   |                             File name  |\n|---|----------------------------------------|\n|   |                   CreateTableBooks: UP |\n| 1 | 2018100120160530_create_table_books.jl |\n|   |                     AddCoverColumn: UP |\n| 2 |   2019030813344258_add_cover_column.jl |","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Perfect! Now we need to add the new column as a field to the Books.Book model:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"module Books\n\nusing SearchLight, SearchLight.Validation, BooksValidator\n\nexport Book\n\nBase.@kwdef mutable struct Book <: AbstractModel\n  id::DbId = DbId()\n  title::String = \"\"\n  author::String = \"\"\n  cover::String = \"\"\nend\n\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"As a quick test we can extend our JSON view and see that all goes well - make it look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"# app/resources/books/views/billgatesbooks.json.jl\n\"Bill's Gates list of recommended books\" => [Dict(\"author\" => b.author,\n                                                  \"title\" => b.title,\n                                                  \"cover\" => b.cover) for b in books]","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"If we navigate http://localhost:8000/api/v1/bgbooks you should see the newly added \"cover\" property (empty, but present).","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#Heads-up!","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Heads up!","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Sometimes Julia/Genie/Revise fails to update structs on changes. If you get an error saying that Book does not have a cover field or that it can not be changed, you'll need to restart the Genie app.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#File-uploading","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"File uploading","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Next step, extending our form to upload images (book covers). Please edit the new.jl.html view file as follows:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"<h3>Add a new book recommended by Bill Gates</h3>\n<p>\n  For inspiration you can visit <a href=\"https://www.gatesnotes.com/Books\" target=\"_blank\">Bill Gates' website</a>\n</p>\n<form action=\"$(Genie.Router.linkto(:create_book))\" method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"text\" name=\"book_title\" placeholder=\"Book title\" /><br />\n  <input type=\"text\" name=\"book_author\" placeholder=\"Book author\" /><br />\n  <input type=\"file\" name=\"book_cover\" /><br />\n  <input type=\"submit\" value=\"Add book\" />\n</form>","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"The new bits are:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"we added a new attribute to our <form> tag: enctype=\"multipart/form-data\". This is required in order to support files payloads.\nthere's a new input of type file: <input type=\"file\" name=\"book_cover\" />","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"You can see the updated form by visiting http://localhost:8000/bgbooks/new","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Now, time to add a new book, with the cover! How about \"Identity\" by Francis Fukuyama? Sounds good. You can use whatever image you want for the cover, or maybe borrow the one from Bill Gates, I hope he won't mind https://www.gatesnotes.com/-/media/Images/GoodReadsBookCovers/Identity.png. Just download the file to your computer so you can upload it through our form.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Almost there - now to add the logic for handling the uploaded file server side. Please update the BooksController.create method to look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"# BooksController\nfunction create()\n  cover_path = if haskey(filespayload(), \"book_cover\")\n      path = joinpath(\"img\", \"covers\", filespayload(\"book_cover\").name)\n      write(joinpath(\"public\", path), IOBuffer(filespayload(\"book_cover\").data))\n\n      path\n    else\n      \"\"\n  end\n\n  Book( title = params(:book_title),\n        author = params(:book_author),\n        cover = cover_path) |> save && redirect(:get_bgbooks)\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Also, very important, you need to make sure that BooksController is using Genie.Requests.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Regarding the code, there's nothing very fancy about it. First we check if the files payload contains an entry for our book_cover input. If yes, we compute the path where we want to store the file, write the file, and store the path in the database.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Please make sure that you create the folder covers/ within public/img/.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Great, now let's display the images. Let's start with the HTML view - please edit app/resources/books/views/billgatesbooks.jl.html and make sure it has the following content:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"<!-- app/resources/books/views/billgatesbooks.jl.html -->\n<h1>Bill's Gates top $( length(books) ) recommended books</h1>\n<ul>\n<%\nfor_each(books) do book\n%>\n  <li><img src='$( isempty(book.cover) ? \"img/docs.png\" : book.cover )' width=\"100px\" /> $(book.title) by $(book.author)</li>\n<%\nend\n%>\n</ul>","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Here we check if the cover property is not empty, and display the actual cover. Otherwise we show a placeholder image. You can check the result at http://localhost:8000/bgbooks","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"As for the JSON view, it already does what we want - you can check that the cover property is now outputted, as stored in the database: http://localhost:8000/api/v1/bgbooks","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Success, we're done here!","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#Heads-up!-2","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Heads up!","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"In production you will have to make the upload code more robust - the big problem here is that we store the cover file as it comes from the user which can lead to name clashes and files being overwritten - not to mention security vulnerabilities. A more robust way would be to compute a hash based on author and title and rename the cover to that.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#One-more-thing","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"One more thing","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"So far so good, but what if we want to update the books we have already uploaded? It would be nice to add those missing covers. We need to add a bit of functionality to include editing features.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"First things first - let's add the routes. Please add these two new route definitions to the routes.jl file:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"route(\"/bgbooks/:id::Int/edit\", BooksController.edit)\nroute(\"/bgbooks/:id::Int/update\", BooksController.update, method = POST, named = :update_book)","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"We defined two new routes. The first will display the book object in the form, for editing. While the second will take care of actually updating the database, server side. For both routes we need to pass the id of the book that we want to edit - and we want to constrain it to an Int. We express this as the /:id::Int/ part of the route.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"We also want to:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"reuse the form which we have defined in app/resources/books/views/new.jl.html\nmake the form aware of whether it's used to create a new book, or for editing an existing one respond accordingly by setting the correct action\npre-fill the inputs with the book's info when editing a book.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"OK, that's quite a list and this is where things become interesting. This is an important design pattern for CRUD web apps. In order to simplify the rendering of the form, we will always pass a book object into it. When editing a book it will be the book corresponding to the id passed into the route. And when creating a new book, it will be just an empty book object we'll create and then dispose of.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#Using-view-partials","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Using view partials","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"First, let's set up the views. In app/resources/books/views/ please create a new file called form.jl.html. Then, from app/resources/books/views/new.jl.html cut the <form> code. That is, everything between the opening and closing <form>...</form> tags. Paste it into the newly created form.jl.html file. Now, back to new.jl.html, instead of the previous <form>...</form> code add:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"<% partial(\"app/resources/books/views/form.jl.html\", context = @__MODULE__) %>","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"This line, as the partial function suggests, includes a view partial, which is a part of a view file, effectively including a view within another view. Notice that we're explicitly passing the context so Genie can set the correct variable scope when including the partial.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"You can reload the new page to make sure that everything still works: http://localhost:8000/bgbooks/new","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Now, let's add an Edit option to our list of books. Please go back to our list view file, billgatesbooks.jl.html. Here, for each iteration, within the for_each block we'll want to dynamically link to the edit page for the corresponding book.","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html#for_each-with-view-partials","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"for_each with view partials","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"However, this for_each which renders a Julia string is very ugly - and we now know how to refactor it, by using a view partial. Let's do it. First, replace the body of the for_each block:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"<!-- app/resources/books/views/billgatesbooks.jl.html -->\n\"\"\"<li><img src='$( isempty(book.cover) ? \"img/docs.png\" : book.cover )' width=\"100px\" /> $(book.title) by $(book.author)\"\"\"","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"with:","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"partial(\"app/resources/books/views/book.jl.html\", book = book, context = @__MODULE__)","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Notice that we are using the partial function and we pass the book object into our view, under the name book (will be accessible in book inside the view partial). Again, we're passing the scope's context (our controller object).","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Next, create the book.jl.html in app/resources/books/views/, for example with","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"julia> touch(\"app/resources/books/views/book.jl.html\")","category":"page"},{"location":"guides/Working_With_Genie_Apps_Intermediary_Topics.html","page":"Working With Genie Apps: Intermediate Topics [WIP]","title":"Working With Genie Apps: Intermediate Topics [WIP]","text":"Add this content to it: TO BE CONTINUED","category":"page"},{"location":"guides/Interactive_environment.html#Using-Genie-in-an-interactive-environment-(Jupyter/IJulia,-REPL,-etc)","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment (Jupyter/IJulia, REPL, etc)","text":"","category":"section"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"Genie can be used for ad-hoc exploratory programming, to quickly whip up a web server and expose your Julia functions.","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"Once you have Genie into scope, you can define a new route. A route maps a URL to a function.","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"julia> using Genie\n\njulia> route(\"/\") do\n         \"Hi there!\"\n       end","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"You can now start the web server using","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"julia> up()","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"Finally, now navigate to http://localhost:8000 – you should see the message \"Hi there!\".","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"We can define more complex URIs which can also map to previously defined functions:","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"julia> function hello_world()\n         \"Hello World!\"\n       end\njulia> route(\"/hello/world\", hello_world)","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"The route handler functions can be defined anywhere (in any other file or module) as long as they are accessible in the current scope.","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"You can now visit http://localhost:8000/hello/world in the browser.","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"We can access route params that are defined as part of the URL, like :message in the following example:","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"julia> route(\"/echo/:message\") do\n         params(:message)\n       end","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"Accessing http://localhost:8000/echo/ciao should echo \"ciao\".","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"And we can even match route params by types (and automatically convert them to the correct type):","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"julia> route(\"/sum/:x::Int/:y::Int\") do\n         params(:x) + params(:y)\n       end","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"By default, route params are extracted as SubString (more exactly, SubString{String}). If type constraints are added, Genie will attempt to convert the SubString to the indicated type.","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"For the above to work, we also need to tell Genie how to perform the conversion:","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"julia> Base.convert(::Type{Int}, s::AbstractString) = parse(Int, s)","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"Now if we access http://localhost:8000/sum/2/3 we should see 5","category":"page"},{"location":"guides/Interactive_environment.html#Handling-query-params","page":"Using Genie in an interactive environment","title":"Handling query params","text":"","category":"section"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"Query params, which look like ...?foo=bar&baz=2 are automatically unpacked by Genie and placed into the params collection. For example:","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"julia> route(\"/sum/:x::Int/:y::Int\") do\n         params(:x) + params(:y) + parse(Int, get(params, :initial_value, \"0\"))\n       end","category":"page"},{"location":"guides/Interactive_environment.html","page":"Using Genie in an interactive environment","title":"Using Genie in an interactive environment","text":"Accessing http://localhost:8000/sum/2/3?initial_value=10 will now output 15.","category":"page"},{"location":"API/server.html","page":"Server","title":"Server","text":"CurrentModule = Server","category":"page"},{"location":"API/server.html","page":"Server","title":"Server","text":"SERVERS\nServersCollection\ndown\ndown!\nhandle_request\nhandle_ws_request\nisrunning\nopenbrowser\nprint_server_status\nserve\nserver_status\nsetup_http_listener\nsetup_http_streamer\nsetup_ws_handler\nup\nupdate_config","category":"page"},{"location":"API/server.html#Genie.Server.SERVERS","page":"Server","title":"Genie.Server.SERVERS","text":"SERVERS\n\nServersCollection constant containing references to the current app's web and websockets servers.\n\n\n\n\n\n","category":"constant"},{"location":"API/server.html#Genie.Server.ServersCollection","page":"Server","title":"Genie.Server.ServersCollection","text":"ServersCollection(webserver::Union{Task,Nothing}, websockets::Union{Task,Nothing})\n\nRepresents a object containing references to Genie's web and websockets servers.\n\n\n\n\n\n","category":"type"},{"location":"API/server.html#Genie.Server.down","page":"Server","title":"Genie.Server.down","text":"down(; webserver::Bool = true, websockets::Bool = true) :: ServersCollection\n\nShuts down the servers optionally indicating which of the webserver and websockets servers to be stopped. It does not remove the servers from the SERVERS collection. Returns the collection.\n\n\n\n\n\n","category":"function"},{"location":"API/server.html#Genie.Server.down!","page":"Server","title":"Genie.Server.down!","text":"function down!(; webserver::Bool = true, websockets::Bool = true) :: Vector{ServersCollection}\n\nShuts down all the servers and empties the SERVERS collection. Returns the empty collection.\n\n\n\n\n\n","category":"function"},{"location":"API/server.html#Genie.Server.handle_request","page":"Server","title":"Genie.Server.handle_request","text":"handle_request(req::HTTP.Request, res::HTTP.Response) :: HTTP.Response\n\nHttp server handler function - invoked when the server gets a request.\n\n\n\n\n\n","category":"function"},{"location":"API/server.html#Genie.Server.handle_ws_request","page":"Server","title":"Genie.Server.handle_ws_request","text":"handle_ws_request(req::HTTP.Request, msg::String, ws_client) :: String\n\nHttp server handler function - invoked when the server gets a request.\n\n\n\n\n\n","category":"function"},{"location":"API/server.html#Genie.Server.serve","page":"Server","title":"Genie.Server.serve","text":"serve(path::String = pwd(), params...; kwparams...)\n\nServes a folder of static files located at path. Allows Genie to be used as a static files web server. The params and kwparams arguments are forwarded to Genie.up().\n\nArguments\n\npath::String: the folder of static files to be served by the server\nparams: additional arguments which are passed to Genie.up to control the web server\nkwparams: additional keyword arguments which are passed to Genie.up to control the web server\n\nExamples\n\njulia> Genie.serve(\"public\", 8888, async = false, verbose = true)\n[ Info: Ready!\n2019-08-06 16:39:20:DEBUG:Main: Web Server starting at http://127.0.0.1:8888\n[ Info: Listening on: 127.0.0.1:8888\n[ Info: Accept (1):  🔗    0↑     0↓    1s 127.0.0.1:8888:8888 ≣16\n\n\n\n\n\n","category":"function"},{"location":"API/server.html#Genie.Server.setup_http_listener","page":"Server","title":"Genie.Server.setup_http_listener","text":"setup_http_listener(req::HTTP.Request, res::HTTP.Response = HTTP.Response()) :: HTTP.Response\n\nConfigures the handler for the HTTP Request and handles errors.\n\n\n\n\n\n","category":"function"},{"location":"API/server.html#Genie.Server.setup_ws_handler","page":"Server","title":"Genie.Server.setup_ws_handler","text":"setup_ws_handler(req::HTTP.Request, ws_client) :: Nothing\n\nConfigures the handler for WebSockets requests.\n\n\n\n\n\n","category":"function"},{"location":"API/server.html#Genie.Server.up","page":"Server","title":"Genie.Server.up","text":"up(port::Int = Genie.config.server_port, host::String = Genie.config.server_host;\n    ws_port::Int = Genie.config.websockets_port, async::Bool = ! Genie.config.run_as_server) :: ServersCollection\n\nStarts the web server.\n\nArguments\n\nport::Int: the port used by the web server\nhost::String: the host used by the web server\nws_port::Int: the port used by the Web Sockets server\nasync::Bool: run the web server task asynchronously\n\nExamples\n\njulia> up(8000, \"127.0.0.1\", async = false)\n[ Info: Ready!\nWeb Server starting at http://127.0.0.1:8000\n\n\n\n\n\n","category":"function"},{"location":"API/server.html#Genie.Server.update_config","page":"Server","title":"Genie.Server.update_config","text":"update_config(port::Int, host::String, ws_port::Int) :: Nothing\n\nUpdates the corresponding Genie configurations to the corresponding values for   port, host, and ws_port, if these are passed as arguments when starting up the server.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/14--The_Secrets_File.html#The-secrets-(config/secrets.jl)-file","page":"The secrets file","title":"The secrets (config/secrets.jl) file","text":"","category":"section"},{"location":"tutorials/14--The_Secrets_File.html","page":"The secrets file","title":"The secrets file","text":"Confidential configuration data (like API keys, usernames, passwords, etc) should be added to the config/secrets.jl file. This file is by default added to .gitignore when creating a Genie app, so it won't be added to source control – to avoid that it is accidentally exposed.","category":"page"},{"location":"tutorials/14--The_Secrets_File.html#Scope","page":"The secrets file","title":"Scope","text":"","category":"section"},{"location":"tutorials/14--The_Secrets_File.html","page":"The secrets file","title":"The secrets file","text":"All the definitions (variables, constants, functions, modules, etc) added to the secrets.jl file are loaded into your app's module. So if your app (and its main module) is called MyGenieApp, the definitions will be available under the MyGenieApp namespace.","category":"page"},{"location":"tutorials/14--The_Secrets_File.html","page":"The secrets file","title":"The secrets file","text":"","category":"page"},{"location":"tutorials/14--The_Secrets_File.html","page":"The secrets file","title":"The secrets file","text":"HEADS UP","category":"page"},{"location":"tutorials/14--The_Secrets_File.html","page":"The secrets file","title":"The secrets file","text":"Given the your app's name is variable, you can also access your app's module through the Main.UserApp constant. So all the definitions added to secrets.jl can also be accessed through the Mani.UserApp module.","category":"page"},{"location":"tutorials/14--The_Secrets_File.html","page":"The secrets file","title":"The secrets file","text":"","category":"page"},{"location":"api/renderer.html","page":"-","title":"-","text":"CurrentModule = Renderer","category":"page"},{"location":"api/renderer.html","page":"-","title":"-","text":"WebRenderable\nrender\nredirect\nhasrequested\nrespond\nregistervars\ninjectvars\nview_file_info\nvars_signature\nfunction_name\nm_name\nbuild_is_stale\nbuild_module\npreparebuilds\npurgebuilds\nchangebuilds\nset_negotiated_content\nnegotiate_content","category":"page"},{"location":"api/encryption.html","page":"-","title":"-","text":"CurrentModule = Encryption","category":"page"},{"location":"api/encryption.html","page":"-","title":"-","text":"decrypt\nencrypt\nencryption_sauce","category":"page"},{"location":"api/logger.html","page":"-","title":"-","text":"CurrentModule = Logger","category":"page"},{"location":"api/logger.html","page":"-","title":"-","text":"initialize_logging\ntimestamp_logger","category":"page"},{"location":"API/logger.html","page":"Logger","title":"Logger","text":"CurrentModule = Logger","category":"page"},{"location":"API/logger.html","page":"Logger","title":"Logger","text":"initialize_logging\ntimestamp_logger","category":"page"},{"location":"api/router.html","page":"-","title":"-","text":"CurrentModule = Router","category":"page"},{"location":"api/router.html","page":"-","title":"-","text":"Route\nChannel\nRouter.show\nParams\nispayload\nroute_request\nroute_ws_request\nRouter.push!\nroute\nchannel\nroutename\nchannelname\nbaptizer\nnamed_routes\nroutes\nnamed_channels\nchannels\nget_route\nroutes\nchannels\ndelete!\nto_link\ntolink\nlink_to\nlinkto\ntoroute\nroute_params_to_dict\naction_controller_params\nrun_hook\nmatch_routes\nmatch_channels\nparse_route\nparse_channel\nextract_uri_params\nextract_get_params\nextract_post_params\nextract_request_params\ncontent_type\ncontent_length\nrequest_type_is\nrequest_type\nnested_keys\nsetup_base_params\nto_response\nparams\n_params_\nrequest\nresponse_type\nappend_to_routes_file\nis_static_file\nto_uri\nescape_resource_path\nserve_static_file\npreflight_response\nresponse_mime\nfile_path\nfilepath\npathify\nfile_extension\nfile_headers\normatch","category":"page"},{"location":"api/webchannels.html","page":"-","title":"-","text":"CurrentModule = WebChannels","category":"page"},{"location":"api/webchannels.html","page":"-","title":"-","text":"ChannelNotFoundException\nChannelClient\nChannelClientsCollection\nChannelSubscriptionsCollection\nMessagePayload\nChannelMessage\nCLIENTS\nSUBSCRIPTIONS\nclients\nsubscriptions\nwebsockets\nchannels\nconnected_clients\ndisconnected_clients\nsubscribe\nunsubscribe\nunsubscribe_client\nunsubscribe_disconnected_clients\npush_subscription\npop_subscription\nbroadcast\nmessage","category":"page"},{"location":"api/sessions.html","page":"-","title":"-","text":"CurrentModule = Sessions","category":"page"},{"location":"api/sessions.html","page":"-","title":"-","text":"Session\nid\nstart\nset!\nget\nunset!\nisset\npersist\nload\nsession\ninit","category":"page"},{"location":"api/genie.html","page":"-","title":"-","text":"CurrentModule = Genie","category":"page"},{"location":"api/genie.html","page":"-","title":"-","text":"bootstrap\ndown\ndown!\ngenie\ngo\nisrunning\nloadapp\nrun\nup","category":"page"},{"location":"api/renderer-json.html","page":"-","title":"-","text":"CurrentModule = Renderer.Json","category":"page"},{"location":"api/renderer-json.html","page":"-","title":"-","text":"render\nGenie.Renderer.render\njson\nGenie.Router.error","category":"page"},{"location":"api/generator.html","page":"-","title":"-","text":"CurrentModule = Generator","category":"page"},{"location":"api/generator.html","page":"-","title":"-","text":"autoconfdb\nautostart_app\nbinfolderpath\ncontroller_file_name\ndb_intializer\ndb_support\nfullstack_app\ngenerate_project\ninstall_app_dependencies\ninstall_db_dependencies\ninstall_searchlight_dependencies\nmicrostack_app\nminimal\nmvc_support\nnewapp\nnewapp_fullstack\nnewapp_mvc\nnewapp_webservice\nnewcontroller\nnewresource\nnewtask\npkggenfile\npkgproject\npost_create\nremove_searchlight_initializer\nresource_does_not_exist\nscaffold\nset_files_mod\nsetup_resource_path\nsetup_nix_bin_files\nsetup_windows_bin_files\nvalidname\nwrite_app_custom_files\nwrite_db_config\nwrite_resource_file\nwrite_secrets_file","category":"page"},{"location":"API/webthreads.html","page":"WebThreads","title":"WebThreads","text":"CurrentModule = WebThreads","category":"page"},{"location":"API/webthreads.html","page":"WebThreads","title":"WebThreads","text":"CLIENTS\nMESSAGE_QUEUE\nSUBSCRIPTIONS\nChannelClient\nChannelClientsCollection\nChannelMessage\nChannelSubscriptionsCollection\nClientId\nChannelName\nMessagePayload\nbroadcast\nchannels\nclients\nconnected_clients\ndisconnected_clients\nmessage\npop_subscription\npull\npush\npush_subscription\nsubscribe\nsubscriptions\ntimestamp_client\nunsubscribe\nunsubscribe_client\nunsubscribe_clients\nunsubscribe_disconnected_clients\nwebthreads","category":"page"},{"location":"API/webthreads.html#Genie.WebThreads.ChannelClientsCollection","page":"WebThreads","title":"Genie.WebThreads.ChannelClientsCollection","text":"Dict([itr])\n\nDict{K,V}() constructs a hash table with keys of type K and values of type V. Keys are compared with isequal and hashed with hash.\n\nGiven a single iterable argument, constructs a Dict whose key-value pairs are taken from 2-tuples (key,value) generated by the argument.\n\nExamples\n\njulia> Dict([(\"A\", 1), (\"B\", 2)])\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\nAlternatively, a sequence of pair arguments may be passed.\n\njulia> Dict(\"A\"=>1, \"B\"=>2)\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\n\n\n\n\n","category":"type"},{"location":"API/webthreads.html#Genie.WebThreads.ChannelSubscriptionsCollection","page":"WebThreads","title":"Genie.WebThreads.ChannelSubscriptionsCollection","text":"Dict([itr])\n\nDict{K,V}() constructs a hash table with keys of type K and values of type V. Keys are compared with isequal and hashed with hash.\n\nGiven a single iterable argument, constructs a Dict whose key-value pairs are taken from 2-tuples (key,value) generated by the argument.\n\nExamples\n\njulia> Dict([(\"A\", 1), (\"B\", 2)])\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\nAlternatively, a sequence of pair arguments may be passed.\n\njulia> Dict(\"A\"=>1, \"B\"=>2)\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\n\n\n\n\n","category":"type"},{"location":"API/webthreads.html#Genie.WebThreads.ClientId","page":"WebThreads","title":"Genie.WebThreads.ClientId","text":"UInt64 <: Unsigned\n\n64-bit unsigned integer type.\n\n\n\n\n\n","category":"type"},{"location":"API/webthreads.html#Genie.WebThreads.ChannelName","page":"WebThreads","title":"Genie.WebThreads.ChannelName","text":"String(v::AbstractVector{UInt8})\n\nCreate a new String object from a byte vector v containing UTF-8 encoded characters. If v is Vector{UInt8} it will be truncated to zero length and future modification of v cannot affect the contents of the resulting string. To avoid truncation of Vector{UInt8} data, use String(copy(v)); for other AbstractVector types, String(v) already makes a copy.\n\nWhen possible, the memory of v will be used without copying when the String object is created. This is guaranteed to be the case for byte vectors returned by take! on a writable IOBuffer and by calls to read(io, nb). This allows zero-copy conversion of I/O data to strings. In other cases, Vector{UInt8} data may be copied, but v is truncated anyway to guarantee consistent behavior.\n\n\n\n\n\nString(s::AbstractString)\n\nConvert a string to a contiguous byte array representation encoded as UTF-8 bytes. This representation is often appropriate for passing strings to C.\n\n\n\n\n\n","category":"type"},{"location":"API/webthreads.html#Genie.WebThreads.broadcast","page":"WebThreads","title":"Genie.WebThreads.broadcast","text":"Pushes msg (and payload) to all the clients subscribed to the channels in channels.\n\n\n\n\n\nPushes msg (and payload) to all the clients subscribed to all the channels.\n\n\n\n\n\n","category":"function"},{"location":"API/webthreads.html#Genie.WebThreads.message","page":"WebThreads","title":"Genie.WebThreads.message","text":"Pushes msg (and payload) to channel.\n\n\n\n\n\nWrites msg to message queue for client.\n\n\n\n\n\n","category":"function"},{"location":"API/webthreads.html#Genie.WebThreads.pop_subscription","page":"WebThreads","title":"Genie.WebThreads.pop_subscription","text":"Removes the subscription of client to channel.\n\n\n\n\n\nRemoves all subscriptions of client.\n\n\n\n\n\n","category":"function"},{"location":"API/webthreads.html#Genie.WebThreads.push_subscription","page":"WebThreads","title":"Genie.WebThreads.push_subscription","text":"Adds a new subscription for client to channel.\n\n\n\n\n\n","category":"function"},{"location":"API/webthreads.html#Genie.WebThreads.subscribe","page":"WebThreads","title":"Genie.WebThreads.subscribe","text":"Subscribes a web thread client wt to channel.\n\n\n\n\n\n","category":"function"},{"location":"API/webthreads.html#Genie.WebThreads.unsubscribe","page":"WebThreads","title":"Genie.WebThreads.unsubscribe","text":"Unsubscribes a web socket client wt from channel.\n\n\n\n\n\n","category":"function"},{"location":"API/webthreads.html#Genie.WebThreads.unsubscribe_client","page":"WebThreads","title":"Genie.WebThreads.unsubscribe_client","text":"Unsubscribes a web socket client wt from all the channels.\n\n\n\n\n\n","category":"function"},{"location":"API/webthreads.html#Genie.WebThreads.unsubscribe_disconnected_clients","page":"WebThreads","title":"Genie.WebThreads.unsubscribe_disconnected_clients","text":"unsubscribedisconnectedclients() :: ChannelClientsCollection\n\nUnsubscribes clients which are no longer connected.\n\n\n\n\n\n","category":"function"},{"location":"api/exceptions.html","page":"-","title":"-","text":"CurrentModule = Exceptions","category":"page"},{"location":"api/exceptions.html","page":"-","title":"-","text":"ExceptionalResponse\nFileExistsException\nInternalServerException\nNotFoundException\nRuntimeException","category":"page"},{"location":"API/renderer-json.html","page":"JSON Renderer","title":"JSON Renderer","text":"CurrentModule = Renderer.Json","category":"page"},{"location":"API/renderer-json.html","page":"JSON Renderer","title":"JSON Renderer","text":"render\nGenie.Renderer.render\njson\nGenie.Router.error","category":"page"},{"location":"api/assets.html","page":"-","title":"-","text":"CurrentModule = Assets","category":"page"},{"location":"api/assets.html","page":"-","title":"-","text":"add_fileroute\nAssetsConfig\nassets_config!\nassets_endpoint\nasset_file\nasset_path\nasset_route\nchannels\nchannels_route\nchannels_script\nchannels_script_tag\nchannels_subscribe\nchannels_support\ncss_asset\nembedded\nembedded_path\nexternal_assets\nfavicon_support\ninclude_asset\njs_asset\njsliteral\njs_settings\nwebthreads\nwebthreads_endpoint\nwebthreads_push_pull\nwebthreads_route\nwebthreads_script\nwebthreads_script_tag\nwebthreads_subscribe\nwebthreads_support","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html#Developing-Genie-Web-Services","page":"Creating a web service","title":"Developing Genie Web Services","text":"","category":"section"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"Starting up ad-hoc web servers at the REPL and writing small scripts to wrap micro-services works great, but production apps tend to become complex quickly. They also have more stringent requirements, like managing dependencies, compressing assets, reloading code, logging, environments, or structuring the codebase in a way which promotes efficient workflows when working in teams.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"Genie enables a modular approach towards app building, allowing to add more components as the need arises. You can start with the web service template (which includes dependencies management, logging, environments, and routing), and grow it by sequentially adding DB persistence (through the SearchLight ORM), high performance HTML view templates with embedded Julia (via Renderer.Html), caching, authentication, and more.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html#Setting-up-a-Genie-Web-Service-project","page":"Creating a web service","title":"Setting up a Genie Web Service project","text":"","category":"section"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"Genie packs handy generator features and templates which help bootstrapping and setting up various parts of an application. These are available in the Genie.Generator module. For bootstrapping a new app we need to invoke one of the functions in the newapp family:","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"julia> using Genie\n\njulia> Genie.Generator.newapp_webservice(\"MyGenieApp\")","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"If you follow the log messages in the REPL you will see that the command will trigger a flurry of actions in order to set up the new project:","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"it creates a new folder, MyGenieApp/, which will hosts the files of the app and whose name corresponds to the name of the app,\nwithin the MyGenieApp/ folder, it creates the files and folders needed by the app,\nchanges the active directory to MyGenieApp/ and creates a new Julia project within it (adding the Project.toml file),\ninstalls all the required dependencies for the new Genie app (using Pkg and the standard Manifest.toml file), and finally,\nstarts the web server","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"TIP","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"Check out the ?help documentation for Genie.Generator.newapp, Genie.Generator.newapp_webservice, Genie.Generator.newapp_mvc, and Genie.Generator.newapp_fullstack too see what options are available for bootstrapping applications. We'll go over the different configurations in upcoming sections.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html#The-file-structure","page":"Creating a web service","title":"The file structure","text":"","category":"section"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"Our newly created web service has this file structure:","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"├── .gitattributes\n├── .gitignore\n├── Manifest.toml\n├── Project.toml\n├── bin\n├── bootstrap.jl\n├── config\n├── public\n├── routes.jl\n├── src\n└── test","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"These are the roles of each of the files and folders:","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"Manifest.toml and Project.toml are used by Julia and Pkg to manage the app's dependencies.\nbin/ includes scripts for starting up a Genie REPL or a Genie server.\nbootstrap.jl and the files within src/ are used by Genie to load the application and should not be modified unless you know what you're doing.\nconfig/ includes the per-environment configuration files.\npublic/ is the document root, which includes static files exposed by the app on the network/internet.\nroutes.jl is the dedicated file for registering Genie routes.\nthe test/ folder is set up to store the unit and integration tests for the app.\n.gitattributes and .gitignore are used by Git to manage the project's files.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"HEADS UP","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"After creating a new app you might need to change the file permissions to allow editing/saving the files such as routes.jl.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html#Adding-logic","page":"Creating a web service","title":"Adding logic","text":"","category":"section"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"You can now edit the routes.jl file to add some logic, at the bottom of the file:","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"route(\"/hello\") do\n  \"Welcome to Genie!\"\nend","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"If you now visit http://127.0.0.1:8000/hello you'll see a warm greeting.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html#Extending-the-app","page":"Creating a web service","title":"Extending the app","text":"","category":"section"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"Genie apps are just plain Julia projects. This means that routes.jl will behave like any other Julia script - you can reference extra packages, you can switch into pkg> mode to manage per project dependencies, include other files, etcetera.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"If you have existing Julia code that you want to quickly load into a Genie app, you can add a lib/ folder in the root of the app and place your Julia files there. If the folder exists, lib/ and all its subfolders are automatically loaded by Genie, recursively.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"WARNING","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"If you add the lib/ folder while the Genie app is running, you will need to restart the app to load the files.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"If you need to add database support, you can always add the SearchLight ORM by running julia> Genie.Generator.db_support() in the app's REPL.","category":"page"},{"location":"tutorials/4--Developing_Web_Services.html","page":"Creating a web service","title":"Creating a web service","text":"However, if your app grows in complexity and you develop it from scratch, it is more efficient to take advantage of Genie's resource-oriented MVC structure.","category":"page"},{"location":"tutorials/15--The_Lib_Folder.html#The-lib/-folder","page":"Auto-loading user libraries","title":"The lib/ folder","text":"","category":"section"},{"location":"tutorials/15--The_Lib_Folder.html","page":"Auto-loading user libraries","title":"Auto-loading user libraries","text":"Genie makes it easy to automatically load Julia code (modules, files, etc) into an app, outside of the standard Genie MVC app structure. You simply need to add your files and folders into the lib/ folder.","category":"page"},{"location":"tutorials/15--The_Lib_Folder.html","page":"Auto-loading user libraries","title":"Auto-loading user libraries","text":"","category":"page"},{"location":"tutorials/15--The_Lib_Folder.html","page":"Auto-loading user libraries","title":"Auto-loading user libraries","text":"HEADS UP","category":"page"},{"location":"tutorials/15--The_Lib_Folder.html","page":"Auto-loading user libraries","title":"Auto-loading user libraries","text":"If the lib/ folder does not exist, just create it yourself: julia> mkdir(\"lib\")\nGenie includes the files placed within the lib/ folder and subfolders recursively\nFiles within lib/ are loaded using Revise and are automatically reloaded if changed.","category":"page"},{"location":"tutorials/15--The_Lib_Folder.html","page":"Auto-loading user libraries","title":"Auto-loading user libraries","text":"","category":"page"},{"location":"api/webthreads.html","page":"-","title":"-","text":"CurrentModule = WebThreads","category":"page"},{"location":"api/webthreads.html","page":"-","title":"-","text":"CLIENTS\nMESSAGE_QUEUE\nSUBSCRIPTIONS\nChannelClient\nChannelClientsCollection\nChannelMessage\nChannelSubscriptionsCollection\nClientId\nChannelName\nMessagePayload\nbroadcast\nchannels\nclients\nconnected_clients\ndisconnected_clients\nmessage\npop_subscription\npull\npush\npush_subscription\nsubscribe\nsubscriptions\ntimestamp_client\nunsubscribe\nunsubscribe_client\nunsubscribe_clients\nunsubscribe_disconnected_clients\nwebthreads","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Advanced-routing-techniques","page":"Advanced routing","title":"Advanced routing techniques","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Genie's router can be considered the brain of the app, matching web requests to handler functions, extracting and setting up the request's variables and the execution environment, and invoking the response methods.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Static-routing","page":"Advanced routing","title":"Static routing","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Starting with the simplest case, we can register \"plain\" routes by using the route method. The method takes as its required arguments the URI string or pattern – and the handler function that will be invoked in order to provide the response. The router supports two ways of registering routes, either route(pattern::String, f::Function) or route(f::Function, pattern::String). The first syntax is for passing function references – while the second is for defining inline functions (lambdas).","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Example","page":"Advanced routing","title":"Example","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"The following snippet defines a function greet which returns the \"Welcome to Genie!\" string. We use the function as our route handler, by passing a reference to it as the second argument to the route method.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"using Genie\n\ngreet() = \"Welcome to Genie!\"\n\nroute(\"/greet\", greet)          # [GET] /greet => greet\n\nup() # start the server","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"If you use your browser to navigate to http://127.0.0.1:8000/greet you'll see the code in action.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"However, defining a dedicated handler function might be overkill for simple cases like this. As such, Genie allows registering in-line handlers:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"route(\"/bye\") do\n  \"Good bye!\"\nend                 # [GET] /bye => ()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"You can just navigate to http://127.0.0.1:8000/bye – the route is instantly available in the app.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"HEADS UP","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"The routes are matched from newest to oldest. This means that you can define a new route to overwrite a previously defined one.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Genie's router won't match the most specific rule, but the first matching one. So if, for example, you register a route to match /*, it will handle all the requests, even if you have previously defined more specific routes. As a side-note,  you can use this technique to temporarily divert all users to a maintenance page (which you can later remove by deleting  the route using Router.delete!(:route_name)).","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Dynamic-routing-(using-route-parameters)","page":"Advanced routing","title":"Dynamic routing (using route parameters)","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Static routing works great for fixed URLs. But what if we have dynamic URLs, where the components map to information in the backend (like database IDs) and vary with each request? For example, how would we handle a URL like \"/customers/57943/orders/458230\", where 57943 is the customer id and 458230 is the order id.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Such situations are handled through dynamic routing or route parameters. For the previous example, \"/customers/57943/orders/458230\", we can define a dynamic route as \"/customers/:customer_id/orders/:order_id\". Upon matching the request, the Router will unpack the values and expose them in the params collection.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Example-2","page":"Advanced routing","title":"Example","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"using Genie, Genie.Requests\n\nroute(\"/customers/:customer_id/orders/:order_id\") do\n  \"You asked for the order $(payload(:order_id)) for customer $(payload(:customer_id))\"\nend\n\nup()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Routing-methods-(GET,-POST,-PUT,-PATCH,-DELETE,-OPTIONS)","page":"Advanced routing","title":"Routing methods (GET, POST, PUT, PATCH, DELETE, OPTIONS)","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"By default, routes handle GET requests, since these are the most common. In order to define routes for handling other types of request methods, we need to pass the method keyword argument, indicating the HTTP method we want to respond to. Genie's Router supports GET, POST, PUT, PATCH, DELETE, OPTIONS methods.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"The router defines and exports constants for each of these as Router.GET, Router.POST, Router.PUT, Router.PATCH, Router.DELETE, and Router.OPTIONS.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Example-3","page":"Advanced routing","title":"Example","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"We can setup the following PATCH route:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"using Genie, Genie.Requests\n\nroute(\"/patch_stuff\", method = PATCH) do\n  \"Stuff to patch\"\nend\n\nup()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"And we can test it using the HTTP package:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"using HTTP\n\nHTTP.request(\"PATCH\", \"http://127.0.0.1:8000/patch_stuff\").body |> String","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"This will output the string \"Stuff to patch\", as the response from the PATCH request. By sending a request with the PATCH method, our route is triggered. Consequently, we access the response body and convert it to a string, which is \"Stuff to patch\".","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Named-routes","page":"Advanced routing","title":"Named routes","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Genie allows tagging routes with names. This is a very powerful feature, to be used in conjunction with the Router.tolink method, for dynamically generating URLs to various the routes. The advantage of this technique is that if we refer to the route by name and generate the links dynamically using tolink, as long as the name of the route stays the same, if we change the route pattern, all the URLs will automatically match the new route definition.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"In order to name a route we need to use the named keyword argument, which expects a Symbol.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Example-4","page":"Advanced routing","title":"Example","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"using Genie, Genie.Requests\n\nroute(\"/customers/:customer_id/orders/:order_id\", named = :get_customer_order) do\n  \"Looking up order $(payload(:order_id)) for customer  $(payload(:customer_id))\"\nend\n# [GET] /customers/:customer_id/orders/:order_id => ()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"We can check the status of our route with:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"julia> routes()\n  :get_customer_order => [GET] /customers/:customer_id/orders/:order_id => ()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"HEADS UP","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"For consistency, Genie names all the routes. However, the auto-generated name is state dependent. So if you change the definition of the route, it's possible that the name will change as well. Thus, it's best to explicitly name the routes if you plan on referencing them throughout the app.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"We can confirm this by adding an anonymous route:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"route(\"/foo\") do\n  \"foo\"\nend\n# [GET] /foo => ()\n\njulia> routes()\n  :get_customer_order => [GET] /customers/:customer_id/orders/:order_id => ()\n  :get_foo            => [GET] /foo => ()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"The new route has been automatically named get_foo, based on the method and URI pattern.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Links-to-routes","page":"Advanced routing","title":"Links to routes","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"We can use the name of the route to link back to it using the linkto method.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Example-5","page":"Advanced routing","title":"Example","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Let's start with the previously defined two routes:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"julia> routes()\n  :get_customer_order => [GET] /customers/:customer_id/orders/:order_id => ()\n  :get_foo            => [GET] /foo => ()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Static routes such as :get_foo are straightforward to target:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"julia> linkto(:get_foo)\n\"/foo\"","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"For dynamic routes, it's a bit more involved as we need to supply the values for each of the parameters, as keyword arguments:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"julia> linkto(:get_customer_order, customer_id = 1234, order_id = 5678)","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"This will generate the URL \"/customers/1234/orders/5678\"","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"The linkto function should be used in conjunction with the HTML code for generating links, ie:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"<a href=\"$(linkto(:get_foo))\">Foo</a>","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Listing-routes","page":"Advanced routing","title":"Listing routes","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"At any time we can check which routes are registered with Router.routes:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"julia> routes()\n [GET] /foo => getfield(Main, Symbol(\"##7#8\"))()\n [GET] /customers/:customer_id/orders/:order_id => ()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#The-Route-type","page":"Advanced routing","title":"The Route type","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"The routes are represented internally by the Route type which has the following fields:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"method::String - for storing the method of the route (GET, POST, etc)\npath::String - represents the URI pattern to be matched against\naction::Function - the route handler to be executed when the route is matched\nname::Union{Symbol,Nothing} - the name of the route\ncontext::Module - an optional context to be used when executing the route handler","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Removing-routes","page":"Advanced routing","title":"Removing routes","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"We can delete routes from the stack by calling the delete! method and passing the collection of routes and the name of the route to be removed. The method returns the collection of (remaining) routes","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Example-6","page":"Advanced routing","title":"Example","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"julia> routes()\n  :get_customer_order => [GET] /customers/:customer_id/orders/:order_id => ()\n  :get_foo            => [GET] /foo => ()\n\njulia> Router.delete!(:get_foo)\n  :get_customer_order => [GET] /customers/:customer_id/orders/:order_id => ()\n\njulia> routes()\n  :get_customer_order => [GET] /customers/:customer_id/orders/:order_id => ()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Matching-routes-by-type-of-arguments","page":"Advanced routing","title":"Matching routes by type of arguments","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"By default route parameters are parsed into the payload collection as SubString{String}:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"using Genie, Genie.Requests\n\nroute(\"/customers/:customer_id/orders/:order_id\") do\n  \"Order ID has type $(payload(:order_id) |> typeof) // Customer ID has type $(payload(:customer_id) |> typeof)\"\nend","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"This will output Order ID has type SubString{String} // Customer ID has type SubString{String}","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"However, for such a case, we'd very much prefer to receive our data as Int to avoid an explicit conversion – and to match only numbers. Genie supports such a workflow by allowing type annotations to route parameters:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"route(\"/customers/:customer_id::Int/orders/:order_id::Int\", named = :get_customer_order) do\n  \"Order ID has type $(payload(:order_id) |> typeof) // Customer ID has type $(payload(:customer_id) |> typeof)\"\nend\n# [GET] /customers/:customer_id::Int/orders/:order_id::Int => ()","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Notice how we've added type annotations to :customer_id and :order_id in the form :customer_id::Int and :order_id::Int.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"However, attempting to access the URL http://127.0.0.1:8000/customers/10/orders/20 will fail:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Failed to match URI params between Int64::DataType and 10::SubString{String}\nMethodError(convert, (Int64, \"10\"), 0x00000000000063fe)\n/customers/10/orders/20 404","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"As you can see, Genie attempts to convert the types from the default SubString{String} to Int – but doesn't know how. It fails, can't find other matching routes and returns a 404 Not Found response.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Type-conversion-in-routes","page":"Advanced routing","title":"Type conversion in routes","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"The error is easy to address though: we need to provide a type converter from SubString{String} to Int.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Base.convert(::Type{Int}, v::SubString{String}) = parse(Int, v)","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Once we register the converter our request will be correctly handled, resulting in Order ID has type Int64 // Customer ID has type Int64","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Matching-individual-URI-segments","page":"Advanced routing","title":"Matching individual URI segments","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Besides matching the full route, Genie also allows matching individual URI segments. That is, enforcing that the various route parameters obey a certain pattern. In order to introduce constraints for route parameters we append #pattern at the end of the route parameter.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#Example-7","page":"Advanced routing","title":"Example","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"For instance, let's assume that we want to implement a localized website where we have a URL structure like: mywebsite.com/en, mywebsite.com/es and mywebsite.com/de. We can define a dynamic route and extract the locale variable to serve localized content:","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"route(\":locale\", TranslationsController.index)","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"This will work very well, matching requests and passing the locale into our code within the payload(:locale) variable. However, it will also be too greedy, virtually matching all the requests, including things like static files (ie mywebsite.com/favicon.ico). We can constrain what the :locale variable can match, by appending the pattern (a regex pattern):","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"route(\":locale#(en|es|de)\", TranslationsController.index)","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"The refactored route only allows :locale to match one of en, es, and de strings.","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"HEADS UP","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"Keep in mind not to duplicate application logic. For instance, if you have an array of supported locales, you can use that to dynamically generate the pattern – routes can be fully dynamically generated!","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"const LOCALE = \":locale#($(join(TranslationsController.AVAILABLE_LOCALES, '|')))\"\n\nroute(\"/$LOCALE\", TranslationsController.index, named = :get_index)","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"","category":"page"},{"location":"tutorials/12--Advanced_Routing_Techniques.html#The-params-collection","page":"Advanced routing","title":"The params collection","text":"","category":"section"},{"location":"tutorials/12--Advanced_Routing_Techniques.html","page":"Advanced routing","title":"Advanced routing","text":"It's good to know that the router bundles all the parameters of the current request into the params collection (a Dict{Symbol,Any}). This contains valuable information, such as route parameters, query params, POST payload, the original HTTP.Request and HTTP.Response objects, etcetera. In general it's recommended not to access the params collection directly but through the utility methods defined by Genie.Requests and Genie.Responses – but knowing about params might come in handy for advanced users.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Working-with-Genie-apps-(projects)","page":"Working with Genie Apps","title":"Working with Genie apps (projects)","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Working with Genie in an interactive environment can be useful – but usually we want to persist the application and reuse it between sessions. One way to achieve this is to save it as an IJulia notebook and rerun the cells.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"However, you can get the best of Genie by working with Genie apps. A Genie app is a MVC (Model-View-Controller) web application which promotes the convention-over-configuration principle. By working with a few predefined files, within the Genie app structure, the framework can lift a lot of weight and massively improve development productivity. By following Genie's workflow, one instantly gets, out of the box, features like automatic module loading and reloading, dedicated configuration files, logging, support for environments, code generators, caching, support for Genie plugins, and much more.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"In order to create a new Genie app, we need to run Genie.Generator.newapp($app_name):","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> Genie.Generator.newapp(\"MyGenieApp\")","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Upon executing the command, Genie will:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"make a new dir called MyGenieApp and cd() into it,\ninstall all the app's dependencies,\ncreate a new Julia project (adding the Project.toml and Manifest.toml files),\nactivate the project,\nautomatically load the new app's environment into the REPL,\nstart the web server on the default Genie port (port 8000) and host (127.0.0.1 – aka localhost).","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"At this point you can confirm that everything worked as expected by visiting http://127.0.0.1:8000 in your favourite web browser. You should see Genie's welcome page.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Next, let's add a new route. Routes are used to map request URLs to Julia functions. These functions (also called \"handler\" functions) provide the response that will be sent back to the client. Routes are meant to be defined in the dedicated routes.jl file (but there is no restriction enforcing this rule). Open MyGenieApp/routes.jl in your editor or run the following command (making sure that you are in the app's directory):","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> edit(\"routes.jl\")","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Append this at the bottom of the routes.jl file and save it:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# routes.jl\nroute(\"/hello\") do\n  \"Welcome to Genie!\"\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We are using the route method, passing in the \"/hello\" URL and an anonymous function which returns the string \"Welcome to Genie!\". What this means is that for each request to the \"/hello\" URL, our app will invoke the route handler function and will respond with the welcome message.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Visit http://127.0.0.1:8000/hello for a warm welcome!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Working-with-resources","page":"Working with Genie Apps","title":"Working with resources","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Adding our code to the routes.jl file works great for small projects, where you want to quickly publish features on the web. But for larger projects we're better off using Genie's MVC structure (MVC stands for Model-View-Controller). By employing the Model-View-Controller design pattern we can break our code into modules with clear responsibilities: the Model is used for data access, the View renders the response to the client, and the Controller orchestrates the interactions between Models and Views and handles requests. Modular code is easier to write, test and maintain.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"A Genie app can be architected around the concept of \"resources\". A resource represents a business entity (something like a user, or a product, or an account) and maps to a bundle of files (controller, model, views, etc). Resources live under the app/resources/ folder and each resource has its own dedicated folder, where all of its files are hosted. For example, if we have a web app about \"books\", a \"books\" folder would be found at app/resources/books and will contain all the files for publishing books on the web (usually called BooksController.jl for the controller, Books.jl for the model, BooksValidator.jl for the model validator – as well as a views folder for hosting all the view files necessary for rendering books data).","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"HEADS UP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"When creating a default Genie app, the app/ folder might be missing. It will be automatically created the first time you add a resource via Genie's generators.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Using-Controllers","page":"Working with Genie Apps","title":"Using Controllers","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Controllers are used to orchestrate interactions between client requests, Models (which handle data access), and Views (which are responsible for rendering the responses which will be sent to the clients' web browsers). In a standard workflow, a route points to a method in the controller – which is charged with building and sending the response over the network, back to the client.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Let's add a \"books\" controller. Genie comes with handy generators and one of them is for creating new controllers:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Generate-the-Controller","page":"Working with Genie Apps","title":"Generate the Controller","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Let's generate our BooksController:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> Genie.Generator.newcontroller(\"Books\")\n[info]: New controller created at ./app/resources/books/BooksController.jl","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Great! Let's edit BooksController.jl (julia> edit(\"./app/resources/books/BooksController.jl\")) and add something to it. For example, a function which returns some of Bill Gates' recommended books would be nice. Make sure that BooksController.jl looks like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# app/resources/books/BooksController.jl\nmodule BooksController\n\nstruct Book\n  title::String\n  author::String\nend\n\nconst BillGatesBooks = Book[\n  Book(\"The Best We Could Do\", \"Thi Bui\"),\n  Book(\"Evicted: Poverty and Profit in the American City\", \"Matthew Desmond\"),\n  Book(\"Believe Me: A Memoir of Love, Death, and Jazz Chickens\", \"Eddie Izzard\"),\n  Book(\"The Sympathizer\", \"Viet Thanh Nguyen\"),\n  Book(\"Energy and Civilization, A History\", \"Vaclav Smil\")\n]\n\nfunction billgatesbooks()\n  \"\n  <h1>Bill Gates' list of recommended books</h1>\n  <ul>\n    $([\"<li>$(book.title) by $(book.author)</li>\" for book in BillGatesBooks]...)\n  </ul>\n  \"\nend\n\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Our controller is just a plain Julia module where we define a Book struct and set up an array of book objects. We then define a function, billgatesbooks, which returns an HTML string, with a H1 heading and an unordered list of all the books. We used an array comprehension to iterate over each book and render it in a <li> element. The elements of the array are then concatenated using the splat ... operator.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The plan is to map this function to a route and expose it on the internet.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Checkpoint","page":"Working with Genie Apps","title":"Checkpoint","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Before exposing it on the web, we can test the function in the REPL:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> using MyGenieApp.BooksController\n\njulia> BooksController.billgatesbooks()","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The output of the function call should be a HTML string which looks pretty much like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"\"<h1>Bill Gates' list of recommended books</h1><ul><li>The Best We Could Do by Thi Bui</li><li>Evicted:\nPoverty and Profit in the American City by Matthew Desmond</li><li>Believe Me: A Memoir of Love, Death, and Jazz\nChickens by Eddie Izzard</li><li>The Sympathizer by Viet Thanh Nguyen</li><li>Energy and Civilization, A History by\nVaclav Smil</li></ul>\"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Please make sure that it works as expected.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Setup-the-route","page":"Working with Genie Apps","title":"Setup the route","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now, let's expose our billgatesbooks method on the web. We need to add a new route which points to it. Add these to the routes.jl file:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# routes.jl\nusing Genie\nusing MyGenieApp.BooksController\n\nroute(\"/bgbooks\", BooksController.billgatesbooks)","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"In the snippet we declared that we're using MyGenieApp.BooksController. Do notice that Genie automatically included the module as there was no need to explicitly include the file – and in addition Genie will reload the source code every time we change it. Next we defined a route mapping the /bgbooks URL and the BooksController.billgatesbooks function (we say that the BooksController.billgatesbooks is the route handler for the /bgbooks URL or endpoint).","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"That's all! If you now visit http://localhost:8000/bgbooks you'll see Bill Gates' list of recommended books (well, at least some of them, the man reads a lot!).","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"PRO TIP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If you would rather work with Julia instead of wrangling HTML strings, you can use Genie's Renderer.Html API. It provides functions which map every standard HTML element. For instance, the BooksController.billgatesbooks function can be written as follows, as an array of HTML elements:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"using Genie.Renderer.Html\n\nfunction billgatesbooks()\n  [\n    h1() do\n      \"Bill Gates' list of recommended books\"\n    end\n    ul() do\n      for_each(BillGatesBooks) do book\n        li() do\n          book.title * \" by \" * book.author\n        end\n      end\n    end\n  ]\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The for_each function iterates over a collection of elements and concatenates the output of each loop into the result of the loop. We'll talk about it more soon.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Adding-views","page":"Working with Genie Apps","title":"Adding views","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"However, putting HTML into the controllers is a bad idea: HTML should stay in the dedicated view files and contain as little logic as possible. Let's refactor our code to use views instead.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The views used for rendering a resource should be placed inside the views/ folder, within that resource's own folder structure. So in our case, we will add an app/resources/books/views/ folder. Just go ahead and do it, Genie does not provide a generator for this task:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> mkdir(joinpath(\"app\", \"resources\", \"books\", \"views\"))","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We created the views/ folder in app/resources/books/. We provided the full path as our REPL is running in the the root folder of the app. Also, we use the joinpath function so that Julia creates the path in a cross-platform way.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Naming-views","page":"Working with Genie Apps","title":"Naming views","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Usually each controller method will have its own rendering logic – hence, its own view file. Thus, it's a good practice to name the view files just like the methods, so that we can keep track of where they're used.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"At the moment, Genie supports HTML and Markdown view files, as well as plain Julia. Their type is identified by file extension so that's an important part. The HTML views use a .jl.html extension while the Markdown files go with .jl.md and the Julia ones by .jl.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#HTML-views","page":"Working with Genie Apps","title":"HTML views","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"All right then, let's add our first view file for the BooksController.billgatesbooks method. Let's create an HTML view file. With Julia:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> touch(joinpath(\"app\", \"resources\", \"books\", \"views\", \"billgatesbooks.jl.html\"))","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Genie supports a special type of dynamic HTML view, where we can embed Julia code. These are high performance compiled views. They are not parsed as strings: instead, the HTML is converted to a Julia function that uses native Julia rendering code and is cached to the file system and loaded like any other Julia file. Hence, the first time you load a view, or after you change one, you might notice a certain delay – it's the time needed to generate, compile and load the view. On next runs (especially in production) it's going to be blazing fast!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"In case you're curious, the auto-generated Julia view functions are stored by default in the build/ folder in the app. Feel free to take a look. The build/ folder can be safely deleted, Genie will create it back as needed. The location of the build/ folder is configurable and can be changed from Genie's config.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now all we need to do is to move the HTML code out of the controller and into the view, improving it a bit to also show a count of the number of books. Edit the view file as follows (julia> edit(\"app/resources/books/views/billgatesbooks.jl.html\")):","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"<!-- billgatesbooks.jl.html -->\n<h1>Bill Gates' top $(length(books)) recommended books</h1>\n<ul>\n  <% for_each(books) do book %>\n    <li>$(book.title) by $(book.author)</li>\n  <% end %>\n</ul>","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"As you can see, it's just plain HTML with embedded Julia. We can add Julia code by using the <% ... %> code block tags – these should be used for more complex, multiline expressions. Or by using plain Julia string interpolation with $(...) – for simple values outputting.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"To make HTML generation more efficient, Genie provides a series of helpers, like the above for_each macro which allows iterating over a collection, passing the current item into the processing function.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Rendering-views","page":"Working with Genie Apps","title":"Rendering views","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We now need to refactor our controller to use the view, passing in the expected variables. We will use the html method which renders and outputs the response as HTML. Update the definition of the billgatesbooks function to be as follows:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# BooksController.jl\nusing Genie.Renderer.Html\n\nfunction billgatesbooks()\n  html(:books, :billgatesbooks, books = BillGatesBooks)\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"First, notice that we needed to add Genie.Renderer.Html as a dependency, to get access to the html method. As for the html method itself, it takes as its arguments the name of the resource, the name of the view file, and a list of keyword arguments representing view variables:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":":books is the name of the resource (which effectively indicates in which views folder Genie should look for the","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"view file – in our case app/resources/books/views);","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":":billgatesbooks is the name of the view file. We don't need to pass the extension, Genie will figure it out since","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"there's only one file with this name;","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"and finally, we pass the values we want to expose in the view, as keyword arguments.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"That's it – our refactored app should be ready! You can try it out for yourself at http://localhost:8000/bgbooks","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Markdown-views","page":"Working with Genie Apps","title":"Markdown views","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Markdown views work similar to HTML views – employing the same embedded Julia functionality. Here is how you can add a Markdown view for our billgatesbooks function.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"First, create the corresponding view file, using the .jl.md extension. Maybe with:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> touch(joinpath(\"app\", \"resources\", \"books\", \"views\", \"billgatesbooks.jl.md\"))","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now edit the file and make sure it looks like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"<!-- app/resources/books/views/billgatesbooks.jl.md -->\n# Bill Gates' $(length(books)) recommended books\n\n$(\n  for_each(books) do book\n    \"* $(book.title) by $(book.author) \\n\"\n  end\n)","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Notice that Markdown views do not support Genie's HTML embedded Julia tags <% ... %>. Only string interpolation $(...) is accepted, but it works across multiple lines.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If you reload the page now, however, Genie will still load the HTML view. The reason is that, if we have only one view file, Genie will manage. But if there's more than one, the framework won't know which one to pick. It won't error out but will pick the default one, which is the HTML version.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"It's a simple change in the BookiesController: we have to explicitly tell Genie which file to load, extension and all:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# BooksController.jl\nfunction billgatesbooks()\n  html(:books, \"billgatesbooks.jl.md\", books = BillGatesBooks)\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Taking-advantage-of-layouts","page":"Working with Genie Apps","title":"Taking advantage of layouts","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Genie's views are rendered within a layout file. Layouts are meant to render the theme of the website, or the \"frame\" around the view – the elements which are common on all the pages. The layout file can include visible elements, like the main menu or the footer. But also maybe the <head> tag or the assets tags (<link> and <script> tags for loading CSS and JavaScript files in all the pages).","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Every Genie app has a main layout file which is used by default – it can be found in app/layouts/ and is called app.jl.html. It looks like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"<!-- app/layouts/app.jl.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Genie :: The highly productive Julia web framework</title>\n    <!-- link rel=\"stylesheet\" href=\"/css/application.css\" / -->\n  </head>\n  <body>\n    <%\n      @yield\n    %>\n    <!-- script src=\"/js/application.js\"></script -->\n  </body>\n</html>","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We can edit it. For example, add this right under the opening <body> tag, just above the <% tag:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"<h1>Welcome to top books</h1>","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If you reload the page at http://localhost:8000/bgbooks you will see the new heading.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"But we don't have to stick to the default; we can add additional layouts. Let's suppose that we have, for example, an admin area which should have a completely different theme. We can add a dedicated layout for that:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> touch(joinpath(\"app\", \"layouts\", \"admin.jl.html\"))","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now edit it (julia> edit(\"app/layouts/admin.jl.html\")) and make it look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"<!-- app/layouts/admin.jl.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Genie Admin</title>\n  </head>\n  <body>\n    <h1>Books admin</h1>\n    <%\n      @yield\n    %>\n  </body>\n</html>","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If we want to apply it, we must instruct our BooksController to use it. The html function takes a keyword argument named layout, for the layout file. Update the billgatesbooks function to look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# BooksController.jl\nfunction billgatesbooks()\n  html(:books, :billgatesbooks, books = BillGatesBooks, layout = :admin)\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Reload the page and you'll see the new heading.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#The-@yield-instruction","page":"Working with Genie Apps","title":"The @yield instruction","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"There is a special instruction in the layouts: @yield. It outputs the contents of the view as rendered through the controller. So where this macro is present, Genie will output the HTML resulting from rendering the view by executing the route handler function within the controller.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Using-view-paths","page":"Working with Genie Apps","title":"Using view paths","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"For very simple applications the MVC and the resource-centric approaches might involve too much boilerplate. In such cases, we can simplify the code by referencing the view (and layout) by file path, ex:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# BooksController.jl\nusing Genie.Renderer\n\nfunction billgatesbooks()\n  html(path\"app/resources/books/views/billgatesbooks.jl.html\", books = BillGatesBooks, layout = path\"app/layouts/app.jl.html\")\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Rendering-JSON-views","page":"Working with Genie Apps","title":"Rendering JSON views","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"A common use case for web apps is to serve as backends for RESTful APIs. For such cases, JSON is the preferred data format. You'll be happy to hear that Genie has built-in support for JSON responses. Let's add an endpoint for our API – which will render Bill Gates' books as JSON.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We can start in the routes.jl file, by appending this","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"route(\"/api/v1/bgbooks\", BooksController.API.billgatesbooks)","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Next, in BooksController.jl, append the extra logic at the end of the file, before the closing end. The whole file should look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# BooksController.jl\nmodule BooksController\n\nusing Genie.Renderer.Html\n\nstruct Book\n  title::String\n  author::String\nend\n\nconst BillGatesBooks = Book[\n  Book(\"The Best We Could Do\", \"Thi Bui\"),\n  Book(\"Evicted: Poverty and Profit in the American City\", \"Matthew Desmond\"),\n  Book(\"Believe Me: A Memoir of Love, Death, and Jazz Chickens\", \"Eddie Izzard\"),\n  Book(\"The Sympathizer!\", \"Viet Thanh Nguyen\"),\n  Book(\"Energy and Civilization, A History\", \"Vaclav Smil\")\n]\n\nfunction billgatesbooks()\n  html(:books, :billgatesbooks, layout = :admin, books = BillGatesBooks)\nend\n\n\nmodule API\n\nusing ..BooksController\nusing Genie.Renderer.Json\n\nfunction billgatesbooks()\n  json(BooksController.BillGatesBooks)\nend\n\nend\n\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We nested an API module within the BooksController module, where we defined another billgatesbooks function which outputs a JSON.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If you go to http://localhost:8000/api/v1/bgbooks it should already work as expected.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#JSON-views","page":"Working with Genie Apps","title":"JSON views","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"However, we have just committed one of the cardinal sins of API development. We have just forever coupled our internal data structure to its external representation. This will make future refactoring very complicated and error prone as any changes in the data will break the client's integrations. The solution is to, again, use views, to fully control how we render our data – and decouple the data structure from its rendering on the web.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Genie has support for JSON views – these are plain Julia files which have the \".json.jl\" extension. Let's add one in our views/ folder:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> touch(joinpath(\"app\", \"resources\", \"books\", \"views\", \"billgatesbooks.json.jl\"))","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We can now create a proper response. Put this in the view file:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# app/resources/books/views/billgatesbooks.json.jl\n\"Bill Gates' list of recommended books\" => books","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Final step, instructing BooksController to render the view. Simply replace the existing billgatesbooks function within the API sub-module with the following:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"function billgatesbooks()\n  json(:books, :billgatesbooks, books = BooksController.BillGatesBooks)\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"This should hold no surprises – the json function is similar to the html one we've seen before. So now we're rendering a custom JSON response. That's all – everything should work!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"HEADS UP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Why-JSON-views-have-the-extension-ending-in-.jl-but-HTML-and-Markdown-views-do-not?","page":"Working with Genie Apps","title":"Why JSON views have the extension ending in .jl but HTML and Markdown views do not?","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Good question! The extension of the views is chosen in order to preserve correct syntax highlighting in the IDE/code editor.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Since practically HTML and Markdown views are HTML and Markdown files with some embedded Julia code, we want to use the HTML or Markdown syntax highlighting. For JSON views, we use pure Julia, so we want Julia syntax highlighting.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Accessing-databases-with-SearchLight-models","page":"Working with Genie Apps","title":"Accessing databases with SearchLight models","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"You can get the most out of Genie by pairing it with its seamless ORM layer, SearchLight. SearchLight, a native Julia ORM, provides excellent support for working with relational databases. The Genie + SearchLight combo can be used to productively develop CRUD (Create-Read-Update-Delete) apps.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"HEADS UP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"CRUD stands for Create-Read-Update-Delete and describes the data workflow in many web apps, where resources are created, read (listed), updated, and deleted.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"SearchLight represents the \"M\" part in Genie's MVC architecture (thus, the Model layer).","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Let's begin by adding SearchLight to our Genie app. All Genie apps manage their dependencies in their own Julia environment, through their Project.toml and Manifest.toml files.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"So we need to make sure that we're in pkg> mode first (which is entered by typing ] in julian mode, ie: julia>]). The cursor should change to (MyGenieApp) pkg>.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Next, we add SearchLight:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"(MyGenieApp) pkg> add SearchLight","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Adding-a-database-adapter","page":"Working with Genie Apps","title":"Adding a database adapter","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"SearchLight provides a database agnostic API for working with various backends (at the moment, MySQL, SQLite, Postgres and Oracle). Thus, we also need to add the specific adapter. To keep things simple, let's use SQLite for our app. Hence, we'll need the SearchLightSQLite package:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"(MyGenieApp) pkg> add SearchLightSQLite","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Setup-the-database-connection","page":"Working with Genie Apps","title":"Setup the database connection","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Genie is designed to seamlessly integrate with SearchLight and provides access to various database oriented generators. First we need to tell Genie/SearchLight how to connect to the database. Let's use them to set up our database support. Run this in the Genie/Julia REPL:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> Genie.Generator.db_support()","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The command will add a db/ folder within the root of the app. What we're looking for is the db/connection.yml file which tells SearchLight how to connect to the database. Let's edit it. Make the file look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"env: ENV[\"GENIE_ENV\"]\n\ndev:\n  adapter: SQLite\n  database: db/books.sqlite\n  config:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"This instructs SearchLight to run in the environment of the current Genie app (by default dev), using SQLite for the adapter (backend) and a database stored at db/books.sqlite (the database will be created automatically if it does not exist). We could pass extra configuration options in the config object, but for now we don't need anything else.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"HEADS UP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If you are using a different adapter, make sure that the database configured already exists and that the configured user can successfully access it – SearchLight will not attempt to create the database.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now we can ask SearchLight to load it up:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> using SearchLight\n\njulia> SearchLight.Configuration.load()\nDict{String,Any} with 4 entries:\n  \"options\"  => Dict{String,String}()\n  \"config\"   => nothing\n  \"database\" => \"db/books.sqlite\"\n  \"adapter\"  => \"SQLite\"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Let's just go ahead and try it out by connecting to the DB:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> using SearchLightSQLite\n\njulia> SearchLight.Configuration.load() |> SearchLight.connect","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"This should return a SQLite.DB(\"db/books.sqlite\") object. If that is the case, the connection succeeded and we got back a SQLite database handle.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"PRO TIP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Each database adapter exposes a CONNECTIONS collection where we can access the connection:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> SearchLightSQLite.CONNECTIONS\n1-element Array{SQLite.DB,1}:\n SQLite.DB(\"db/books.sqlite\")","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Awesome! If all went well you should have a books.sqlite database in the db/ folder.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"shell> tree db\ndb\n├── books.sqlite\n├── connection.yml\n├── migrations\n└── seeds","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Managing-the-database-schema-with-SearchLight-migrations","page":"Working with Genie Apps","title":"Managing the database schema with SearchLight migrations","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Database migrations provide a way to reliably, consistently and repeatedly apply (and undo) changes to the structure of your database (known as \"schema transformations\"). They are specialised scripts for adding, removing and altering DB tables – these scripts are placed under version control and are managed by a dedicated system which knows which scripts have been run and which not, and is able to run them in the correct order.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"SearchLight needs its own DB table to keep track of the state of the migrations so let's set it up:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> SearchLight.Migrations.init()\n[ Info: Created table schema_migrations","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"This command sets up our database with the needed table in order to manage migrations.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"PRO TIP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"You can use the SearchLight API to execute random queries against the database backend. For example we can confirm that the table is really there:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> SearchLight.query(\"SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%'\")\n┌ Info: SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%'\n└\n\n1×1 DataFrames.DataFrame\n│ Row │ name              │\n│     │ String⍰           │\n├─────┼───────────────────┤\n│ 1   │ schema_migrations │","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The result is a DataFrame object.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Creating-our-Book-model","page":"Working with Genie Apps","title":"Creating our Book model","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"SearchLight, just like Genie, uses the convention-over-configuration design pattern. It prefers for things to be setup in a certain way and provides sensible defaults, versus having to define everything in extensive configuration files. And fortunately, we don't even have to remember what these conventions are, as SearchLight also comes with an extensive set of generators.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Lets ask SearchLight to create a new model:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> SearchLight.Generator.newresource(\"Book\")\n\n[ Info: New model created at /Users/adrian/Dropbox/Projects/MyGenieApp/app/resources/books/Books.jl\n[ Info: New table migration created at /Users/adrian/Dropbox/Projects/MyGenieApp/db/migrations/2020020909574048_create_table_books.jl\n[ Info: New validator created at /Users/adrian/Dropbox/Projects/MyGenieApp/app/resources/books/BooksValidator.jl\n[ Info: New unit test created at /Users/adrian/Dropbox/Projects/MyGenieApp/test/books_test.jl","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"SearchLight has created the Books.jl model, the *_create_table_books.jl migration file, the BooksValidator.jl model validator and the books_test.jl test file.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"HEADS UP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The first part of the migration file will be different for you!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The *_create_table_books.jl file will be named differently as the first part of the name is the file creation timestamp. This timestamp part guarantees that names are unique and file name clashes are avoided (for example when working as a team a creating similar migration files).","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Writing-the-table-migration","page":"Working with Genie Apps","title":"Writing the table migration","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Lets begin by writing the migration to create our books table. SearchLight provides a powerful DSL for writing migrations. Each migration file needs to define two methods: up which applies the changes – and down which undoes the effects of the up method. So in our up method we want to create the table – and in down we want to drop the table.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The naming convention for tables in SearchLight is that the table name should be pluralized (books) – because a table contains multiple books (and each row represents an object, a single book). But don't worry, the migration file should already be pre-populated with the correct table name.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Edit the db/migrations/*_create_table_books.jl file and make it look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"module CreateTableBooks\n\nimport SearchLight.Migrations: create_table, column, primary_key, add_index, drop_table\n\nfunction up()\n  create_table(:books) do\n    [\n      primary_key()\n      column(:title, :string, limit = 100)\n      column(:author, :string, limit = 100)\n    ]\n  end\n\n  add_index(:books, :title)\n  add_index(:books, :author)\nend\n\nfunction down()\n  drop_table(:books)\nend\n\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The code is pretty easy to follow: in the up function we call create_table and pass an array of columns: a primary key, a title column and an author column (both strings have a max length of 100). We also add two indices (one on the title and the other on the author columns). As for the down method, it invokes the drop_table function to remove the table.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Running-the-migration","page":"Working with Genie Apps","title":"Running the migration","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We can see what SearchLight knows about our migrations with the SearchLight.Migrations.status command:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> SearchLight.Migrations.status()\n|   | Module name & status                   |\n|   | File name                              |\n|---|----------------------------------------|\n|   |                 CreateTableBooks: DOWN |\n| 1 | 2020020909574048_create_table_books.jl |","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"So our migration is in the down state – meaning that its up method has not been run. We can easily fix this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> SearchLight.Migrations.last_up()\n[ Info: Executed migration CreateTableBooks up","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If we recheck the status, the migration is up:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> SearchLight.Migrations.status()\n|   | Module name & status                   |\n|   | File name                              |\n|---|----------------------------------------|\n|   |                   CreateTableBooks: UP |\n| 1 | 2020020909574048_create_table_books.jl |","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Our table is ready!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Defining-the-model","page":"Working with Genie Apps","title":"Defining the model","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now it's time to edit our model file at app/resources/books/Books.jl. Another convention in SearchLight is that we're using the pluralized name (Books) for the module – because it's for managing multiple books. And within it we define a type (a mutable struct), called Book – which represents an item (a single book) which maps to a row in the underlying database.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Edit the Books.jl file to make it look like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# Books.jl\nmodule Books\n\nimport SearchLight: AbstractModel, DbId, save!\nimport Base: @kwdef\n\nexport Book\n\n@kwdef mutable struct Book <: AbstractModel\n  id::DbId = DbId()\n  title::String = \"\"\n  author::String = \"\"\nend\n\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"We defined a mutable struct which matches our previous Book type by using the @kwdef macro, in order to also define a keyword constructor, as SearchLight needs it.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Using-our-model","page":"Working with Genie Apps","title":"Using our model","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"To make things more interesting, we should import our current books into the database. Add this function to the Books.jl module, under the Book() constructor definition (just above the module's closing end):","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# Books.jl\nfunction seed()\n  BillGatesBooks = [\n    (\"The Best We Could Do\", \"Thi Bui\"),\n    (\"Evicted: Poverty and Profit in the American City\", \"Matthew Desmond\"),\n    (\"Believe Me: A Memoir of Love, Death, and Jazz Chickens\", \"Eddie Izzard\"),\n    (\"The Sympathizer!\", \"Viet Thanh Nguyen\"),\n    (\"Energy and Civilization, A History\", \"Vaclav Smil\")\n  ]\n\n  for b in BillGatesBooks\n    Book(title = b[1], author = b[2]) |> save!\n  end\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Auto-loading-the-DB-configuration","page":"Working with Genie Apps","title":"Auto-loading the DB configuration","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now, to try things out. Genie takes care of loading all our resource files for us when we load the app. To do this, Genie comes with a special file called an initializer, which automatically loads the database configuration and sets up SearchLight. Check config/initializers/searchlight.jl to see how this is done.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Heads up!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"All the *.jl files placed into the config/initializers/ folder are automatically included by Genie upon starting the Genie app. They are included early (upon initialisation), before the controllers, models, views, are loaded.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Trying-it-out","page":"Working with Genie Apps","title":"Trying it out","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now it's time to restart our REPL session and test our app. Close the Julia REPL session to exit to the OS command line and run:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"$ bin/repl","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"On Windows you will need to run bin/repl.bat instead.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The repl executable script placed within the app's bin/ folder starts a new Julia REPL session and loads the applications' environment. Everything should be automatically loaded now, DB configuration included - so we can invoke the previously defined seed function to insert the books:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> using MyGenieApp.Books\n\njulia> Books.seed()","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"There should be a list of queries showing how the data is inserted in the DB:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> Books.seed()\n[ Info: INSERT  INTO books (\"title\", \"author\") VALUES ('The Best We Could Do', 'Thi Bui')\n[ Info: INSERT  INTO books (\"title\", \"author\") VALUES ('Evicted: Poverty and Profit in the American City', 'Matthew Desmond')\n# output truncated","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If you want to make sure all went right (although trust me, it did, otherwise SearchLight would've thrown an Exception!), just ask SearchLight to retrieve the books we inserted:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> using SearchLight\n\njulia> all(Book)\n[ Info: 2020-02-09 13:29:32 SELECT \"books\".\"id\" AS \"books_id\", \"books\".\"title\" AS \"books_title\", \"books\".\"author\" AS \"books_author\" FROM \"books\" ORDER BY books.id ASC\n\n5-element Array{Book,1}:\n Book\n| KEY            | VALUE                |\n|----------------|----------------------|\n| author::String | Thi Bui              |\n| id::DbId       | 1                    |\n| title::String  | The Best We Could Do |\n\n Book\n| KEY            | VALUE                                            |\n|----------------|--------------------------------------------------|\n| author::String | Matthew Desmond                                  |\n| id::DbId       | 2                                                |\n| title::String  | Evicted: Poverty and Profit in the American City |\n\n# output truncated","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The SearchLight.all method returns all the Book items from the database.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"All good!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The next thing we need to do is to update our controller to use the model. Make sure that app/resources/books/BooksController.jl reads like this:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# BooksController.jl\nmodule BooksController\n\nusing Genie.Renderer.Html\nusing SearchLight\nusing MyGenieApp.Books\n\nfunction billgatesbooks()\n  html(:books, :billgatesbooks, books = all(Book))\nend\n\nmodule API\n\nusing ..BooksController\nusing Genie.Renderer.Json\nusing SearchLight\nusing MyGenieApp.Books\n\nfunction billgatesbooks()\n  json(:books, :billgatesbooks, books = all(Book))\nend\n\nend\n\nend","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Our JSON view needs a bit of tweaking too:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# app/resources/books/views/billgatesbooks.json.jl\n\"Bill's Gates list of recommended books\" => [Dict(\"author\" => b.author, \"title\" => b.title) for b in books]","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now if we just start the server we'll be able to see the list of books served from the database:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"# Start the server\njulia> up()","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The up method starts up the web server and takes us back to the interactive Julia REPL prompt.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Now, if, for example, we navigate to http://localhost:8000/api/v1/bgbooks, the output should match the following JSON document:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"{\n  \"Bill's Gates list of recommended books\": [\n    {\n      \"author\": \"Thi Bui\",\n      \"title\": \"The Best We Could Do\"\n    },\n    {\n      \"author\": \"Matthew Desmond\",\n      \"title\": \"Evicted: Poverty and Profit in the American City\"\n    },\n    {\n      \"author\": \"Eddie Izzard\",\n      \"title\": \"Believe Me: A Memoir of Love, Death, and Jazz Chickens\"\n    },\n    {\n      \"author\": \"Viet Thanh Nguyen\",\n      \"title\": \"The Sympathizer!\"\n    },\n    {\n      \"author\": \"Vaclav Smil\",\n      \"title\": \"Energy and Civilization, A History\"\n    }\n  ]\n}","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Let's add a new book to see how it works. We'll create a new Book item and persist it using the SearchLight.save! method:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> newbook = Book(title = \"Leonardo da Vinci\", author = \"Walter Isaacson\")\n\nBook\n| KEY            | VALUE             |\n|----------------|-------------------|\n| author::String | Walter Isaacson   |\n| id::DbId       | NULL              |\n| title::String  | Leonardo da Vinci |\n\n\njulia> save!(newbook)\n\n[ Info: INSERT  INTO books (\"title\", \"author\") VALUES ('Leonardo da Vinci', 'Walter Isaacson')\n[ Info: ; SELECT CASE WHEN last_insert_rowid() = 0 THEN -1 ELSE last_insert_rowid() END AS id\n[ Info: SELECT \"books\".\"id\" AS \"books_id\", \"books\".\"title\" AS \"books_title\", \"books\".\"author\" AS \"books_author\" FROM \"books\" WHERE \"id\" = 6 ORDER BY books.id ASC\n\nBook\n| KEY            | VALUE             |\n|----------------|-------------------|\n| author::String | Walter Isaacson   |\n| id::DbId       | 6                 |\n| title::String  | Leonardo da Vinci |","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"Calling the save! method, SearchLight has persisted the object in the database and then retrieved it and returned it (notice the updated id::DbId field).","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"The same save! operation can be written as a one-liner:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> Book(title = \"Leonardo da Vinci\", author = \"Walter Isaacson\") |> save!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"HEADS UP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If you also run the one-liner save! example, it will add the same book again. No problem, but if you want to remove it, you can use the delete method:","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"julia> duplicated_book = find(Book, title = \"Leonardo da Vinci\")[end]\n\njulia> delete(duplicated_bookd)\n[ Info: DELETE FROM books WHERE id = '7'\n\nBook\n| KEY            | VALUE             |\n|----------------|-------------------|\n| author::String | Walter Isaacson   |\n| id::DbId       | NULL              |\n| title::String  | Leonardo da Vinci |","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"If you reload the page at http://localhost:8000/bgbooks the new book should show up.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"{\n  \"Bill's Gates list of recommended books\": [\n    {\n      \"author\": \"Thi Bui\",\n      \"title\": \"The Best We Could Do\"\n    },\n    {\n      \"author\": \"Matthew Desmond\",\n      \"title\": \"Evicted: Poverty and Profit in the American City\"\n    },\n    {\n      \"author\": \"Eddie Izzard\",\n      \"title\": \"Believe Me: A Memoir of Love, Death, and Jazz Chickens\"\n    },\n    {\n      \"author\": \"Viet Thanh Nguyen\",\n      \"title\": \"The Sympathizer!\"\n    },\n    {\n      \"author\": \"Vaclav Smil\",\n      \"title\": \"Energy and Civilization, A History\"\n    },\n    {\n      \"author\": \"Walter Isaacson\",\n      \"title\": \"Leonardo da Vinci\"\n    }\n  ]\n}","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"PRO TIP","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"SearchLight exposes two similar data persistence methods: save! and save. They both perform the same action (persisting the object to the database), but save will return a Bool of value true to indicate that the operation was successful or a Bool of value false to indicate that the operation has failed. While the save! variant will return the persisted object upon success or will throw an exception on failure.","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"","category":"page"},{"location":"guides/Working_With_Genie_Apps.html#Congratulations","page":"Working with Genie Apps","title":"Congratulations","text":"","category":"section"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"You have successfully finished the first part of the step by step walkthrough - you have mastered the Genie basics, allowing you to set up a new app, register routes, add resources (controllers, models, and views), add database support, version the database schema with migrations, and execute basic queries with SearchLight!","category":"page"},{"location":"guides/Working_With_Genie_Apps.html","page":"Working with Genie Apps","title":"Working with Genie Apps","text":"In the next part we'll look at more advanced topics like handling forms and file uploads, templates rendering, interactivity and more.","category":"page"},{"location":"tutorials/11--Managing_External_Packages.html#Managing-external-packages-for-your-Genie-app","page":"Managing Genie app's dependencies","title":"Managing external packages for your Genie app","text":"","category":"section"},{"location":"tutorials/11--Managing_External_Packages.html","page":"Managing Genie app's dependencies","title":"Managing Genie app's dependencies","text":"Genie fully takes advantage of Julia's excellent package manager, Pkg – while allowing Genie developers to use any third party package available in Julia's ecosystem. This is achieved by taking a common sense approach: Genie apps are just plain Julia projects.","category":"page"},{"location":"tutorials/11--Managing_External_Packages.html","page":"Managing Genie app's dependencies","title":"Managing Genie app's dependencies","text":"In order to add extra packages to your Genie app, thus, we need to use Julia's Pkg features:","category":"page"},{"location":"tutorials/11--Managing_External_Packages.html","page":"Managing Genie app's dependencies","title":"Managing Genie app's dependencies","text":"start a Genie REPL with your app: $ bin/repl. This will automatically load the package environment of the app.\nswitch to Pkg mode: julia> ]\nadd the package you want, for example OhMyREPL: (MyGenieApp) pkg> add OhMyREPL","category":"page"},{"location":"tutorials/11--Managing_External_Packages.html","page":"Managing Genie app's dependencies","title":"Managing Genie app's dependencies","text":"That's all! Now you can use the packages at the Genie REPL or anywhere in your app via using or import.","category":"page"},{"location":"tutorials/11--Managing_External_Packages.html","page":"Managing Genie app's dependencies","title":"Managing Genie app's dependencies","text":"Use the same approach to update the packages in your app, via: pkg> up and apply all available updates, or pkg> up OhMyREPL to update a single package.","category":"page"},{"location":"api/secrets.html","page":"-","title":"-","text":"CurrentModule = Secrets","category":"page"},{"location":"api/secrets.html","page":"-","title":"-","text":"load\nsecret\nsecret_token\nsecret_token!","category":"page"},{"location":"api/commands.html","page":"-","title":"-","text":"CurrentModule = Commands","category":"page"},{"location":"api/commands.html","page":"-","title":"-","text":"called_command\nexecute\nparse_commandline_args","category":"page"},{"location":"tutorials/1--Overview.html#Welcome-to-Genie","page":"Welcome to Genie","title":"Welcome to Genie","text":"","category":"section"},{"location":"tutorials/1--Overview.html#The-Highly-Productive-Web-Framework-for-Julia","page":"Welcome to Genie","title":"The Highly Productive Web Framework for Julia","text":"","category":"section"},{"location":"tutorials/1--Overview.html","page":"Welcome to Genie","title":"Welcome to Genie","text":"Genie is a full stack web framework for the Julia programming language. Genie's goals are: excellent developer productivity, great run-time performance, and best practices and security by default.","category":"page"},{"location":"tutorials/1--Overview.html","page":"Welcome to Genie","title":"Welcome to Genie","text":"The Genie web framework follows in the footsteps of mainstream full stack web frameworks like Ruby on Rails and Django, while staying 100% true to its Julia roots. Genie's architecture and development is inspired by the best features present in other frameworks, but not by their design. Genie takes a no-magic no-nonsense approach by doing things the Julia way: Controllers are plain Julia modules, Models leverage types and multiple dispatch, Genie apps are nothing but Julia projects, versioning and dependency management is provided by Julia's own Pkg, and code loading and reloading is automatically set up with Revise.","category":"page"},{"location":"tutorials/1--Overview.html","page":"Welcome to Genie","title":"Welcome to Genie","text":"Genie also takes inspiration from Julia's \"start simple, grow as needed\" philosophy, by allowing developers to bootstrap an app in the REPL or in a notebook, or easily create web services and APIs with just a few lines of code.","category":"page"},{"location":"tutorials/1--Overview.html","page":"Welcome to Genie","title":"Welcome to Genie","text":"As the projects grow more complex, Genie allows adding progressively more structure, by exposing a micro-framework which offers features like powerful routing, flexible logging, support for environments, view templates, etc.","category":"page"},{"location":"tutorials/1--Overview.html","page":"Welcome to Genie","title":"Welcome to Genie","text":"If database persistence is needed, support for Genie's ORM, SearchLight, can be added at any time. Finally, the full MVC structure can be used in order to develop and maintain more complex, end-to-end, web applications.","category":"page"},{"location":"tutorials/2--Installing_Genie.html#How-to-Install-Genie","page":"Installing Genie","title":"How to Install Genie","text":"","category":"section"},{"location":"tutorials/2--Installing_Genie.html","page":"Installing Genie","title":"Installing Genie","text":"Install Genie from Julia's registry – for example the latest version (currently version 5):","category":"page"},{"location":"tutorials/2--Installing_Genie.html","page":"Installing Genie","title":"Installing Genie","text":"pkg> add Genie","category":"page"},{"location":"tutorials/2--Installing_Genie.html","page":"Installing Genie","title":"Installing Genie","text":"Genie, just like Julia, uses semantic versioning in the form vX.Y.Z to designate:","category":"page"},{"location":"tutorials/2--Installing_Genie.html","page":"Installing Genie","title":"Installing Genie","text":"X : major version, introducing breaking changes\nY : minor version, brings new features, no breaking changes\nZ : patch version, fixes bugs, no new features or breaking changes","category":"page"},{"location":"API/secrets.html","page":"Secrets","title":"Secrets","text":"CurrentModule = Secrets","category":"page"},{"location":"API/secrets.html","page":"Secrets","title":"Secrets","text":"load\nsecret\nsecret_token\nsecret_token!","category":"page"},{"location":"API/secrets.html#Genie.Secrets.load","page":"Secrets","title":"Genie.Secrets.load","text":"load(root_dir::String = Genie.config.path_config; context::Union{Module,Nothing} = nothing) :: Nothing\n\nLoads (includes) the framework's secrets.jl file into the app's module context. The files are set up with Revise to be automatically reloaded.\n\n\n\n\n\n","category":"function"},{"location":"API/secrets.html#Genie.Secrets.secret","page":"Secrets","title":"Genie.Secrets.secret","text":"secret() :: String\n\nGenerates a random secret token to be used for configuring the call to Genie.Secrets.secret_token!.\n\n\n\n\n\n","category":"function"},{"location":"API/secrets.html#Genie.Secrets.secret_token","page":"Secrets","title":"Genie.Secrets.secret_token","text":"secret_token(generate_if_missing=true) :: String\n\nReturn the secret token used in the app for encryption and salting.\n\nUsually, this token is defined through Genie.Secrets.secret_token! in the config/secrets.jl file. Here, a temporary one is generated for the current session if no other token is defined and generate_if_missing is true.\n\n\n\n\n\n","category":"function"},{"location":"API/secrets.html#Genie.Secrets.secret_token!","page":"Secrets","title":"Genie.Secrets.secret_token!","text":"secret_token!(value = secret())\n\nDefine the secret token used in the app for encryption and salting.\n\n\n\n\n\n","category":"function"},{"location":"API/toolbox.html","page":"Toolbox","title":"Toolbox","text":"CurrentModule = Toolbox","category":"page"},{"location":"API/toolbox.html","page":"Toolbox","title":"Toolbox","text":"TaskInfo\nTaskResult\ntasks\nVoidTaskResult\nvalidtaskname\ntaskdocs\nloadtasks\nprinttasks\nnew\ntaskfilename\ntaskmodulename\nisvalidtask!","category":"page"},{"location":"API/toolbox.html#Genie.Toolbox.validtaskname","page":"Toolbox","title":"Genie.Toolbox.validtaskname","text":"validtaskname(task_name::String) :: String\n\nAttempts to convert a potentially invalid (partial) task_name into a valid one.\n\n\n\n\n\n","category":"function"},{"location":"API/toolbox.html#Genie.Toolbox.taskdocs","page":"Toolbox","title":"Genie.Toolbox.taskdocs","text":"task_docs(module_name::Module) :: String\n\nRetrieves the docstring of the runtask method and returns it as a string.\n\n\n\n\n\n","category":"function"},{"location":"API/toolbox.html#Genie.Toolbox.loadtasks","page":"Toolbox","title":"Genie.Toolbox.loadtasks","text":"loadtasks(; filter_type_name = Symbol()) :: Vector{TaskInfo}\n\nReturns a vector of all registered Genie tasks.\n\n\n\n\n\n","category":"function"},{"location":"API/toolbox.html#Genie.Toolbox.printtasks","page":"Toolbox","title":"Genie.Toolbox.printtasks","text":"Prints a list of all the registered Genie tasks to the standard output.\n\n\n\n\n\n","category":"function"},{"location":"API/toolbox.html#new","page":"Toolbox","title":"new","text":"new\n\nSpecial function available to inner constructors which created a new object of the type. See the manual section on Inner Constructor Methods for more information.\n\n\n\n\n\n","category":"keyword"},{"location":"API/toolbox.html#Genie.Toolbox.taskfilename","page":"Toolbox","title":"Genie.Toolbox.taskfilename","text":"task_file_name(cmd_args::Dict{String,Any}, config::Settings) :: String\n\nComputes the name of a Genie task based on the command line input.\n\n\n\n\n\n","category":"function"},{"location":"API/toolbox.html#Genie.Toolbox.taskmodulename","page":"Toolbox","title":"Genie.Toolbox.taskmodulename","text":"task_module_name(underscored_task_name::String) :: String\n\nComputes the name of a Genie task based on the command line input.\n\n\n\n\n\n","category":"function"},{"location":"API/toolbox.html#Genie.Toolbox.isvalidtask!","page":"Toolbox","title":"Genie.Toolbox.isvalidtask!","text":"isvalidtask!(parsed_args::Dict{String,Any}) :: Dict{String,Any}\n\nChecks if the name of the task passed as the command line arg is valid task identifier – if not, attempts to address it, by appending the TASKSUFFIX suffix. Returns the potentially modified `parsedargsDict`.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Using-Genie-with-Docker","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Genie comes with extended support for containerizing apps using Docker. The functionality is provided by the official GenieDeployDocker plugin.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Setting-up-GenieDeployDocker","page":"Using Genie with Docker","title":"Setting up GenieDeployDocker","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"In order to use the Docker integration features, first we need to add the GenieDeployDocker plugin for Genie.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"pkg> add GenieDeployDocker","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Generating-the-Genie-optimised-Dockerfile","page":"Using Genie with Docker","title":"Generating the Genie-optimised Dockerfile","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"You can bootstrap the Docker setup by invoking the GenieDeployDocker.dockerfile() function. This will generate a custom Dockerfile optimized for Genie web apps containerization. The file will be generated in the current work dir (or where instructed by the optional argument path – see the help for the dockerfile() function).","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Once generated, you can edit it and customize it as needed - Genie will not overwrite the file, thus preserving any changes (unless you call the dockerfile function again, passing the force=true argument).","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"The behavior of dockerfile() can be controlled by passing any of the multiple optional arguments supported.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Building-the-Docker-container","page":"Using Genie with Docker","title":"Building the Docker container","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Once we have our Dockerfile ready, we can invoke GenieDeployDocker.build() to set up the Docker container. You can pass any of the supported optional arguments to configure settings such as the container's name (by default \"genie\"), the path (defaults to current work dir), and others (see the output of help?> GenieDeployDocker.dockerfile for all the available options).","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Running-the-Genie-app-within-the-Docker-container","page":"Using Genie with Docker","title":"Running the Genie app within the Docker container","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"When the image is ready, we can run it with GenieDeployDocker.run(). We can configure any of the optional arguments in order to control how the app is run. Check the inline help for the function for more details.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Examples","page":"Using Genie with Docker","title":"Examples","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"First let's create a Genie app:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> using Genie\n\njulia> Genie.Generator.newapp(\"DockerTest\")\n[ Info: Done! New app created at /your/app/path/DockerTest\n# output truncated","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"When it's ready, let's add the Dockerfile:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> using GenieDeployDocker\n\njulia> GenieDeployDocker.dockerfile()\nDocker file successfully written at /your/app/path/DockerTest/Dockerfile","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Now, to build our container:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> GenieDeployDocker.build()\n# output truncated\nSuccessfully tagged genie:latest\nDocker container successfully built","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"And finally, we can now run our app within the Docker container:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> GenieDeployDocker.run()\nStarting docker container with `docker run -it --rm -p 80:8000 --name genieapp genie bin/server`\n# output truncated","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"We should then see the familiar Genie loading screen, indicating the app's loading progress and notifying us once the app is running.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Our application starts inside the Docker container, binding port 8000 within the container (where the Genie app is running) to the port 80 of the host. So we are now able to access our app at http://localhost. If you navigate to http://localhost w ith your favorite browser you'll see Genie's welcome page. Notice that we don't access on port 8000 - this page is served from the Docker container on the default port 80.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Inspecting-the-containers","page":"Using Genie with Docker","title":"Inspecting the containers","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"We can get a list of available container by using GenieDeployDocker.list(). This will show only the currently running containers by default, but we can pass the all=true argument to also include containers that are offline.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> GenieDeployDocker.list()\nCONTAINER ID   IMAGE     COMMAND        CREATED         STATUS         PORTS                          NAMES\nc87bfd8322cc   genie     \"bin/server\"   6 minutes ago   Up 6 minutes   80/tcp, 0.0.0.0:80->8000/tcp   genieapp\nProcess(`docker ps`, ProcessExited(0))","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Stopping-running-containers","page":"Using Genie with Docker","title":"Stopping running containers","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"The running containers can be stopped by using the GenieDeployDocker.stop() function, passing the name of the container.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> GenieDeployDocker.stop(\"genieapp\")","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Using-Docker-during-development","page":"Using Genie with Docker","title":"Using Docker during development","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"If we want to use Docker to serve the app during development, we need to mount our app from host (your computer) into the container – so that we can keep editing our files locally, but see the changes reflected in the Docker container. In order to do this we need to pass the mountapp = true argument to GenieDeployDocker.run(), like this:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> GenieDeployDocker.run(mountapp = true)\nStarting docker container with `docker run -it --rm -p 80:8000 --name genieapp -v /Users/adrian/DockerTest:/home/genie/app genie bin/server`","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"When the app finishes starting, we can edit the files on the host using our favorite IDE, and see the changes reflected in the Docker container.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Creating-an-optimized-Genie-sysimage-with-PackageCompiler.jl","page":"Using Genie with Docker","title":"Creating an optimized Genie sysimage with PackageCompiler.jl","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"If we are using Docker containers to deploy Genie apps in production, you can greatly improve the performance of the app by preparing a precompiled sysimage for Julia. We can include this workflow as part of the Docker build step as follows.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Edit-the-Dockerfile","page":"Using Genie with Docker","title":"Edit the Dockerfile","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"We'll start by making a few changes to our Dockerfile, as follows:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"1/ Under the line WORKDIR /home/genie/app add","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"# C compiler for PackageCompiler\nRUN apt-get update && apt-get install -y g++","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"2/ Under the line starting with RUN julia -e add","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"# Compile app\nRUN julia --project compiled/make.jl","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"You may also want to replace the line saying","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"ENV GENIE_ENV \"dev\"","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"with","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"ENV GENIE_ENV \"prod\"","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"to configure the application to run in production (first test locally to make sure that everything is properly configured to run the app in production environment).","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Add-PackageCompiler.jl","page":"Using Genie with Docker","title":"Add PackageCompiler.jl","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"We also need to add PackageCompiler as a dependency of our app:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"pkg> add PackageCompiler","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Add-the-needed-files","page":"Using Genie with Docker","title":"Add the needed files","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Create a new folder to host our files:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> mkdir(\"compiled\")","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Now create the following files:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia> touch(\"compiled/make.jl\")\njulia> touch(\"compiled/packages.jl\")","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Edit-the-files","page":"Using Genie with Docker","title":"Edit the files","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Now to put the content into each of the files.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Preparing-the-packages.jl-file","page":"Using Genie with Docker","title":"Preparing the packages.jl file","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Here we simply put an array of package that our app uses and that we want to precompile, ex:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"# packages.jl\nconst PACKAGES = [\n  \"Dates\",\n  \"Genie\",\n  \"Inflector\",\n  \"Logging\"\n]","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Preparing-the-make.jl-file","page":"Using Genie with Docker","title":"Preparing the make.jl file","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Now edit the make.jl file as follows:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"# make.jl\nusing PackageCompiler\n\ninclude(\"packages.jl\")\n\nPackageCompiler.create_sysimage(\n  PACKAGES,\n  sysimage_path = \"compiled/sysimg.so\",\n  cpu_target = PackageCompiler.default_app_cpu_target()\n)","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html#Using-the-precompiled-image","page":"Using Genie with Docker","title":"Using the precompiled image","text":"","category":"section"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"The result of these changes is that PackageCompiler will create a new Julia sysimage that will be stored inside the compiled/sysimg.so file. The last step is to instruct our bin/server script to use the image.","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"Edit the bin/server file and make it look like this:","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"julia --color=yes --depwarn=no --project=@. --sysimage=compiled/sysimg.so -q -i -- $(dirname $0)/../bootstrap.jl -s=true \"$@\"","category":"page"},{"location":"tutorials/16--Using_Genie_With_Docker.html","page":"Using Genie with Docker","title":"Using Genie with Docker","text":"With this change we're passing the additional --sysimage flag, indicating our new Julia sys image.","category":"page"},{"location":"API/index.html","page":"Genie","title":"Genie","text":"(Image: Genie Logo)","category":"page"},{"location":"API/index.html#Genie","page":"Genie","title":"Genie","text":"","category":"section"},{"location":"API/index.html#The-highly-productive-Julia-web-framework","page":"Genie","title":"The highly productive Julia web framework","text":"","category":"section"},{"location":"API/index.html","page":"Genie","title":"Genie","text":"Genie is Julia web framework that provides a streamlined and efficient workflow for developing modern web applications. It builds on Julia's strengths (high-level, high-performance, dynamic, JIT compiled), exposing a rich API and a powerful toolset for productive web development.","category":"page"},{"location":"API/index.html#Current-status","page":"Genie","title":"Current status","text":"","category":"section"},{"location":"API/index.html","page":"Genie","title":"Genie","text":"Genie is compatible with Julia v1.3 and up.","category":"page"},{"location":"API/index.html","page":"Genie","title":"Genie","text":"","category":"page"},{"location":"API/index.html#Acknowledgements","page":"Genie","title":"Acknowledgements","text":"","category":"section"},{"location":"API/index.html","page":"Genie","title":"Genie","text":"Genie uses a multitude of packages that have been kindly contributed by the Julia community.\nThe awesome Genie logo was designed by Alvaro Casanova.","category":"page"},{"location":"api/index.html","page":"Genie","title":"Genie","text":"(Image: Genie Logo)","category":"page"},{"location":"api/index.html#Genie","page":"Genie","title":"Genie","text":"","category":"section"},{"location":"api/index.html#The-highly-productive-Julia-web-framework","page":"Genie","title":"The highly productive Julia web framework","text":"","category":"section"},{"location":"api/index.html","page":"Genie","title":"Genie","text":"Genie is Julia web framework that provides a streamlined and efficient workflow for developing modern web applications. It builds on Julia's strengths (high-level, high-performance, dynamic, JIT compiled), exposing a rich API and a powerful toolset for productive web development.","category":"page"},{"location":"api/index.html#Current-status","page":"Genie","title":"Current status","text":"","category":"section"},{"location":"api/index.html","page":"Genie","title":"Genie","text":"Genie is compatible with Julia v1.3 and up.","category":"page"},{"location":"api/index.html","page":"Genie","title":"Genie","text":"","category":"page"},{"location":"api/index.html#Acknowledgements","page":"Genie","title":"Acknowledgements","text":"","category":"section"},{"location":"api/index.html","page":"Genie","title":"Genie","text":"Genie uses a multitude of packages that have been kindly contributed by the Julia community.\nThe awesome Genie logo was designed by Alvaro Casanova.","category":"page"},{"location":"api/headers.html","page":"-","title":"-","text":"CurrentModule = Genie.Headers","category":"page"},{"location":"api/headers.html","page":"-","title":"-","text":"normalize_header_key\nnormalize_headers\nset_access_control_allow_headers!\nset_access_control_allow_origin!\nset_headers!","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html#Deploying-Genie-apps-to-server-with-Nginx","page":"Deploying to server with Nginx","title":"Deploying Genie apps to server with Nginx","text":"","category":"section"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"This tutorial shows how to host a Julia/Genie app on with Nginx.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html#Prerequisites","page":"Deploying to server with Nginx","title":"Prerequisites","text":"","category":"section"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"To expose the app over the internet, one needs access to a server. This can be a local machine or a cloud instance such as AWS EC2 or a Google Cloud Compute Engine for example).","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"If using a local server, a static IP is needed to ensure continuous access to the app. Internet service provider generally charge a fee for such extra service.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html#The-application","page":"Deploying to server with Nginx","title":"The application","text":"","category":"section"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"We assume that a Genie app has been developed and is ready for deployment and that it is hosted as a project on a git repository.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"For example, the app MyGenieApp generated through Genie.Generator.newapp(\"MyGenieApp\") being hosted at github.com/user/MyGenieApp.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"The scripts presented in this tutorial are for Ubuntu 20.04.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html#Install-and-run-the-Genie-app-on-the-server","page":"Deploying to server with Nginx","title":"Install and run the Genie app on the server","text":"","category":"section"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Access the server:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"ssh -i \"ssh-key-for-instance.pem\" user@123.123.123.123","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Install Julia if not present. Then make the clone:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"git clone github.com/user/MyGenieApp\ncd MyGenieAp","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Install the app as any other Julia project:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"julia\n] activate .\npkg> instantiate\nexit()","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"In order to launch the app and exit the console without shutting down the app, we will launch it from a new screen:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"screen -S genie","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Then set the GENIE_ENV environment variable to prod:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"export GENIE_ENV=prod","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Launch the app:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"./bin/server","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Now the Genie app should be running on the server and be accessible at the following address: 123.123.123.123:8000 (if port 8000 has been open - see instance security settings). Note that you should configure the Genie app so that it doesn't serve the static content (see the Settings option server_handle_static_file in config/env/prod.jl). Static content should be handled by nginx. We can now detach from the genie screen used to launch the app (Ctl+A d).","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html#Install-and-configure-nginx-server","page":"Deploying to server with Nginx","title":"Install and configure nginx server","text":"","category":"section"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Nginx server will be used as a reverse proxy. It will listen requests made on port 80 (HTTP) and redirect traffic to the Genie app running on port 8000 (default Genie setting that can be changed).","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Nginx will also be used to serve the app static files, that is, the content under the ./public folder.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Finally, it can as well handle HTTPS requests, which will also be redirected to the Genie app listening on port 8000.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Installation:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"sudo apt-get update\nsudo apt-get install nginx\nsudo systemctl start nginx\nsudo systemctl enable nginx","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"A configuration file then needs to to be created to indicate on which port to listen (80 for HTTP) and to which port to redirect the traffic (8000 for default Genie config).","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Config is created in folder /etc/nginx/sites-available: sudo nano my-genie-app. Put the following content in my-genie-app:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"server {\n  listen 80;\n  listen [::]:80;\n\n  server_name   test.com;\n  root          /home/ubuntu/MyGenieApp/public;\n  index         welcome.html;\n\n  location / {\n      proxy_pass http://localhost:8000/;\n  }\n\n  location /css/genie {\n      proxy_pass http://localhost:8000/;\n  }\n  location /img/genie {\n      proxy_pass http://localhost:8000/;\n  }\n  location /js/genie {\n      proxy_pass http://localhost:8000/;\n  }\n}","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"server_name: refers to the web domain to be used. It can be put to an arbitrary name if the app is only to be served","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"directly from the server public IP.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"root: points to the public subfolder where the genie app was cloned.\nindex: refers to the site index (the landing page).\nThe various location following the initial proxy to the genie app are used to indicate static content folders to be","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"served by nginx. These are needed when the server_handle_static_file is set to false in the Genie app settings.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"To make that config effective, it needs to be present in sites-enabled. The default config can be removed.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"sudo ln -s /etc/nginx/sites-available/my-genie-app /etc/nginx/sites-enabled/my-genie-app","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Then restart the server to make changes effective:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"sudo systemctl restart nginx","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html#Enable-HTTPS","page":"Deploying to server with Nginx","title":"Enable HTTPS","text":"","category":"section"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"To enable HTTP, a site-certificate will be needed for the domain on which the site will be served. A practical approach is to use the utilities provided by certbot.","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Following provided instructions for nginx on Ubuntu 20.04:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"sudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Then, using certbot utility, a certificate will be generated and appropriate modification to nginx config will be brought to handle support for HTTPS:","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"sudo certbot --nginx","category":"page"},{"location":"tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html","page":"Deploying to server with Nginx","title":"Deploying to server with Nginx","text":"Note that this steps will check for ownernship of the test.com domain mentionned in the nginx config file. For that validation to succeed, it requires to have the A record for the domain set to 123.123.123.123.","category":"page"},{"location":"API/exceptions.html","page":"Exceptions","title":"Exceptions","text":"CurrentModule = Exceptions","category":"page"},{"location":"API/exceptions.html","page":"Exceptions","title":"Exceptions","text":"ExceptionalResponse\nFileExistsException\nInternalServerException\nNotFoundException\nRuntimeException","category":"page"},{"location":"API/exceptions.html#Genie.Exceptions.ExceptionalResponse","page":"Exceptions","title":"Genie.Exceptions.ExceptionalResponse","text":"struct ExceptionalResponse <: Exception\n\nA type of exception which wraps an HTTP Response object. The thrown exception will propagate until it is caught up the app stack or ultimately by Genie and the wrapped response is sent to the client.\n\nExample\n\nIf the user is not authenticated, an ExceptionalResponse is thrown - if the exception is not caught in the app's stack, Genie will catch it and return the wrapped Response object, forcing an HTTP redirect to the login page.\n\nisauthenticated() || throw(ExceptionalResponse(redirect(:show_login)))\n\n\n\n\n\n","category":"type"},{"location":"API/exceptions.html#Genie.Exceptions.FileExistsException","page":"Exceptions","title":"Genie.Exceptions.FileExistsException","text":"struct FileExistsException <: Exception\n\nCustom exception type for signaling that the requested file already exists.\n\n\n\n\n\n","category":"type"},{"location":"API/exceptions.html#Genie.Exceptions.InternalServerException","page":"Exceptions","title":"Genie.Exceptions.InternalServerException","text":"struct InternalServerException <: Exception\n\nDedicated exception type for server side exceptions. Results in a 500 error by default.\n\nArguments\n\nmessage::String\ninfo::String\ncode::Int\n\n\n\n\n\n","category":"type"},{"location":"API/exceptions.html#Genie.Exceptions.NotFoundException","page":"Exceptions","title":"Genie.Exceptions.NotFoundException","text":"struct NotFoundException <: Exception\n\nSpecialized exception representing a not found resources. Results in a 404 response being sent to the client.\n\nArguments\n\nmessage::String\ninfo::String\ncode::Int\nresource::String\n\n\n\n\n\n","category":"type"},{"location":"API/exceptions.html#Genie.Exceptions.RuntimeException","page":"Exceptions","title":"Genie.Exceptions.RuntimeException","text":"RuntimeException\n\nRepresents an unexpected and unhandled runtime exceptions. An error event will be logged and the exception will be sent to the client, depending on the environment (the error stack is dumped by default in dev mode or an error message is displayed in production).\n\nIt allows defining custom error message and info, as well as an error code, in addition to the exception object.\n\nArguments\n\nmessage::String\ninfo::String\ncode::Int\nex::Union{Nothing,Exception}\n\n\n\n\n\n","category":"type"},{"location":"API/requests.html","page":"Requests","title":"Requests","text":"CurrentModule = Requests","category":"page"},{"location":"API/requests.html","page":"Requests","title":"Requests","text":"jsonpayload\nrawpayload\nfilespayload\ninfilespayload\nRequests.write\nRequests.read\nfilename\npostpayload\ngetpayload\nrequest\npayload\nmatchedroute\nmatchedchannel\nwsclient","category":"page"},{"location":"API/requests.html#Genie.Requests.jsonpayload","page":"Requests","title":"Genie.Requests.jsonpayload","text":"jsonpayload()\n\nProcesses an application/json POST request. If it fails to successfully parse the JSON data it returns nothing. The original payload can still be accessed invoking rawpayload()\n\n\n\n\n\njsonpayload(v)\n\nProcesses an application/json POST request attempting to return value corresponding to key v.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.rawpayload","page":"Requests","title":"Genie.Requests.rawpayload","text":"rawpayload() :: String\n\nReturns the raw POST payload as a String.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.filespayload","page":"Requests","title":"Genie.Requests.filespayload","text":"filespayload() :: Dict{String,HttpFile}\n\nCollection of form uploaded files.\n\n\n\n\n\nfilespayload(filename::Union{String,Symbol}) :: HttpFile\n\nReturns the HttpFile uploaded through the key input name.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.infilespayload","page":"Requests","title":"Genie.Requests.infilespayload","text":"infilespayload(key::Union{String,Symbol}) :: Bool\n\nChecks if the collection of uploaded files contains a file stored under the key name.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Base.write","page":"Requests","title":"Base.write","text":"write(io::IO, x)\nwrite(filename::AbstractString, x)\n\nWrite the canonical binary representation of a value to the given I/O stream or file. Return the number of bytes written into the stream. See also print to write a text representation (with an encoding that may depend upon io).\n\nThe endianness of the written value depends on the endianness of the host system. Convert to/from a fixed endianness when writing/reading (e.g. using  htol and ltoh) to get results that are consistent across platforms.\n\nYou can write multiple values with the same write call. i.e. the following are equivalent:\n\nwrite(io, x, y...)\nwrite(io, x) + write(io, y...)\n\nExamples\n\nConsistent serialization:\n\njulia> fname = tempname(); # random temporary filename\n\njulia> open(fname,\"w\") do f\n           # Make sure we write 64bit integer in little-endian byte order\n           write(f,htol(Int64(42)))\n       end\n8\n\njulia> open(fname,\"r\") do f\n           # Convert back to host byte order and host integer type\n           Int(ltoh(read(f,Int64)))\n       end\n42\n\nMerging write calls:\n\njulia> io = IOBuffer();\n\njulia> write(io, \"JuliaLang is a GitHub organization.\", \" It has many members.\")\n56\n\njulia> String(take!(io))\n\"JuliaLang is a GitHub organization. It has many members.\"\n\njulia> write(io, \"Sometimes those members\") + write(io, \" write documentation.\")\n44\n\njulia> String(take!(io))\n\"Sometimes those members write documentation.\"\n\nUser-defined plain-data types without write methods can be written when wrapped in a Ref:\n\njulia> struct MyStruct; x::Float64; end\n\njulia> io = IOBuffer()\nIOBuffer(data=UInt8[...], readable=true, writable=true, seekable=true, append=false, size=0, maxsize=Inf, ptr=1, mark=-1)\n\njulia> write(io, Ref(MyStruct(42.0)))\n8\n\njulia> seekstart(io); read!(io, Ref(MyStruct(NaN)))\nBase.RefValue{MyStruct}(MyStruct(42.0))\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Base.read","page":"Requests","title":"Base.read","text":"read(io::IO, T)\n\nRead a single value of type T from io, in canonical binary representation.\n\nNote that Julia does not convert the endianness for you. Use ntoh or ltoh for this purpose.\n\nread(io::IO, String)\n\nRead the entirety of io, as a String (see also readchomp).\n\nExamples\n\njulia> io = IOBuffer(\"JuliaLang is a GitHub organization\");\n\njulia> read(io, Char)\n'J': ASCII/Unicode U+004A (category Lu: Letter, uppercase)\n\njulia> io = IOBuffer(\"JuliaLang is a GitHub organization\");\n\njulia> read(io, String)\n\"JuliaLang is a GitHub organization\"\n\n\n\n\n\nread(filename::AbstractString, args...)\n\nOpen a file and read its contents. args is passed to read: this is equivalent to open(io->read(io, args...), filename).\n\nread(filename::AbstractString, String)\n\nRead the entire contents of a file as a string.\n\n\n\n\n\nread(s::IO, nb=typemax(Int))\n\nRead at most nb bytes from s, returning a Vector{UInt8} of the bytes read.\n\n\n\n\n\nread(s::IOStream, nb::Integer; all=true)\n\nRead at most nb bytes from s, returning a Vector{UInt8} of the bytes read.\n\nIf all is true (the default), this function will block repeatedly trying to read all requested bytes, until an error or end-of-file occurs. If all is false, at most one read call is performed, and the amount of data returned is device-dependent. Note that not all stream types support the all option.\n\n\n\n\n\nread(command::Cmd)\n\nRun command and return the resulting output as an array of bytes.\n\n\n\n\n\nread(command::Cmd, String)\n\nRun command and return the resulting output as a String.\n\n\n\n\n\nread(stream::IO, [nb::Integer,] enc::Encoding)\nread(filename::AbstractString, [nb::Integer,] enc::Encoding)\nread(stream::IO, ::Type{String}, enc::Encoding)\nread(filename::AbstractString, ::Type{String}, enc::Encoding)\n\nMethods to read text in character encoding enc. See documentation for corresponding methods without the enc argument for details.\n\n\n\n\n\nread(file::HttpFile)\n\nReturns the content of file as string.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.filename","page":"Requests","title":"Genie.Requests.filename","text":"filename(file::HttpFile) :: String\n\nOriginal filename of the uploaded HttpFile file.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.postpayload","page":"Requests","title":"Genie.Requests.postpayload","text":"postpayload() :: Dict{Symbol,Any}\n\nA dict representing the POST variables payload of the request (corresponding to a form-data request)\n\n\n\n\n\npostpayload(key::Symbol) :: Any\n\nReturns the value of the POST variables key.\n\n\n\n\n\npostpayload(key::Symbol, default::Any)\n\nReturns the value of the POST variables key or the default value if key is not defined.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.getpayload","page":"Requests","title":"Genie.Requests.getpayload","text":"getpayload() :: Dict{Symbol,Any}\n\nA dict representing the GET/query variables payload of the request (the part correspoding to ?foo=bar&baz=moo)\n\n\n\n\n\ngetpayload(key::Symbol) :: Any\n\nThe value of the GET/query variable key, as in ?key=value\n\n\n\n\n\ngetpayload(key::Symbol, default::Any) :: Any\n\nThe value of the GET/query variable key, as in ?key=value. If key is not defined, default is returned.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.request","page":"Requests","title":"Genie.Requests.request","text":"request() :: HTTP.Request\n\nReturns the raw HTTP.Request object associated with the request. If no request is available (not within a request/response cycle) returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.payload","page":"Requests","title":"Genie.Requests.payload","text":"payload() :: Any\n\nUtility function for accessing the params collection, which holds the request variables.\n\n\n\n\n\npayload(key::Symbol) :: Any\n\nUtility function for accessing the key value within the params collection of request variables.\n\n\n\n\n\npayload(key::Symbol, default_value::T) :: Any\n\nUtility function for accessing the key value within the params collection of request variables. If key is not defined, default_value is returned.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.matchedroute","page":"Requests","title":"Genie.Requests.matchedroute","text":"matchedroute() :: Route\n\nReturns the Route object which was matched for the current request or noting if no route is available.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.matchedchannel","page":"Requests","title":"Genie.Requests.matchedchannel","text":"matchedchannel() :: Channel\n\nReturns the Channel object which was matched for the current request or nothing if no channel is available.\n\n\n\n\n\n","category":"function"},{"location":"API/requests.html#Genie.Requests.wsclient","page":"Requests","title":"Genie.Requests.wsclient","text":"wsclient() :: HTTP.WebSockets.WebSocket\n\nThe web sockets client for the current request or nothing if not available.\n\n\n\n\n\n","category":"function"},{"location":"api/server.html","page":"-","title":"-","text":"CurrentModule = Server","category":"page"},{"location":"api/server.html","page":"-","title":"-","text":"SERVERS\nServersCollection\ndown\ndown!\nhandle_request\nhandle_ws_request\nisrunning\nopenbrowser\nprint_server_status\nserve\nserver_status\nsetup_http_listener\nsetup_http_streamer\nsetup_ws_handler\nup\nupdate_config","category":"page"},{"location":"API/watch.html","page":"Watch","title":"Watch","text":"CurrentModule = Watch","category":"page"},{"location":"API/watch.html","page":"Watch","title":"Watch","text":"WATCHED_FOLDERS\nWATCHING\ncollect_watched_files\nhandlers\nunwatch\nwatch\nwatchpath","category":"page"},{"location":"tutorials/5--Handling_Query_Params.html#Handling-query-params-(GET-variables)","page":"Handling URI/query params","title":"Handling query params (GET variables)","text":"","category":"section"},{"location":"tutorials/5--Handling_Query_Params.html","page":"Handling URI/query params","title":"Handling URI/query params","text":"Genie makes it easy to access query params, which are values sent as part of the URL over GET requests (ex: mywebsite.com/index?foo=1&bar=2 foo and bar are query params corresponding to the variables foo = 1 and bar = 2). All these values are automatically collected by Genie and exposed in the params() collection (which is part of the Router module).","category":"page"},{"location":"tutorials/5--Handling_Query_Params.html#Example","page":"Handling URI/query params","title":"Example","text":"","category":"section"},{"location":"tutorials/5--Handling_Query_Params.html","page":"Handling URI/query params","title":"Handling URI/query params","text":"using Genie\n\nroute(\"/hi\") do\n  name = params(:name, \"Anon\")\n\n  \"Hello $name\"\nend","category":"page"},{"location":"tutorials/5--Handling_Query_Params.html","page":"Handling URI/query params","title":"Handling URI/query params","text":"If you access http://127.0.0.1:8000/hi the app will respond with \"Hello Anon\" since we're not passing any query params.","category":"page"},{"location":"tutorials/5--Handling_Query_Params.html","page":"Handling URI/query params","title":"Handling URI/query params","text":"However, requesting http://127.0.0.1:8000/hi?name=Adrian will in turn display \"Hello Adrian\" as we're passing the name query variable with the value Adrian. This variable is exposed by Genie as params(:name).","category":"page"},{"location":"tutorials/5--Handling_Query_Params.html","page":"Handling URI/query params","title":"Handling URI/query params","text":"Genie however provides utility methods for accessing these values in the Requests module.","category":"page"},{"location":"tutorials/5--Handling_Query_Params.html#The-Requests-module","page":"Handling URI/query params","title":"The Requests module","text":"","category":"section"},{"location":"tutorials/5--Handling_Query_Params.html","page":"Handling URI/query params","title":"Handling URI/query params","text":"Genie provides a set of utilities for working with requests data within the Requests module. You can use the getpayload method to retrieve the query params as a Dict{Symbol,Any}. We can rewrite the previous route to take advantage of the Requests utilities.","category":"page"},{"location":"tutorials/5--Handling_Query_Params.html#Example-2","page":"Handling URI/query params","title":"Example","text":"","category":"section"},{"location":"tutorials/5--Handling_Query_Params.html","page":"Handling URI/query params","title":"Handling URI/query params","text":"using Genie, Genie.Requests\n\nroute(\"/hi\") do\n  \"Hello $(getpayload(:name, \"Anon\"))\"\nend","category":"page"},{"location":"tutorials/5--Handling_Query_Params.html","page":"Handling URI/query params","title":"Handling URI/query params","text":"The getpayload function has a few specializations, and one of them accepts the key and a default value. The default value is returned if the key variable is not defined. You can see the various implementations for getpayload using the API docs or Julia's help> mode.","category":"page"},{"location":"API/responses.html","page":"Responses","title":"Responses","text":"CurrentModule = Responses","category":"page"},{"location":"API/responses.html","page":"Responses","title":"Responses","text":"getresponse\ngetheaders\nsetheaders!\nsetheaders\ngetstatus\nsetstatus!\nsetstatus\ngetbody\nsetbody!\nsetbody","category":"page"},{"location":"tutorials/7--Using_JSON_Payloads.html#Using-JSON-payloads","page":"Using JSON payloads","title":"Using JSON payloads","text":"","category":"section"},{"location":"tutorials/7--Using_JSON_Payloads.html","page":"Using JSON payloads","title":"Using JSON payloads","text":"A very common design pattern, especially when developing REST APIs, is to accept JSON payloads sent as application/json data over POST requests. Genie efficiently handles this use case through the utility function Requests.jsonpayload. Under the cover, Genie will process the POST request and will attempt to parse the JSON text payload. If this fails, we can still access the raw data (the text payload not converted to JSON) by using the Requests.rawpayload method.","category":"page"},{"location":"tutorials/7--Using_JSON_Payloads.html#Example","page":"Using JSON payloads","title":"Example","text":"","category":"section"},{"location":"tutorials/7--Using_JSON_Payloads.html","page":"Using JSON payloads","title":"Using JSON payloads","text":"using Genie, Genie.Requests, Genie.Renderer.Json\n\nroute(\"/jsonpayload\", method = POST) do\n  @show jsonpayload()\n  @show rawpayload()\n\n  json(\"Hello $(jsonpayload()[\"name\"])\")\nend\n\nup()","category":"page"},{"location":"tutorials/7--Using_JSON_Payloads.html","page":"Using JSON payloads","title":"Using JSON payloads","text":"Next we make a POST request using the HTTP package:","category":"page"},{"location":"tutorials/7--Using_JSON_Payloads.html","page":"Using JSON payloads","title":"Using JSON payloads","text":"using HTTP\n\nHTTP.request(\"POST\", \"http://localhost:8000/jsonpayload\", [(\"Content-Type\", \"application/json\")], \"\"\"{\"name\":\"Adrian\"}\"\"\")","category":"page"},{"location":"tutorials/7--Using_JSON_Payloads.html","page":"Using JSON payloads","title":"Using JSON payloads","text":"We will get the following output:","category":"page"},{"location":"tutorials/7--Using_JSON_Payloads.html","page":"Using JSON payloads","title":"Using JSON payloads","text":"jsonpayload() = Dict{String,Any}(\"name\"=>\"Adrian\")\nrawpayload() = \"{\\\"name\\\":\\\"Adrian\\\"}\"\n\nINFO:Main: /jsonpayload 200\n\nHTTP.Messages.Response:\n\"\"\"\nHTTP/1.1 200 OK\nContent-Type: application/json\nTransfer-Encoding: chunked\n\n\"Hello Adrian\"\"\"\"","category":"page"},{"location":"tutorials/7--Using_JSON_Payloads.html","page":"Using JSON payloads","title":"Using JSON payloads","text":"First, for the two @show calls, notice how jsonpayload had successfully converted the POST data to a Dict. While the rawpayload returns the POST data as a String, exactly as received. Finally, our route handler returns a JSON response, greeting the user by extracting the name from within the jsonpayload Dict.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Deploying-Genie-apps-with-Heroku-Buildpacks","page":"Deploying to Heroku with Buildpacks","title":"Deploying Genie apps with Heroku Buildpacks","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"This tutorial shows how to host a Julia/Genie app using a Heroku Buildpack.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Prerequisites","page":"Deploying to Heroku with Buildpacks","title":"Prerequisites","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"This guide assumes you have a Heroku account and are signed into the Heroku CLI. Information on how to setup the Heroku CLI is available here.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#The-application","page":"Deploying to Heroku with Buildpacks","title":"The application","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"In order to try the deployment, you will need a sample application. Either pick one of yours or clone this sample one, as indicated next.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#All-Steps-(in-easy-copy-paste-format):","page":"Deploying to Heroku with Buildpacks","title":"All Steps (in easy copy-paste format):","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Customize your HEROKU_APP_NAME to something unique:","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"HEROKU_APP_NAME=my-app-name","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Clone a sample app if needed:","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"git clone https://github.com/milesfrain/GenieOnHeroku.git","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Go into the app's folder:","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"cd GenieOnHeroku","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"And create a Heroku app:","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"heroku create $HEROKU_APP_NAME --buildpack https://github.com/Optomatica/heroku-buildpack-julia.git","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Push the newly created app to Heroku:","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"git push heroku master","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Now you can open the app in the browser:","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"heroku open -a $HEROKU_APP_NAME","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"If you need to check the logs:","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"heroku logs -tail -a $HEROKU_APP_NAME","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Steps-with-more-detailed-descriptions","page":"Deploying to Heroku with Buildpacks","title":"Steps with more detailed descriptions","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Select-an-app-name","page":"Deploying to Heroku with Buildpacks","title":"Select an app name","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"HEROKU_APP_NAME=my-app-name","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"This must be unique among all Heroku projects, and is part of the url where your project is hosted (e.g. https://my-app-name.herokuapp.com/).","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"If the name is not unique, you will see this error at the heroku create step.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Creating ⬢ my-app-name... !\n ▸    Name my-app-name is already taken","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Clone-an-example-project","page":"Deploying to Heroku with Buildpacks","title":"Clone an example project","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"git clone https://github.com/milesfrain/GenieOnHeroku.git\ncd GenieOnHeroku","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"You may also point to your own project, but it must be a git repo.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"A Procfile in the root contains the launch command to load your app. The contents of the Procfile for this project is this single line:","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"web: julia --project src/app.jl $PORT","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"You may edit the Procfile to point to your own project's launch script. (for example src/my_app_launch_file.jl instead of src/app.jl), but be sure to take into account the dynamically changing $PORT environment variable which is set by Heroku.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"If you're deploying a standard Genie application built with Genie.newapp, the launch script will be bin/server. Genie will automatically pick the $PORT number from the environment.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Create-a-Heroku-project","page":"Deploying to Heroku with Buildpacks","title":"Create a Heroku project","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"heroku create $HEROKU_APP_NAME --buildpack https://github.com/Optomatica/heroku-buildpack-julia.git","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"This creates a project on the Heroku platform, which includes a separate git repository.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"This heroku repository is added to the list of tracked repositories and can be observed with git remote -v.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"heroku  https://git.heroku.com/my-app-name.git (fetch)\nheroku  https://git.heroku.com/my-app-name.git (push)\norigin  https://github.com/milesfrain/GenieOnHeroku.git (fetch)\norigin  https://github.com/milesfrain/GenieOnHeroku.git (push)","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"We are using a buildpack for Julia. This runs many of the common deployment operations required for Julia projects. It relies on the directory layout found in the example project, with Project.toml, Manifest.toml in the root, and all Julia code in the src directory.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Deploy-your-app","page":"Deploying to Heroku with Buildpacks","title":"Deploy your app","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"git push heroku master","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"This pushes your current branch of your local repo to the heroku remote repo's master branch.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Heroku will automatically execute the commands described in the Julia buildpack and Procfile of this latest push.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"You must push to the heroku master branch to trigger an automated deploy.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Open-your-app's-webpage","page":"Deploying to Heroku with Buildpacks","title":"Open your app's webpage","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"heroku open -a $HEROKU_APP_NAME","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"This is a convenience command to open your app's webpage in your browser.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"The webpage is: https://$HEROKU_APP_NAME.herokuapp.com/","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"For example: https://my-app-name.herokuapp.com/","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#View-app-logs","page":"Deploying to Heroku with Buildpacks","title":"View app logs","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"heroku logs -tail -a $HEROKU_APP_NAME","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"This is another convenience command to launch a log viewer that remains open to show the latest status of your app.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"The println statements from Julia will also appear here.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Exit this viewer with Ctrl-C.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"Logs can also be viewed from the Heroku web dashboard. For example: https://dashboard.heroku.com/apps/my-app-name/logs","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html#Deploy-app-updates-changes","page":"Deploying to Heroku with Buildpacks","title":"Deploy app updates changes","text":"","category":"section"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"To deploy any changes made to your app, simply commit those changes locally, and re-push to heroku.","category":"page"},{"location":"tutorials/90--Deploying_With_Heroku_Buildpacks.html","page":"Deploying to Heroku with Buildpacks","title":"Deploying to Heroku with Buildpacks","text":"<make changes>\ngit commit -am \"my commit message\"\ngit push heroku master","category":"page"},{"location":"API/cookies.html","page":"Cookies","title":"Cookies","text":"CurrentModule = Cookies","category":"page"},{"location":"API/cookies.html","page":"Cookies","title":"Cookies","text":"Cookies.Dict\nget\ngetcookies\nset!\nnullablevalue","category":"page"},{"location":"API/cookies.html#Base.Dict","page":"Cookies","title":"Base.Dict","text":"Dict([itr])\n\nDict{K,V}() constructs a hash table with keys of type K and values of type V. Keys are compared with isequal and hashed with hash.\n\nGiven a single iterable argument, constructs a Dict whose key-value pairs are taken from 2-tuples (key,value) generated by the argument.\n\nExamples\n\njulia> Dict([(\"A\", 1), (\"B\", 2)])\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\nAlternatively, a sequence of pair arguments may be passed.\n\njulia> Dict(\"A\"=>1, \"B\"=>2)\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\n\n\n\n\n","category":"type"},{"location":"API/cookies.html#Genie.Cookies.get","page":"Cookies","title":"Genie.Cookies.get","text":"get(payload::Union{HTTP.Response,HTTP.Request}, key::Union{String,Symbol}, default::T; encrypted::Bool = true)::T where T\n\nAttempts to get the Cookie value stored at key within payload. If the key is not set, the default value is returned.\n\nArguments\n\npayload::Union{HTTP.Response,HTTP.Request}: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\ndefault::T: default value to be returned if no cookie value is set at key\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\nget(res::HTTP.Response, key::Union{String,Symbol}) :: Union{Nothing,String}\n\nRetrieves a value stored on the cookie as key from the Respose object.\n\nArguments\n\npayload::Union{HTTP.Response,HTTP.Request}: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\nget(req::Request, key::Union{String,Symbol}) :: Union{Nothing,String}\n\nRetrieves a value stored on the cookie as key from the Request object.\n\nArguments\n\nreq::HTTP.Request: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\n","category":"function"},{"location":"API/cookies.html#Genie.Cookies.getcookies","page":"Cookies","title":"Genie.Cookies.getcookies","text":"getcookies(req::HTTP.Request) :: Vector{HTTP.Cookies.Cookie}\n\nExtracts cookies from within req\n\n\n\n\n\ngetcookies(req::HTTP.Request) :: Vector{HTTP.Cookies.Cookie}\n\nExtracts cookies from within req, filtering them by matching name.\n\n\n\n\n\n","category":"function"},{"location":"API/cookies.html#Genie.Cookies.set!","page":"Cookies","title":"Genie.Cookies.set!","text":"set!(res::HTTP.Response, key::Union{String,Symbol}, value::Any, attributes::Dict; encrypted::Bool = true) :: HTTP.Response\n\nSets value under the key label on the Cookie.\n\nArguments\n\nres::HTTP.Response: the HTTP.Response object\nkey::Union{String,Symbol}: the key for storing the cookie value\nvalue::Any: the cookie value\nattributes::Dict: additional cookie attributes, such as Path or HttpOnly\nencrypted::Bool: if true the value is stored encoded\n\n\n\n\n\n","category":"function"},{"location":"API/cookies.html#Genie.Cookies.nullablevalue","page":"Cookies","title":"Genie.Cookies.nullablevalue","text":"nullablevalue(payload::Union{HTTP.Response,HTTP.Request}, key::Union{String,Symbol}; encrypted::Bool = true)\n\nAttempts to retrieve a cookie value stored at key in the payload object and returns a Union{Nothing,String}\n\nArguments\n\npayload::Union{HTTP.Response,HTTP.Request}: the request or response object containing the Cookie headers\nkey::Union{String,Symbol}: the name of the cookie value\nencrypted::Bool: if true the value stored on the cookie is automatically decrypted\n\n\n\n\n\n","category":"function"},{"location":"API/genie.html","page":"Genie","title":"Genie","text":"CurrentModule = Genie","category":"page"},{"location":"API/genie.html","page":"Genie","title":"Genie","text":"bootstrap\ndown\ndown!\ngenie\ngo\nisrunning\nloadapp\nrun\nup","category":"page"},{"location":"API/genie.html#Genie.bootstrap","page":"Genie","title":"Genie.bootstrap","text":"genie() :: Union{Nothing,Sockets.TCPServer}\n\n\n\n\n\n","category":"function"},{"location":"API/genie.html#Genie.down","page":"Genie","title":"Genie.down","text":"down(; webserver::Bool = true, websockets::Bool = true) :: ServersCollection\n\nShuts down the servers optionally indicating which of the webserver and websockets servers to be stopped. It does not remove the servers from the SERVERS collection. Returns the collection.\n\n\n\n\n\n","category":"function"},{"location":"API/genie.html#Genie.down!","page":"Genie","title":"Genie.down!","text":"function down!(; webserver::Bool = true, websockets::Bool = true) :: Vector{ServersCollection}\n\nShuts down all the servers and empties the SERVERS collection. Returns the empty collection.\n\n\n\n\n\n","category":"function"},{"location":"API/genie.html#Genie.genie","page":"Genie","title":"Genie.genie","text":"genie() :: Union{Nothing,Sockets.TCPServer}\n\n\n\n\n\n","category":"function"},{"location":"API/genie.html#Genie.go","page":"Genie","title":"Genie.go","text":"loadapp(path::String = \".\"; autostart::Bool = false) :: Nothing\n\nLoads an existing Genie app from the file system, within the current Julia REPL session.\n\nArguments\n\npath::String: the path to the Genie app on the file system.\nautostart::Bool: automatically start the app upon loading it.\n\nExamples\n\nshell> tree -L 1\n.\n├── Manifest.toml\n├── Project.toml\n├── bin\n├── bootstrap.jl\n├── config\n├── env.jl\n├── genie.jl\n├── log\n├── public\n├── routes.jl\n└── src\n\n5 directories, 6 files\n\njulia> using Genie\n\njulia> Genie.loadapp(\".\")\n _____         _\n|   __|___ ___|_|___\n|  |  | -_|   | | -_|\n|_____|___|_|_|_|___|\n\n┌ Info:\n│ Starting Genie in >> DEV << mode\n└\n[ Info: Logging to file at MyGenieApp/log/dev.log\n\n\n\n\n\n","category":"function"},{"location":"API/genie.html#Genie.loadapp","page":"Genie","title":"Genie.loadapp","text":"loadapp(path::String = \".\"; autostart::Bool = false) :: Nothing\n\nLoads an existing Genie app from the file system, within the current Julia REPL session.\n\nArguments\n\npath::String: the path to the Genie app on the file system.\nautostart::Bool: automatically start the app upon loading it.\n\nExamples\n\nshell> tree -L 1\n.\n├── Manifest.toml\n├── Project.toml\n├── bin\n├── bootstrap.jl\n├── config\n├── env.jl\n├── genie.jl\n├── log\n├── public\n├── routes.jl\n└── src\n\n5 directories, 6 files\n\njulia> using Genie\n\njulia> Genie.loadapp(\".\")\n _____         _\n|   __|___ ___|_|___\n|  |  | -_|   | | -_|\n|_____|___|_|_|_|___|\n\n┌ Info:\n│ Starting Genie in >> DEV << mode\n└\n[ Info: Logging to file at MyGenieApp/log/dev.log\n\n\n\n\n\n","category":"function"},{"location":"API/genie.html#Genie.run","page":"Genie","title":"Genie.run","text":"run() :: Nothing\n\nRuns the Genie app by parsing the command line args and invoking the corresponding actions. Used internally to parse command line arguments.\n\n\n\n\n\n","category":"function"},{"location":"API/genie.html#Genie.up","page":"Genie","title":"Genie.up","text":"up(port::Int = Genie.config.server_port, host::String = Genie.config.server_host;\n    ws_port::Int = Genie.config.websockets_port, async::Bool = ! Genie.config.run_as_server) :: Nothing\n\nStarts the web server. Alias for Server.up\n\nArguments\n\nport::Int: the port used by the web server\nhost::String: the host used by the web server\nws_port::Int: the port used by the Web Sockets server\nasync::Bool: run the web server task asynchronously\n\nExamples\n\njulia> up(8000, \"127.0.0.1\", async = false)\n[ Info: Ready!\nWeb Server starting at http://127.0.0.1:8000\n\n\n\n\n\n","category":"function"},{"location":"index.html#Genie","page":"Home","title":"Genie","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Genie Logo)","category":"page"},{"location":"index.html#Genie-2","page":"Home","title":"Genie","text":"","category":"section"},{"location":"index.html#The-highly-productive-Julia-web-framework","page":"Home","title":"The highly productive Julia web framework","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Genie is a full-stack MVC web framework that provides a streamlined and efficient workflow for developing modern web applications. It builds on Julia's strengths (high-level, high-performance, dynamic, JIT compiled), exposing a rich API and a powerful toolset for productive web development.","category":"page"},{"location":"index.html#Current-status","page":"Home","title":"Current status","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Genie is compatible with Julia v1.6 and up.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"https://genieframework.github.io/Genie.jl/dev/","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Genie uses a multitude of packages that have been kindly contributed by the Julia community.\nThe awesome Genie logo was designed by Alvaro Casanova.","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html#Adding-your-existing-Julia-code-into-Genie-apps","page":"Adding your libraries into Genie","title":"Adding your existing Julia code into Genie apps","text":"","category":"section"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"If you have existing Julia code (modules and files) which you'd like to quickly integrate into a web app, Genie provides an easy way to add and load your code.","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html#Adding-your-Julia-code-to-the-lib/-folder","page":"Adding your libraries into Genie","title":"Adding your Julia code to the lib/ folder","text":"","category":"section"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"If you have some Julia code which you'd like to integrate in a Genie app, the simplest thing is to add the files to the lib/ folder. The files (and folders) in the lib/ folder are automatically loaded by Genie recursively. This means that you can also add folders under lib/, and they will be recursively loaded (included) into the app. Beware though that this only happens when the Genie app is initially loaded. Hence, an app restart will be required if you add files and folders after the app is started.","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"HEADS UP","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"Genie won't create the lib/ folder by default. If the lib/ folder is not present in the root of the app, just create it yourself:","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"julia> mkdir(\"lib\")","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"Once your code is added to the lib/ folder, it will become available in your app's environment. For example, say we have a file called lib/MyLib.jl:","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"# lib/MyLib.jl\nmodule MyLib\n\nusing Dates\n\nfunction isitfriday()\n  Dates.dayofweek(Dates.now()) == Dates.Friday\nend\n\nend","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"Assuming that the name of your Genie app (which is also the name of your main module in src/) is MyGenieApp, the modules loaded from lib/ will be available under the MyGenieApp namespace as MyGenieApp.MyLib.","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"HEADS UP","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"Instead of using the actual Genie app (main module) name, we can also use the alias ..Main.UserApp.","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"So we can reference and use our modules in lib/ in routes.jl as follows:","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"# routes.jl\nusing Genie\nusing MyGenieApp.MyLib # or using ..Main.UserApp.MyLib\n\nroute(\"/friday\") do\n  MyLib.isitfriday() ? \"Yes, it's Friday!\" : \"No, not yet :(\"\nend","category":"page"},{"location":"tutorials/9--Publishing_Your_Julia_Code_Online_With_Genie_Apps.html","page":"Adding your libraries into Genie","title":"Adding your libraries into Genie","text":"Use the lib/ folder to host your Julia code so that Genie knows where to look in order to load it and make it available throughout the application.","category":"page"},{"location":"tutorials/8--Handling_File_Uploads.html#Handling-file-uploads","page":"Uploading files","title":"Handling file uploads","text":"","category":"section"},{"location":"tutorials/8--Handling_File_Uploads.html","page":"Uploading files","title":"Uploading files","text":"Genie has built-in support for working with file uploads. The collection of uploaded files (as POST variables) can be accessed through the Requests.filespayload method. Or, we can retrieve the data corresponding to a given file form input by using Requests.filespayload(key) – where key is the name of the file input in the form.","category":"page"},{"location":"tutorials/8--Handling_File_Uploads.html","page":"Uploading files","title":"Uploading files","text":"In the following snippet we configure two routes in the root of the app (/): the first route, handling GET requests, displays an upload form. The second route, handling POST requests, processes the uploads, generating a file from the uploaded data, saving it, and displaying the file stats.","category":"page"},{"location":"tutorials/8--Handling_File_Uploads.html","page":"Uploading files","title":"Uploading files","text":"","category":"page"},{"location":"tutorials/8--Handling_File_Uploads.html","page":"Uploading files","title":"Uploading files","text":"HEADS UP","category":"page"},{"location":"tutorials/8--Handling_File_Uploads.html","page":"Uploading files","title":"Uploading files","text":"Notice that we can define multiple routes at the same URL if they have different methods, in our case GET and POST.","category":"page"},{"location":"tutorials/8--Handling_File_Uploads.html","page":"Uploading files","title":"Uploading files","text":"","category":"page"},{"location":"tutorials/8--Handling_File_Uploads.html#Example","page":"Uploading files","title":"Example","text":"","category":"section"},{"location":"tutorials/8--Handling_File_Uploads.html","page":"Uploading files","title":"Uploading files","text":"using Genie, Genie.Router, Genie.Renderer.Html, Genie.Requests\n\nform = \"\"\"\n<form action=\"/\" method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"yourfile\" /><br/>\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n\"\"\"\n\nroute(\"/\") do\n  html(form)\nend\n\nroute(\"/\", method = POST) do\n  if infilespayload(:yourfile)\n    write(filespayload(:yourfile))\n\n    stat(filename(filespayload(:yourfile)))\n  else\n    \"No file uploaded\"\n  end\nend\n\nup()","category":"page"},{"location":"tutorials/8--Handling_File_Uploads.html","page":"Uploading files","title":"Uploading files","text":"Upon uploading a file and submitting the form, our app will display the file's stats.","category":"page"},{"location":"API/util.html","page":"Util","title":"Util","text":"CurrentModule = Util","category":"page"},{"location":"API/util.html","page":"Util","title":"Util","text":"expand_nullable\nfile_name_without_extension\nwalk_dir\ntime_to_unixtimestamp","category":"page"},{"location":"API/util.html#Genie.Util.file_name_without_extension","page":"Util","title":"Genie.Util.file_name_without_extension","text":"file_name_without_extension(file_name, extension = \".jl\") :: String\n\nRemoves the file extension extension from file_name.\n\n\n\n\n\n","category":"function"},{"location":"API/util.html#Genie.Util.walk_dir","page":"Util","title":"Genie.Util.walk_dir","text":"function walk_dir(dir, paths = String[]; only_extensions = [\"jl\"], only_files = true, only_dirs = false) :: Vector{String}\n\nRecursively walks dir and produces non directories. If only_files, directories will be skipped. If only_dirs, files will be skipped.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-js.html","page":"JS Renderer","title":"JS Renderer","text":"CurrentModule = Renderer.Js","category":"page"},{"location":"API/renderer-js.html","page":"JS Renderer","title":"JS Renderer","text":"get_template\nto_js\nrender\njs\nGenie.Router.error","category":"page"},{"location":"api/renderer-html.html","page":"-","title":"-","text":"CurrentModule = Renderer.Html","category":"page"},{"location":"api/renderer-html.html","page":"-","title":"-","text":"normal_element\nprepare_template\nattributes\nparseattr\nnormalize_element\ndenormalize_element\nvoid_element\nskip_element\ninclude_markdown\nget_template\ndoctype\ndoc\nparseview\nrender\nparsehtml\nGenie.Renderer.render\nhtml\nsafe_attr\nparsehtml\nhtml_to_julia\nstring_to_julia\nto_julia\npartial\ntemplate\nread_template_file\nparse_template\nparse_string\nparse\nparsetags\nregister_elements\nregister_element\nregister_normal_element\nregister_void_element\nattr\nfor_each\ncollection\nGenie.Router.error\nserve_error_file\n@yield\nel","category":"page"},{"location":"API/filetemplates.html","page":"FileTemplates","title":"FileTemplates","text":"CurrentModule = FileTemplates","category":"page"},{"location":"API/filetemplates.html","page":"FileTemplates","title":"FileTemplates","text":"appmodule\nnewcontroller\nnewtask\nnewtest","category":"page"},{"location":"API/filetemplates.html#Genie.FileTemplates.appmodule","page":"FileTemplates","title":"Genie.FileTemplates.appmodule","text":"appmodule(path::String)\n\nGenerates a custom app module when a new app is bootstrapped.\n\n\n\n\n\n","category":"function"},{"location":"API/filetemplates.html#Genie.FileTemplates.newcontroller","page":"FileTemplates","title":"Genie.FileTemplates.newcontroller","text":"newcontroller(controller_name::String) :: String\n\nDefault content for a new Genie controller.\n\n\n\n\n\n","category":"function"},{"location":"API/filetemplates.html#Genie.FileTemplates.newtask","page":"FileTemplates","title":"Genie.FileTemplates.newtask","text":"newtask(module_name::String) :: String\n\nDefault content for a new Genie Toolbox task.\n\n\n\n\n\n","category":"function"},{"location":"API/filetemplates.html#Genie.FileTemplates.newtest","page":"FileTemplates","title":"Genie.FileTemplates.newtest","text":"newtest(plural_name::String, singular_name::String) :: String\n\nDefault content for a new test file.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/3--Getting_Started.html#Hello-world-with-Genie","page":"Getting started","title":"Hello world with Genie","text":"","category":"section"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"Here are a few examples to quickly get you started with building Genie web apps.","category":"page"},{"location":"tutorials/3--Getting_Started.html#Running-Genie-interactively-at-the-REPL-or-in-notebooks","page":"Getting started","title":"Running Genie interactively at the REPL or in notebooks","text":"","category":"section"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"The simplest use case is to configure a routing function at the REPL and start the web server. That's all that's needed to run your code on the web page:","category":"page"},{"location":"tutorials/3--Getting_Started.html#Example","page":"Getting started","title":"Example","text":"","category":"section"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"julia> using Genie\n\njulia> route(\"/hello\") do\n          \"Hello World\"\n       end\n\njulia> up()","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"The route function defines a mapping between a URL (\"/hello\") and a Julia function (a handler) which will be automatically invoked to send the response back to the client. In this case we're sending back the string \"Hello World\".","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"That's all! We have set up an app, a route, and started the web server. Open your favorite web browser and go to http://127.0.0.1:8000/hello to see the result.","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"HEADS UP","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"Keep in mind that Julia JIT-compiles. A function is automatically compiled the first time it is invoked. The function, in this case, is our route handler that is responding to the request. This will make the first response slower as it also includes compilation time. But once the function is compiled, for all the subsequent requests, it will be super fast!","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"","category":"page"},{"location":"tutorials/3--Getting_Started.html#Developing-a-simple-Genie-script","page":"Getting started","title":"Developing a simple Genie script","text":"","category":"section"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"Genie can also be used in custom scripts, for example when building micro-services with Julia. Let's create a simple \"Hello World\" micro-service.","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"Start by creating a new file to host our code – let's call it geniews.jl","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"julia> touch(\"geniews.jl\")","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"Now, open it in the editor:","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"julia> edit(\"geniews.jl\")","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"Add the following code:","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"using Genie, Genie.Renderer, Genie.Renderer.Html, Genie.Renderer.Json\n\nroute(\"/hello.html\") do\n  html(\"Hello World\")\nend\n\nroute(\"/hello.json\") do\n  json(\"Hello World\")\nend\n\nroute(\"/hello.txt\") do\n   respond(\"Hello World\", :text)\nend\n\nup(8001, async = false)","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"We begun by defining 2 routes and we used the html and json rendering functions (available in the Renderer.Html and the Renderer.Json modules). These functions are responsible for outputting the data using the correct format and document type (with the correct MIME), in our case HTML data for hello.html, and JSON data for hello.json.","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"The third route serves text responses. As Genie does not provide a specialized text() method for sending text/plain responses, we use the generic respond function, indicating the desired MIME type. In our case :text, corresponding to text/plain. Other available MIME types shortcuts are :xml, :markdown, :javascript and a few others others – and users can register their own mime types and response types as needed or can pass the full mime type as a string, ie \"text/csv\".","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"The up function will launch the web server on port 8001. This time, very important, we instructed it to start the server synchronously (that is, blocking the execution of the script), by passing the async = false argument. This way we make sure that our script stays running. Otherwise, at the end of the script, the Julia process would normally exit, killing our server.","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"In order to launch the script, run $ julia geniews.jl.","category":"page"},{"location":"tutorials/3--Getting_Started.html#Batteries-included","page":"Getting started","title":"Batteries included","text":"","category":"section"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"Genie readily makes available a rich set of features - you have already seen the rendering and the routing modules in action. But for instance, logging (to file and console) can also be easily triggered with one line of code, powerful caching can be enabled with a couple more lines, and so on.","category":"page"},{"location":"tutorials/3--Getting_Started.html","page":"Getting started","title":"Getting started","text":"The app already handles \"404 Page Not Found\" and \"500 Internal Error\" responses. If you try to access a URL which is not handled by the app, like say http://127.0.0.1:8001/not_here, you'll see Genie's default 404 page. The default error pages can be overwritten with custom ones.","category":"page"},{"location":"API/renderer-html.html","page":"HTML Renderer","title":"HTML Renderer","text":"CurrentModule = Renderer.Html","category":"page"},{"location":"API/renderer-html.html","page":"HTML Renderer","title":"HTML Renderer","text":"normal_element\nprepare_template\nattributes\nparseattr\nnormalize_element\ndenormalize_element\nvoid_element\nskip_element\ninclude_markdown\nget_template\ndoctype\ndoc\nparseview\nrender\nparsehtml\nGenie.Renderer.render\nhtml\nsafe_attr\nparsehtml\nhtml_to_julia\nstring_to_julia\nto_julia\npartial\ntemplate\nread_template_file\nparse_template\nparse_string\nparse\nparsetags\nregister_elements\nregister_element\nregister_normal_element\nregister_void_element\nattr\nfor_each\ncollection\nGenie.Router.error\nserve_error_file\n@yield\nel","category":"page"},{"location":"API/renderer-html.html#Genie.Renderer.Html.normal_element","page":"HTML Renderer","title":"Genie.Renderer.Html.normal_element","text":"normal_element(f::Function, elem::String, attrs::Vector{Pair{Symbol,Any}} = Pair{Symbol,Any}[]) :: HTMLString\n\nGenerates a HTML element in the form <...></...>\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.prepare_template","page":"HTML Renderer","title":"Genie.Renderer.Html.prepare_template","text":"prepare_template(s::String)\nprepare_template{T}(v::Vector{T})\n\nCleans up the template before rendering (ex by removing empty nodes).\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.attributes","page":"HTML Renderer","title":"Genie.Renderer.Html.attributes","text":"attributes(attrs::Vector{Pair{Symbol,String}} = Vector{Pair{Symbol,String}}()) :: Vector{String}\n\nParses HTML attributes.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.parseattr","page":"HTML Renderer","title":"Genie.Renderer.Html.parseattr","text":"parseattr(attr) :: String\n\nConverts Julia keyword arguments to HTML attributes with illegal Julia chars.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.normalize_element","page":"HTML Renderer","title":"Genie.Renderer.Html.normalize_element","text":"normalize_element(elem::String)\n\nCleans up problematic characters or DOM elements.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.denormalize_element","page":"HTML Renderer","title":"Genie.Renderer.Html.denormalize_element","text":"denormalize_element(elem::String)\n\nReplaces - with the char defined to replace dashes, as Julia does not support them in names.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.void_element","page":"HTML Renderer","title":"Genie.Renderer.Html.void_element","text":"void_element(elem::String, attrs::Vector{Pair{Symbol,String}} = Vector{Pair{Symbol,String}}()) :: HTMLString\n\nGenerates a void HTML element in the form <...>\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.get_template","page":"HTML Renderer","title":"Genie.Renderer.Html.get_template","text":"get_template(path::String; partial::Bool = true, context::Module = @__MODULE__, vars...) :: Function\n\nResolves the inclusion and rendering of a template file\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.doctype","page":"HTML Renderer","title":"Genie.Renderer.Html.doctype","text":"Outputs document's doctype.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.doc","page":"HTML Renderer","title":"Genie.Renderer.Html.doc","text":"Outputs document's doctype.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.parseview","page":"HTML Renderer","title":"Genie.Renderer.Html.parseview","text":"parseview(data::String; partial = false, context::Module = @__MODULE__) :: Function\n\nParses a view file, returning a rendering function. If necessary, the function is JIT-compiled, persisted and loaded into memory.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.render","page":"HTML Renderer","title":"Genie.Renderer.Html.render","text":"render(data::String; context::Module = @__MODULE__, layout::Union{String,Nothing} = nothing, vars...) :: Function\n\nRenders the string as an HTML view.\n\n\n\n\n\nrender(viewfile::Genie.Renderer.FilePath; layout::Union{Nothing,Genie.Renderer.FilePath} = nothing, context::Module = @__MODULE__, vars...) :: Function\n\nRenders the template file as an HTML view.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.parsehtml","page":"HTML Renderer","title":"Genie.Renderer.Html.parsehtml","text":"parsehtml(input::String; partial::Bool = true) :: String\n\n\n\n\n\nparsehtml(elem, output; partial = true) :: String\n\nParses a HTML tree structure into a string of Julia code.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.render","page":"HTML Renderer","title":"Genie.Renderer.render","text":"render\n\nAbstract function that needs to be specialized by individual renderers.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.html","page":"HTML Renderer","title":"Genie.Renderer.Html.html","text":"html(data::String; context::Module = @__MODULE__, status::Int = 200, headers::HTTPHeaders = HTTPHeaders(), layout::Union{String,Nothing} = nothing, vars...) :: HTTP.Response\n\nParses the data input as HTML, returning a HTML HTTP Response.\n\nArguments\n\ndata::String: the HTML string to be rendered\ncontext::Module: the module in which the variables are evaluated (in order to provide the scope for vars). Usually the controller.\nstatus::Int: status code of the response\nheaders::HTTPHeaders: HTTP response headers\nlayout::Union{String,Nothing}: layout file for rendering data\n\nExample\n\njulia> html(\"<h1>Welcome $(vars(:name))</h1>\", layout = \"<div><% @yield %></div>\", name = \"Adrian\")\nHTTP.Messages.Response:\n\"\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\n\n<html><head></head><body><div><h1>Welcome Adrian</h1>\n</div></body></html>\"\n\n\n\n\n\nhtml(md::Markdown.MD; context::Module = @__MODULE__, status::Int = 200, headers::Genie.Renderer.HTTPHeaders = Genie.Renderer.HTTPHeaders(), layout::Union{String,Nothing} = nothing, forceparse::Bool = false, vars...) :: Genie.Renderer.HTTP.Response\n\nMarkdown view rendering\n\n\n\n\n\nhtml(viewfile::FilePath; layout::Union{Nothing,FilePath} = nothing,\n      context::Module = @__MODULE__, status::Int = 200, headers::HTTPHeaders = HTTPHeaders(), vars...) :: HTTP.Response\n\nParses and renders the HTML viewfile, optionally rendering it within the layout file. Valid file format is .html.jl.\n\nArguments\n\nviewfile::FilePath: filesystem path to the view file as a Renderer.FilePath, ie Renderer.FilePath(\"/path/to/file.html.jl\")\nlayout::FilePath: filesystem path to the layout file as a Renderer.FilePath, ie Renderer.FilePath(\"/path/to/file.html.jl\")\ncontext::Module: the module in which the variables are evaluated (in order to provide the scope for vars). Usually the controller.\nstatus::Int: status code of the response\nheaders::HTTPHeaders: HTTP response headers\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.safe_attr","page":"HTML Renderer","title":"Genie.Renderer.Html.safe_attr","text":"safe_attr(attr) :: String\n\nReplaces illegal Julia characters from HTML attributes with safe ones, to be used as keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.html_to_julia","page":"HTML Renderer","title":"Genie.Renderer.Html.html_to_julia","text":"html_to_julia(file_path::String; partial = true) :: String\n\nConverts a HTML document to Julia code.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.string_to_julia","page":"HTML Renderer","title":"Genie.Renderer.Html.string_to_julia","text":"string_to_julia(content::String; partial = true, f_name::Union{Symbol,Nothing} = nothing, prepend = \"\") :: String\n\nConverts string view data to Julia code\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.to_julia","page":"HTML Renderer","title":"Genie.Renderer.Html.to_julia","text":"to_julia(input::String, f::Function; partial = true, f_name::Union{Symbol,Nothing} = nothing, prepend = \"\") :: String\n\nConverts an input file to Julia code\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.partial","page":"HTML Renderer","title":"Genie.Renderer.Html.partial","text":"partial(path::String; context::Module = @__MODULE__, vars...) :: String\n\nRenders (includes) a view partial within a larger view or layout file.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.template","page":"HTML Renderer","title":"Genie.Renderer.Html.template","text":"template(path::String; partial::Bool = true, context::Module = @__MODULE__, vars...) :: String\n\nRenders a template file.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.read_template_file","page":"HTML Renderer","title":"Genie.Renderer.Html.read_template_file","text":"read_template_file(file_path::String) :: String\n\nReads file_path template from disk.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.parse_template","page":"HTML Renderer","title":"Genie.Renderer.Html.parse_template","text":"parse_template(file_path::String; partial = true) :: String\n\nParses a HTML file into Julia code.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.parse_string","page":"HTML Renderer","title":"Genie.Renderer.Html.parse_string","text":"parse_string(data::String; partial = true) :: String\n\nParses a HTML string into Julia code.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.register_elements","page":"HTML Renderer","title":"Genie.Renderer.Html.register_elements","text":"register_elements() :: Nothing\n\nGenerated functions that represent Julia functions definitions corresponding to HTML elements.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.register_element","page":"HTML Renderer","title":"Genie.Renderer.Html.register_element","text":"register_element(elem::Union{Symbol,String}, elem_type::Union{Symbol,String} = :normal; context = @__MODULE__) :: Nothing\n\nGenerates a Julia function representing an HTML element.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.register_normal_element","page":"HTML Renderer","title":"Genie.Renderer.Html.register_normal_element","text":"register_normal_element(elem::Union{Symbol,String}; context = @__MODULE__) :: Nothing\n\nGenerates a Julia function representing a \"normal\" HTML element: that is an element with a closing tag, <tag>...</tag>\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.register_void_element","page":"HTML Renderer","title":"Genie.Renderer.Html.register_void_element","text":"register_void_element(elem::Union{Symbol,String}; context::Module = @__MODULE__) :: Nothing\n\nGenerates a Julia function representing a \"void\" HTML element: that is an element without a closing tag, <tag />\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.for_each","page":"HTML Renderer","title":"Genie.Renderer.Html.for_each","text":"for_each(f::Function, v)\n\nIterates over the v Vector and applies function f for each element. The results of each iteration are concatenated and the final string is returned.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.collection","page":"HTML Renderer","title":"Genie.Renderer.Html.collection","text":"collection(template::Function, collection::Vector{T})::String where {T}\n\nCreates a view fragment by repeateadly applying a function to each element of the collection.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Router.error","page":"HTML Renderer","title":"Genie.Router.error","text":"error\n\nNot implemented function for error response.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.serve_error_file","page":"HTML Renderer","title":"Genie.Renderer.Html.serve_error_file","text":"serve_error_file(error_code::Int, error_message::String = \"\", params::Dict{Symbol,Any} = Dict{Symbol,Any}()) :: Response\n\nServes the error file correspoding to error_code and current environment.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer-html.html#Genie.Renderer.Html.@yield","page":"HTML Renderer","title":"Genie.Renderer.Html.@yield","text":"@yield\n\nOutputs the rendering of the view within the template.\n\n\n\n\n\n","category":"macro"},{"location":"api/input.html","page":"-","title":"-","text":"CurrentModule = Input","category":"page"},{"location":"api/input.html","page":"-","title":"-","text":"HttpFile\nHttpFormPart\nHttpInput\nall\nfiles\nget_multiform_parts!\nparse_seicolon_fields\npost\npost_from_request!\nparse_quoted_params\npost_multipart!\npost_url_encoded!","category":"page"},{"location":"API/renderer.html","page":"Renderer","title":"Renderer","text":"CurrentModule = Renderer","category":"page"},{"location":"API/renderer.html","page":"Renderer","title":"Renderer","text":"WebRenderable\nrender\nredirect\nhasrequested\nrespond\nregistervars\ninjectvars\nview_file_info\nvars_signature\nfunction_name\nm_name\nbuild_is_stale\nbuild_module\npreparebuilds\npurgebuilds\nchangebuilds\nset_negotiated_content\nnegotiate_content","category":"page"},{"location":"API/renderer.html#Genie.Renderer.WebRenderable","page":"Renderer","title":"Genie.Renderer.WebRenderable","text":"mutable struct WebRenderable\n\nRepresents an object that can be rendered on the web as a HTTP Response\n\n\n\n\n\n","category":"type"},{"location":"API/renderer.html#Genie.Renderer.redirect","page":"Renderer","title":"Genie.Renderer.redirect","text":"Sets redirect headers and prepares the Response.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.hasrequested","page":"Renderer","title":"Genie.Renderer.hasrequested","text":"hasrequested(content_type::Symbol) :: Bool\n\nChecks wheter or not the requested content type matches content_type.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.respond","page":"Renderer","title":"Genie.Renderer.respond","text":"Constructs a Response corresponding to the Content-Type of the request.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.registervars","page":"Renderer","title":"Genie.Renderer.registervars","text":"registervars(vs...) :: Nothing\n\nLoads the rendering vars into the task's scope\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.view_file_info","page":"Renderer","title":"Genie.Renderer.view_file_info","text":"view_file_info(path::String, supported_extensions::Vector{String}) :: Tuple{String,String}\n\nExtracts path and extension info about a file\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.vars_signature","page":"Renderer","title":"Genie.Renderer.vars_signature","text":"vars_signature() :: String\n\nCollects the names of the view vars in order to create a unique hash/salt to identify compiled views with different vars.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.function_name","page":"Renderer","title":"Genie.Renderer.function_name","text":"function_name(file_path::String)\n\nGenerates function name for generated HTML+Julia views.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.m_name","page":"Renderer","title":"Genie.Renderer.m_name","text":"m_name(file_path::String)\n\nGenerates module name for generated HTML+Julia views.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.build_is_stale","page":"Renderer","title":"Genie.Renderer.build_is_stale","text":"build_is_stale(file_path::String, build_path::String) :: Bool\n\nChecks if the view template has been changed since the last time the template was compiled.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.build_module","page":"Renderer","title":"Genie.Renderer.build_module","text":"build_module(content::String, path::String, mod_name::String) :: String\n\nPersists compiled Julia view data to file and returns the path\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.preparebuilds","page":"Renderer","title":"Genie.Renderer.preparebuilds","text":"preparebuilds() :: Bool\n\nSets up the build folder and the build module file for generating the compiled views.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.purgebuilds","page":"Renderer","title":"Genie.Renderer.purgebuilds","text":"purgebuilds(subfolder = BUILD_NAME) :: Bool\n\nRemoves the views builds folders with all the generated views.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.changebuilds","page":"Renderer","title":"Genie.Renderer.changebuilds","text":"changebuilds(subfolder = BUILD_NAME) :: Bool\n\nChanges/creates a new builds folder.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.set_negotiated_content","page":"Renderer","title":"Genie.Renderer.set_negotiated_content","text":"set_negotiated_content(req::HTTP.Request, res::HTTP.Response, params::Dict{Symbol,Any})\n\nConfigures the request, response, and params response content type based on the request and defaults.\n\n\n\n\n\n","category":"function"},{"location":"API/renderer.html#Genie.Renderer.negotiate_content","page":"Renderer","title":"Genie.Renderer.negotiate_content","text":"negotiate_content(req::Request, res::Response, params::Params) :: Response\n\nComputes the content-type of the Response, based on the information in the Request.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Developing-Genie-MVC-Apps","page":"Developing MVC web applications","title":"Developing Genie MVC Apps","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Here is a complete walk-through of developing a feature rich MVC app with Genie, including both user facing web pages, a REST API endpoint, and user authentication.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Getting-started-creating-the-app","page":"Developing MVC web applications","title":"Getting started - creating the app","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"First, let's create a new Genie MVC app. We'll use Genie's app generator, so first let's make sure we have Genie installed.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Let's start a Julia REPL and add Genie:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"pkg> add Genie # press ] from julia> prompt to enter Pkg mode","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Now, to create the app:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> Genie.Generator.newapp_mvc(\"Watch Tonight\")","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"HEADS UP","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"The newapp_mvc function creates a new app with the given name, although spaces are not allowed in the name and Genie will automatically correct it as WatchTonight. WatchTonight is the name of the app and the name of the main module of the project, in the src/ folder. You will see it used when we will reference the various files in the project, in the using statements.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Genie will bootstrap a new application for us, creating the necessary files and installing dependencies. As we're creating a MVC app, Genie will offer to install support for SearchLight, Genie's ORM, and will ask what database backend we'll want to use:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Please choose the DB backend you want to use:\r\n1. SQLite\r\n2. MySQL\r\n3. PostgreSQL\r\nInput 1, 2 or 3 and press ENTER to confirm","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Note that if you select an option other than SQLite, you will need to manually create the database outside of Genie. Currently, Genie only automatically creates SQLite databases.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We'll use SQLite in this demo, so let's press \"1\". Once the process is completed, Genie will start the new application at http://127.0.0.1:8000. We can open it in the browser to see the default Genie home page.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#How-does-this-work?","page":"Developing MVC web applications","title":"How does this work?","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Genie uses the concept of routes and routing in order to map a URL to a request handler (a Julia function) within the app. If we edit the routes.jl file we will see that is has defined a route that states that for any requests to the / URL, the app will display a static file called welcome.html (which can be found in the public/ folder):","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"route(\"/\") do\r\n  serve_static_file(\"welcome.html\")\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Connecting-to-the-database","page":"Developing MVC web applications","title":"Connecting to the database","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"In order to configure the database connection we need to edit the db/connection.yml file, to make it look like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"env: ENV[\"GENIE_ENV\"]\r\n\r\ndev:\r\n  adapter: SQLite\r\n  database: db/netflix_catalog.sqlite","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Now let's manually load the database configuration:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> include(joinpath(\"config\", \"initializers\", \"searchlight.jl\"))\r\nSQLite.DB(\"db/netflix_catalog.sqlite\")","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Creating-a-Movie-resource","page":"Developing MVC web applications","title":"Creating a Movie resource","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"A resource is an entity exposed by the application at a URL. In a Genie MVC app it represents a bundle of Model, views, and Controller files - as well as possible additional files such as migration files for creating a database table, tests, a model data validator, etc.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"In the REPL run:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> Genie.Generator.newresource(\"movie\")","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"This should create a series of files to represent the Movie resource - just take a look at the output to see what and where was created.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Creating-the-DB-table-using-the-database-migration","page":"Developing MVC web applications","title":"Creating the DB table using the database migration","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We need to edit the migrations file that was just created in db/migrations/. Look for a file that ends in _create_table_movies.jl and make it look like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"module CreateTableMovies\r\n\r\nimport SearchLight.Migrations: create_table, column, primary_key, add_index, drop_table\r\n\r\nfunction up()\r\n  create_table(:movies) do\r\n    [\r\n      primary_key()\r\n      column(:type, :string, limit = 10)\r\n      column(:title, :string, limit = 100)\r\n      column(:directors, :string, limit = 100)\r\n      column(:actors, :string, limit = 250)\r\n      column(:country, :string, limit = 100)\r\n      column(:year, :integer, limit = 4)\r\n      column(:rating, :string, limit = 10)\r\n      column(:categories, :string, limit = 100)\r\n      column(:description, :string, limit = 1_000)\r\n    ]\r\n  end\r\n\r\n  add_index(:movies, :title)\r\n  add_index(:movies, :actors)\r\n  add_index(:movies, :categories)\r\n  add_index(:movies, :description)\r\nend\r\n\r\nfunction down()\r\n  drop_table(:movies)\r\nend\r\n\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Creating-the-migrations-table","page":"Developing MVC web applications","title":"Creating the migrations table","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"In order to be able to manage the app's migrations, we need to create the DB table used by SearchLight's migration system. This is easily done using SearchLight's generators:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> SearchLight.Migration.init()","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Running-the-migration","page":"Developing MVC web applications","title":"Running the migration","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We can now check the status of the migrations:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> SearchLight.Migration.status()","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We should see that we have one migration that is DOWN (meaning that we need to run the migration because it has not been executed yet).","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We execute the migration by running the last migration UP:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> SearchLight.Migration.lastup()","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"If you now recheck the status of the migrations, you should see that the migration is now UP.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Creating-the-Movie-model","page":"Developing MVC web applications","title":"Creating the Movie model","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Now that we have the database table, we need to create the model file which allows us manage the data. The file has already been created for us in app/resources/movies/Movies.jl. Edit it and make it look like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"module Movies\r\n\r\nimport SearchLight: AbstractModel, DbId\r\nimport Base: @kwdef\r\n\r\nexport Movie\r\n\r\n@kwdef mutable struct Movie <: AbstractModel\r\n  id::DbId = DbId()\r\n  type::String = \"Movie\"\r\n  title::String = \"\"\r\n  directors::String = \"\"\r\n  actors::String = \"\"\r\n  country::String = \"\"\r\n  year::Int = 0\r\n  rating::String = \"\"\r\n  categories::String = \"\"\r\n  description::String = \"\"\r\nend\r\n\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Interacting-with-the-movies-data","page":"Developing MVC web applications","title":"Interacting with the movies data","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Once our model is created, we can interact with the database:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> using WatchTonight.Movies\r\n\r\njulia> m = Movie(title = \"Test movie\", actors = \"John Doe, Jane Doe\")","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We can check if our movie object is persisted (saved to the db):","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> ispersisted(m)\r\nfalse","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"And we can save it:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> save(m)\r\ntrue","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Now we can run various methods against our data:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> count(Movie)\r\n\r\njulia> all(Movie)","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Seeding-the-data","page":"Developing MVC web applications","title":"Seeding the data","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We're now ready to load the movie data into our database - we'll use a short seeding script. First make sure to place the CVS file into the /db/seeds/ folder. Create the seeds file:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> touch(joinpath(\"db\", \"seeds\", \"seed_movies.jl\"))","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"And edit it to look like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"using SearchLight, WatchTonight.Movies\r\nusing CSV\r\n\r\nBase.convert(::Type{String}, _::Missing) = \"\"\r\nBase.convert(::Type{Int}, _::Missing) = 0\r\nBase.convert(::Type{Int}, s::String) = parse(Int, s)\r\n\r\nfunction seed()\r\n  for row in CSV.Rows(joinpath(@__DIR__, \"netflix_titles.csv\"), limit = 1_000)\r\n    m = Movie()\r\n\r\n    m.type = row.type\r\n    m.title = row.title\r\n    m.directors = row.director\r\n    m.actors = row.cast\r\n    m.country = row.country\r\n    m.year = row.release_year\r\n    m.rating = row.rating\r\n    m.categories = row.listed_in\r\n    m.description = row.description\r\n\r\n    save(m)\r\n  end\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Add CSV.jl as a dependency of the project:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"pkg> add CSV","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"And download the dataset:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> download(\"https://raw.githubusercontent.com/essenciary/genie-watch-tonight/main/db/seeds/netflix_titles.csv\", joinpath(\"db\", \"seeds\", \"netflix_titles.csv\"))","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Now, to seed the db:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> include(joinpath(\"db\", \"seeds\", \"seed_movies.jl\"))\r\njulia> seed()","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Setting-up-the-web-page","page":"Developing MVC web applications","title":"Setting up the web page","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We'll start by adding the route to our handler function. Let's open the routes.jl file and add:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"# routes.jl\r\nusing WatchTonight.MoviesController\r\n\r\nroute(\"/movies\", MoviesController.index)","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"This route declares that the /movies URL will be handled by the MoviesController.index index function. Let's put it in by editing /app/resources/movies/MoviesController.jl:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"module MoviesController\r\n\r\nfunction index()\r\n  \"Welcome to movies list!\"\r\nend\r\n\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"If we navigate to http://127.0.0.1:8000/movies we should see the welcome.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Let's make this more useful though and display a random movie upon landing here:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"module MoviesController\r\n\r\nusing Genie.Renderer.Html, SearchLight, WatchTonight.Movies\r\n\r\nfunction index()\r\n  html(:movies, :index, movies = rand(Movie))\r\nend\r\n\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"The index function renders the /app/resources/movies/views/index.jl.html view file as HTML, passing it a random movie into the movies instance. Since we don't have the view file yet, let's add it:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> touch(joinpath(\"app\", \"resources\", \"movies\", \"views\", \"index.jl.html\"))","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Make it look like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"<h1 class=\"display-1 text-center\">Watch tonight</h1>\r\n<%\r\nif ! isempty(movies)\r\n  for_each(movies) do movie\r\n    partial(joinpath(Genie.config.path_resources, \"movies\", \"views\", \"_movie.jl.html\"), movie = movie)\r\n  end\r\nelse\r\n  partial(joinpath(Genie.config.path_resources, \"movies\", \"views\", \"_no_results.jl.html\"))\r\nend\r\n%>","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Now to create the _movie.jl.html partial file to render a movie object:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> touch(joinpath(\"app\", \"resources\", \"movies\", \"views\", \"_movie.jl.html\"))","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Edit it like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"<div class=\"container\" style=\"margin-top: 40px;\">\r\n  <h3><% movie.title %></h3>\r\n\r\n  <div>\r\n    <small class=\"badge bg-primary\"><% movie.year %></small> |\r\n    <small class=\"badge bg-light text-dark\"><% movie.type %></small> |\r\n    <small class=\"badge bg-dark\"><% movie.rating %></small>\r\n  </div>\r\n\r\n  <h4><% movie.description %></h4>\r\n\r\n  <div><strong>Directed by: </strong><% movie.directors %></div>\r\n  <div><strong>Cast: </strong><% movie.actors %></div>\r\n  <div><strong>Country: </strong><% movie.country %></div>\r\n  <div><strong>Categories: </strong><% movie.categories %></div>\r\n</div>","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"And finally, the _no_results.jl.html partial:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> touch(joinpath(\"app\", \"resources\", \"movies\", \"views\", \"_no_results.jl.html\"))","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Which must look like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"<h4 class=\"container\">\r\n  Sorry, no results were found for \"$(params(:search_movies))\"\r\n</h4>","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Using-the-layout-file","page":"Developing MVC web applications","title":"Using the layout file","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Let's make the web page nicer by loading the Twitter Bootstrap CSS library. As it will be used across all the pages of the website, we'll load it in the main layout file. Edit /app/layouts/app.jl.html to look like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <title>Genie :: The Highly Productive Julia Web Framework</title>\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n  </head>\r\n  <body>\r\n    <div class=\"container\">\r\n    <%\r\n      @yield\r\n    %>\r\n    </div>\r\n  </body>\r\n</html>","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Adding-the-search-feature","page":"Developing MVC web applications","title":"Adding the search feature","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Now that we can display titles, it's time to implement the search feature. We'll add a search form onto our page. Edit /app/resources/movies/views/index.jl.html to look like this:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"<h1 class=\"display-1 text-center\">Watch tonight</h1>\r\n\r\n<div class=\"container\" style=\"margin-top: 40px;\">\r\n  <form action=\"$( Genie.Router.linkto(:search_movies) )\">\r\n    <input class=\"form-control form-control-lg\" type=\"search\" name=\"search_movies\" placeholder=\"Search for movies and TV shows\" />\r\n  </form>\r\n</div>\r\n\r\n<%\r\nif ! isempty(movies)\r\n  for_each(movies) do movie\r\n    partial(joinpath(Genie.config.path_resources, \"movies\", \"views\", \"_movie.jl.html\"), movie = movie)\r\n  end\r\nelse\r\n  partial(joinpath(Genie.config.path_resources, \"movies\", \"views\", \"_no_results.jl.html\"))\r\nend\r\n%>","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We have added a HTML <form> which submits a query term over GET.","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Next, add the route:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"route(\"/movies/search\", MoviesController.search, named = :search_movies)","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"And the MoviesController.search function after updating the using section:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"using Genie, Genie.Renderer, Genie.Renderer.Html, SearchLight, WatchTonight.Movies\r\n\r\nfunction search()\r\n  isempty(strip(params(:search_movies))) && redirect(:get_movies)\r\n\r\n  movies = find(Movie,\r\n              SQLWhereExpression(\"title LIKE ? OR categories LIKE ? OR description LIKE ? OR actors LIKE ?\",\r\n                                  repeat(['%' * params(:search_movies) * '%'], 4)))\r\n\r\n  html(:movies, :index, movies = movies)\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Time to check our progress: http://127.0.0.1:8000/movies","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Building-the-REST-API","page":"Developing MVC web applications","title":"Building the REST API","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Let's start by adding a new route for the API search:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"route(\"/movies/search_api\", MoviesController.search_api)","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"With the corresponding search_api method in the MoviesController model:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"using Genie, Genie.Renderer, Genie.Renderer.Html, SearchLight, WatchTonight.Movies, Genie.Renderer.Json\r\n\r\nfunction search_api()\r\n  movies = find(Movie,\r\n              SQLWhereExpression(\"title LIKE ? OR categories LIKE ? OR description LIKE ? OR actors LIKE ?\",\r\n                                  repeat(['%' * params(:search_movies) * '%'], 4)))\r\n\r\n  json(Dict(\"movies\" => movies))\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html#Bonus","page":"Developing MVC web applications","title":"Bonus","text":"","category":"section"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Genie makes it easy to add database backed authentication for restricted area of a website, by using the GenieAuthentication plugin. Start by adding package:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"pkg> add GenieAuthentication\r\n\r\njulia> using GenieAuthentication","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Now, to install the plugin files:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> GenieAuthentication.install(@__DIR__)","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"The plugin has created a create table migration that we need to run UP:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> SearchLight.Migration.up(\"CreateTableUsers\")","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Let's generate an Admin controller that we'll want to protect by login:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> Genie.Generator.newcontroller(\"Admin\", pluralize = false)","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Let's load the plugin into the app manually to avoid restarting the app. Upon restarting the application next time, the plugin will be automatically loaded by Genie:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> include(joinpath(\"plugins\", \"genie_authentication.jl\"))","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"Time to create an admin user for logging in:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"julia> using WatchTonight.Users\r\n\r\njulia> u = User(email = \"admin@admin\", name = \"Admin\", password = Users.hash_password(\"admin\"), username = \"admin\")\r\n\r\njulia> save!(u)","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"We'll also need a route for the admin area:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"using WatchTonight.AdminController\r\n\r\nroute(\"/admin/movies\", AdminController.index, named = :get_home)","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"And finally, the controller code:","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"module AdminController\r\n\r\nusing GenieAuthentication, Genie.Renderer, Genie.Exceptions, Genie.Renderer.Html\r\n\r\nfunction index()\r\n  @authenticated!\r\n  h1(\"Welcome Admin\") |> html\r\nend\r\n\r\nend","category":"page"},{"location":"tutorials/4-1--Developing_MVC_Web_Apps.html","page":"Developing MVC web applications","title":"Developing MVC web applications","text":"If we navigate to http://127.0.0.1:8000/admin/movies we'll be asked to logged in. Using admin for the user and admin for the password will allow us to access the password protected section.","category":"page"},{"location":"API/commands.html","page":"Commands","title":"Commands","text":"CurrentModule = Commands","category":"page"},{"location":"API/commands.html","page":"Commands","title":"Commands","text":"called_command\nexecute\nparse_commandline_args","category":"page"},{"location":"API/commands.html#Genie.Commands.called_command","page":"Commands","title":"Genie.Commands.called_command","text":"called_command(args::Dict, key::String) :: Bool\n\nChecks whether or not a certain command was invoked by looking at the command line args.\n\n\n\n\n\n","category":"function"},{"location":"API/commands.html#Genie.Commands.execute","page":"Commands","title":"Genie.Commands.execute","text":"execute(config::Settings) :: Nothing\n\nRuns the requested Genie app command, based on the args passed to the script.\n\n\n\n\n\n","category":"function"},{"location":"API/commands.html#Genie.Commands.parse_commandline_args","page":"Commands","title":"Genie.Commands.parse_commandline_args","text":"parse_commandline_args() :: Dict{String,Any}\n\nExtracts the command line args passed into the app and returns them as a Dict, possibly setting up defaults. Also, it is used by the ArgParse module to populate the command line help for the app -h.\n\n\n\n\n\n","category":"function"},{"location":"api/responses.html","page":"-","title":"-","text":"CurrentModule = Responses","category":"page"},{"location":"api/responses.html","page":"-","title":"-","text":"getresponse\ngetheaders\nsetheaders!\nsetheaders\ngetstatus\nsetstatus!\nsetstatus\ngetbody\nsetbody!\nsetbody","category":"page"},{"location":"api/toolbox.html","page":"-","title":"-","text":"CurrentModule = Toolbox","category":"page"},{"location":"api/toolbox.html","page":"-","title":"-","text":"TaskInfo\nTaskResult\ntasks\nVoidTaskResult\nvalidtaskname\ntaskdocs\nloadtasks\nprinttasks\nnew\ntaskfilename\ntaskmodulename\nisvalidtask!","category":"page"},{"location":"API/assets.html","page":"Assets","title":"Assets","text":"CurrentModule = Assets","category":"page"},{"location":"API/assets.html","page":"Assets","title":"Assets","text":"add_fileroute\nAssetsConfig\nassets_config!\nassets_endpoint\nasset_file\nasset_path\nasset_route\nchannels\nchannels_route\nchannels_script\nchannels_script_tag\nchannels_subscribe\nchannels_support\ncss_asset\nembedded\nembedded_path\nexternal_assets\nfavicon_support\ninclude_asset\njs_asset\njsliteral\njs_settings\nwebthreads\nwebthreads_endpoint\nwebthreads_push_pull\nwebthreads_route\nwebthreads_script\nwebthreads_script_tag\nwebthreads_subscribe\nwebthreads_support","category":"page"},{"location":"API/assets.html#Genie.Assets.add_fileroute","page":"Assets","title":"Genie.Assets.add_fileroute","text":"addfileroute(assetsconfig::Genie.Assets.AssetsConfig, filename::AbstractString;     basedir = @DIR,     type::Union{Nothing, String} = nothing,      content_type::Union{Nothing, Symbol} = nothing,     ext::Union{Nothing, String} = nothing, kwargs...)\n\nHelper function to add a file route to the assets based on asset_config and filename.\n\nExample\n\nadd_fileroute(StippleUI.assets_config, \"Sortable.min.js\")\nadd_fileroute(StippleUI.assets_config, \"vuedraggable.umd.min.js\")\nadd_fileroute(StippleUI.assets_config, \"vuedraggable.umd.min.js.map\", type = \"js\")\nadd_fileroute(StippleUI.assets_config, \"QSortableTree.js\")\n\ndraggabletree_deps() = [\n  script(src = \"/stippleui.jl/master/assets/js/sortable.min.js\")\n  script(src = \"/stippleui.jl/master/assets/js/vuedraggable.umd.min.js\")\n  script(src = \"/stippleui.jl/master/assets/js/qsortabletree.js\")\n]\nStipple.DEPS[:qdraggabletree] = draggabletree_deps\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.AssetsConfig","page":"Assets","title":"Genie.Assets.AssetsConfig","text":"mutable struct AssetsConfig\n\nManages the assets configuration for the current package. Define your own instance of AssetsConfig if you want to add support for asset management for your package through Genie.Assets.\n\n\n\n\n\n","category":"type"},{"location":"API/assets.html#Genie.Assets.assets_config!","page":"Assets","title":"Genie.Assets.assets_config!","text":"assets_config!(packages::Vector{Module}; config...) :: Nothing\nassets_config!(package::Module; config...) :: Nothing\n\nUtility function which allows bulk configuration of the assets.\n\nExample\n\nGenie.Assets.assets_config!([Genie, Stipple, StippleUI], host = \"https://cdn.statically.io/gh/GenieFramework\")\n\n\n\n\n\nassets_config!(; config...) :: Nothing\n\nUpdates the assets configuration for the current package.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.asset_file","page":"Assets","title":"Genie.Assets.asset_file","text":"asset_file(; cwd = \"\", file::String, path::String = \"\", type::String = \"\", prefix::String = \"assets\",\n              ext::String = \"\", min::Bool = false, skip_ext::Bool = false) :: String\n\nGenerates the file system path to an asset file.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.asset_path","page":"Assets","title":"Genie.Assets.asset_path","text":"asset_path(; file::String, host::String = Genie.config.base_path, package::String = \"\", version::String = \"\",\n              prefix::String = \"assets\", type::String = \"\", path::String = \"\", min::Bool = false,\n              ext::String = \"\", skip_ext::Bool = false, query::String = \"\") :: String\nasset_path(file::String; kwargs...) :: String\nasset_path(ac::AssetsConfig, tp::Union{Symbol,String}; type::String = string(tp), path::String = \"\",\n                file::String = \"\", ext::String = \"\", skip_ext::Bool = false, query::String = \"\") :: String\n\nGenerates the path to an asset file.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.asset_route","page":"Assets","title":"Genie.Assets.asset_route","text":"asset_route(; file::String, package::String = \"\", version::String = \"\", prefix::String = \"assets\",\n              type::String = \"\", path::String = \"\", min::Bool = false,\n              ext::String = \"\", skip_ext::Bool = false, query::String = \"\") :: String\nasset_route(file::String; kwargs...) :: String\nasset_route(ac::AssetsConfig, tp::Union{Symbol,String}; type::String = string(tp), path::String = \"\",\n            file::String = \"\", ext::String = \"\", skip_ext::Bool = false, query::String = \"\") :: String\n\nGenerates the route to an asset file.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.channels","page":"Assets","title":"Genie.Assets.channels","text":"channels(channel::AbstractString = Genie.config.webchannels_default_route) :: String\n\nOutputs the channels.js file included with the Genie package.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.channels_script","page":"Assets","title":"Genie.Assets.channels_script","text":"channels_script(channel::AbstractString = Genie.config.webchannels_default_route) :: String\n\nOutputs the channels JavaScript content within <script>...</script> tags, for embedding into the page.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.channels_subscribe","page":"Assets","title":"Genie.Assets.channels_subscribe","text":"channels_subscribe(channel::AbstractString = Genie.config.webchannels_default_route) :: Nothing\n\nRegisters subscription and unsubscription channels for channel.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.channels_support","page":"Assets","title":"Genie.Assets.channels_support","text":"channels_support(channel = Genie.config.webchannels_default_route) :: String\n\nProvides full web channels support, setting up routes for loading support JS files, web sockets subscription and returning the <script> tag for including the linked JS file into the web page.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.css_asset","page":"Assets","title":"Genie.Assets.css_asset","text":"css_asset(file_name::String) :: String\n\nPath to a css asset. The file_name should not include the extension.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.embedded","page":"Assets","title":"Genie.Assets.embedded","text":"embeded(path::String) :: String\n\nReads and outputs the file at path.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.embedded_path","page":"Assets","title":"Genie.Assets.embedded_path","text":"embeded_path(path::String) :: String\n\nReturns the path relative to Genie's root package dir.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.external_assets","page":"Assets","title":"Genie.Assets.external_assets","text":"external_assets(host::String) :: Bool\nexternal_assets(ac::AssetsConfig) :: Bool\nexternal_assets() :: Bool\n\nReturns true if the current package is using external assets.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.favicon_support","page":"Assets","title":"Genie.Assets.favicon_support","text":"favicon_support() :: String\n\nOutputs the <link> tag for referencing the favicon file embedded with Genie.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.include_asset","page":"Assets","title":"Genie.Assets.include_asset","text":"include_asset(asset_type::Union{String,Symbol}, file_name::Union{String,Symbol}) :: String\n\nReturns the path to an asset. asset_type can be one of :js, :css. The file_name should not include the extension.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.js_asset","page":"Assets","title":"Genie.Assets.js_asset","text":"js_asset(file_name::String) :: String\n\nPath to a js asset. file_name should not include the extension.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.js_settings","page":"Assets","title":"Genie.Assets.js_settings","text":"js_settings(channel::String = Genie.config.webchannels_default_route) :: String\n\nSets up a window.Genie.Settings JavaScript object which exposes relevant Genie app settings from Genie.config\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.webthreads","page":"Assets","title":"Genie.Assets.webthreads","text":"webthreads() :: String\n\nOutputs the webthreads.js file included with the Genie package\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.webthreads_push_pull","page":"Assets","title":"Genie.Assets.webthreads_push_pull","text":"function webthreads_push_pull(channel) :: Nothing\n\nRegisters push and pull routes for channel.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.webthreads_script","page":"Assets","title":"Genie.Assets.webthreads_script","text":"webthreads_script() :: String\n\nOutputs the channels JavaScript content within <script>...</script> tags, for embedding into the page.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.webthreads_subscribe","page":"Assets","title":"Genie.Assets.webthreads_subscribe","text":"function webthreads_subscribe(channel) :: Nothing\n\nRegisters subscription and unsubscription routes for channel.\n\n\n\n\n\n","category":"function"},{"location":"API/assets.html#Genie.Assets.webthreads_support","page":"Assets","title":"Genie.Assets.webthreads_support","text":"webthreads_support(channel = Genie.config.webthreads_default_route) :: String\n\nProvides full web channels support, setting up routes for loading support JS files, web sockets subscription and returning the <script> tag for including the linked JS file into the web page.\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html","page":"Loader","title":"Loader","text":"CurrentModule = Loader","category":"page"},{"location":"API/loader.html","page":"Loader","title":"Loader","text":"autoload\nbootstrap\ndefault_context\nimportenv\nload\nload_helpers\nload_initializers\nload_libs\nload_plugins\nload_resources\nload_routes","category":"page"},{"location":"API/loader.html#Genie.Loader.autoload","page":"Loader","title":"Genie.Loader.autoload","text":"autoload\n\nAutomatically and recursively includes files from the indicated root_dir into the indicated context module, skipping directories from dir. The files are set up with Revise to be automatically reloaded when changed (in dev environment).\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.bootstrap","page":"Loader","title":"Genie.Loader.bootstrap","text":"bootstrap(context::Union{Module,Nothing} = nothing) :: Nothing\n\nKickstarts the loading of a Genie app by loading the environment settings.\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.default_context","page":"Loader","title":"Genie.Loader.default_context","text":"default_context(context::Union{Module,Nothing})\n\nSets the module in which the code is loaded (the app's module)\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.load","page":"Loader","title":"Genie.Loader.load","text":"load(; context::Union{Module,Nothing} = nothing) :: Nothing\n\nMain entry point to loading a Genie app.\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.load_helpers","page":"Loader","title":"Genie.Loader.load_helpers","text":"load_helpers(root_dir::String = Genie.config.path_helpers) :: Nothing\n\nAutomatically recursively includes files from helpers/ and subfolders.\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.load_initializers","page":"Loader","title":"Genie.Loader.load_initializers","text":"load_initializers(root_dir::String = Genie.config.path_config; context::Union{Module,Nothing} = nothing) :: Nothing\n\nAutomatically recursively includes files from initializers/ and subfolders.\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.load_libs","page":"Loader","title":"Genie.Loader.load_libs","text":"load_libs(root_dir::String = Genie.config.path_lib) :: Nothing\n\nRecursively includes files from lib/ and subfolders. The lib/ folder, if present, is designed to host user code in the form of .jl files.\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.load_plugins","page":"Loader","title":"Genie.Loader.load_plugins","text":"load_plugins(root_dir::String = Genie.config.path_plugins; context::Union{Module,Nothing} = nothing) :: Nothing\n\nAutomatically recursively includes files from plugins/ and subfolders.\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.load_resources","page":"Loader","title":"Genie.Loader.load_resources","text":"load_resources(root_dir::String = Genie.config.path_resources) :: Nothing\n\nAutomatically recursively includes files from resources/ and subfolders.\n\n\n\n\n\n","category":"function"},{"location":"API/loader.html#Genie.Loader.load_routes","page":"Loader","title":"Genie.Loader.load_routes","text":"load_routes(routes_file::String = Genie.ROUTES_FILE_NAME; context::Union{Module,Nothing} = nothing) :: Nothing\n\nLoads the routes file.\n\n\n\n\n\n","category":"function"},{"location":"api/requests.html","page":"-","title":"-","text":"CurrentModule = Requests","category":"page"},{"location":"api/requests.html","page":"-","title":"-","text":"jsonpayload\nrawpayload\nfilespayload\ninfilespayload\nRequests.write\nRequests.read\nfilename\npostpayload\ngetpayload\nrequest\npayload\nmatchedroute\nmatchedchannel\nwsclient","category":"page"},{"location":"guides/Simple_API_backend.html#Developing-a-simple-API-backend","page":"Developing an API backend","title":"Developing a simple API backend","text":"","category":"section"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"Genie makes it very easy to quickly set up a REST API backend. All it takes is a few lines of code. Add these to a rest.jl file:","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"# rest.jl\nusing Genie\nimport Genie.Renderer.Json: json\n\nGenie.config.run_as_server = true\n\nroute(\"/\") do\n  (:message => \"Hi there!\") |> json\nend\n\nup()","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"The key bit here is Genie.config.run_as_server = true. This will start the server synchronously (blocking) so the up() function won't return (won't exit) keeping the Julia process running. As an alternative, we can skip the run_as_server = true configuration and use up(async = false) instead.","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"The script can be run directly from the command line:","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"$ julia rest.jl","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"If you run the above code in the REPL, there is no need to set up run_as_server = true or up(async = false) because the REPL will keep the Julia process running.","category":"page"},{"location":"guides/Simple_API_backend.html#Accepting-JSON-payloads","page":"Developing an API backend","title":"Accepting JSON payloads","text":"","category":"section"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"One common requirement when exposing APIs is to accept POST payloads. That is, requests over POST, with a request body as a JSON encoded object. We can build an echo service like this:","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"using Genie, Genie.Renderer.Json, Genie.Requests\nusing HTTP\n\nroute(\"/echo\", method = POST) do\n  message = jsonpayload()\n  (:echo => (message[\"message\"] * \" \") ^ message[\"repeat\"]) |> json\nend\n\nroute(\"/send\") do\n  response = HTTP.request(\"POST\", \"http://localhost:8000/echo\", [(\"Content-Type\", \"application/json\")], \"\"\"{\"message\":\"hello\", \"repeat\":3}\"\"\")\n\n  response.body |> String |> json\nend\n\nup(async = false)","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"Here we define two routes, /send and /echo. The send route makes a HTTP request over POST to /echo, sending a JSON payload with two values, message and repeat. In the /echo route, we grab the JSON payload using the Requests.jsonpayload() function, extract the values from the JSON object, and output the message value repeated for a number of times equal to the repeat value.","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"If you run the code, the output should be","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"{\n  echo: \"hello hello hello \"\n}","category":"page"},{"location":"guides/Simple_API_backend.html","page":"Developing an API backend","title":"Developing an API backend","text":"If the payload contains invalid JSON, the jsonpayload will be set to nothing. You can still access the raw payload by using the Requests.rawpayload() function. You can also use rawpayload if for example the type of request/payload is not JSON.","category":"page"},{"location":"API/generator.html","page":"Generator","title":"Generator","text":"CurrentModule = Generator","category":"page"},{"location":"API/generator.html","page":"Generator","title":"Generator","text":"autoconfdb\nautostart_app\nbinfolderpath\ncontroller_file_name\ndb_intializer\ndb_support\nfullstack_app\ngenerate_project\ninstall_app_dependencies\ninstall_db_dependencies\ninstall_searchlight_dependencies\nmicrostack_app\nminimal\nmvc_support\nnewapp\nnewapp_fullstack\nnewapp_mvc\nnewapp_webservice\nnewcontroller\nnewresource\nnewtask\npkggenfile\npkgproject\npost_create\nremove_searchlight_initializer\nresource_does_not_exist\nscaffold\nset_files_mod\nsetup_resource_path\nsetup_nix_bin_files\nsetup_windows_bin_files\nvalidname\nwrite_app_custom_files\nwrite_db_config\nwrite_resource_file\nwrite_secrets_file","category":"page"},{"location":"API/generator.html#Genie.Generator.autostart_app","page":"Generator","title":"Genie.Generator.autostart_app","text":"autostart_app(path::String = \".\"; autostart::Bool = true) :: Nothing\n\nIf autostart is true, the newly generated Genie app will be automatically started.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.controller_file_name","page":"Generator","title":"Genie.Generator.controller_file_name","text":"controller_file_name(resource_name::Union{String,Symbol})\n\nComputes the controller file name based on the resource name.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.db_support","page":"Generator","title":"Genie.Generator.db_support","text":"db_support(app_path::String = \".\") :: Nothing\n\nWrites files used for interacting with the SearchLight ORM.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.fullstack_app","page":"Generator","title":"Genie.Generator.fullstack_app","text":"fullstack_app(app_path::String = \".\") :: Nothing\n\nWrites the files necessary to create a full stack Genie app.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.generate_project","page":"Generator","title":"Genie.Generator.generate_project","text":"generate_project(name)\n\nGenerate the Project.toml with a name and a uuid. If this file already exists, generate Project_sample.toml as a reference instead.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.install_app_dependencies","page":"Generator","title":"Genie.Generator.install_app_dependencies","text":"install_app_dependencies(app_path::String = \".\") :: Nothing\n\nInstalls the application's dependencies using Julia's Pkg\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.microstack_app","page":"Generator","title":"Genie.Generator.microstack_app","text":"microstack_app(app_path::String = \".\") :: Nothing\n\nWrites the file necessary to create a microstack app.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.minimal","page":"Generator","title":"Genie.Generator.minimal","text":"minimal(app_name::String, app_path::String = abspath(app_name), autostart::Bool = true) :: Nothing\n\nCreates a minimal Genie app.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.mvc_support","page":"Generator","title":"Genie.Generator.mvc_support","text":"mvc_support(app_path::String = \".\") :: Nothing\n\nWrites the files used for rendering resources using the MVC stack and the Genie templating system.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.newapp","page":"Generator","title":"Genie.Generator.newapp","text":"newapp(app_name::String; autostart::Bool = true, fullstack::Bool = false, dbsupport::Bool = false, mvcsupport::Bool = false) :: Nothing\n\nScaffolds a new Genie app, setting up the file structure indicated by the various arguments.\n\nArguments\n\napp_name::String: the name of the app (can be the full path where the app should be created).\nautostart::Bool: automatically start the app once the file structure is created\nfullstack::Bool: the type of app to be bootstrapped. The fullstack app includes MVC structure, DB connection code, and asset pipeline files.\ndbsupport::Bool: bootstrap the files needed for DB connection setup via the SearchLight ORM\nmvcsupport::Bool: adds the files used for HTML+Julia view templates rendering and working with resources\ndbadapter::Union{String,Symbol,Nothing} = nothing : pass the SearchLight database adapter to be used by default\n\n(one of :MySQL, :SQLite, or :PostgreSQL). If dbadapter is nothing, an adapter will have to be selected interactivel at the REPL, during the app creation process.\n\nExamples\n\njulia> Genie.Generator.newapp(\"MyGenieApp\")\n2019-08-06 16:54:15:INFO:Main: Done! New app created at MyGenieApp\n2019-08-06 16:54:15:DEBUG:Main: Changing active directory to MyGenieApp\n2019-08-06 16:54:15:DEBUG:Main: Installing app dependencies\n Resolving package versions...\n  Updating `~/Dropbox/Projects/GenieTests/MyGenieApp/Project.toml`\n  [c43c736e] + Genie v0.10.1\n  Updating `~/Dropbox/Projects/GenieTests/MyGenieApp/Manifest.toml`\n\n2019-08-06 16:54:27:INFO:Main: Starting your brand new Genie app - hang tight!\n _____         _\n|   __|___ ___|_|___\n|  |  | -_|   | | -_|\n|_____|___|_|_|_|___|\n\n┌ Info:\n│ Starting Genie in >> DEV << mode\n└\n[ Info: Logging to file at MyGenieApp/log/dev.log\n[ Info: Ready!\n2019-08-06 16:54:32:DEBUG:Main: Web Server starting at http://127.0.0.1:8000\n2019-08-06 16:54:32:DEBUG:Main: Web Server running at http://127.0.0.1:8000\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.newapp_fullstack","page":"Generator","title":"Genie.Generator.newapp_fullstack","text":"newapp_fullstack(path::String = \".\"; autostart::Bool = true) :: Nothing\n\nTemplate for scaffolding a new Genie app suitable for full stack web applications (includes MVC structure, DB support, and frontend asset pipeline).\n\nArguments\n\npath::String: the name of the app and the path where to bootstrap it\nautostart::Bool: automatically start the app once the file structure is created\ndbadapter::Union{String,Symbol,Nothing} = nothing : pass the SearchLight database adapter to be used by default\n\n(one of :MySQL, :SQLite, or :PostgreSQL). If dbadapter is nothing, an adapter will have to be selected interactivel at the REPL, during the app creation process.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.newapp_mvc","page":"Generator","title":"Genie.Generator.newapp_mvc","text":"newapp_mvc(path::String = \".\"; autostart::Bool = true) :: Nothing\n\nTemplate for scaffolding a new Genie app suitable for MVC web applications (includes MVC structure and DB support).\n\nArguments\n\npath::String: the name of the app and the path where to bootstrap it\nautostart::Bool: automatically start the app once the file structure is created\ndbadapter::Union{String,Symbol,Nothing} = nothing : pass the SearchLight database adapter to be used by default\n\n(one of :MySQL, :SQLite, or :PostgreSQL). If dbadapter is nothing, an adapter will have to be selected interactivel at the REPL, during the app creation process.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.newapp_webservice","page":"Generator","title":"Genie.Generator.newapp_webservice","text":"newapp_webservice(path::String = \".\"; autostart::Bool = true, dbsupport::Bool = false) :: Nothing\n\nTemplate for scaffolding a new Genie app suitable for nimble web services.\n\nArguments\n\npath::String: the name of the app and the path where to bootstrap it\nautostart::Bool: automatically start the app once the file structure is created\ndbsupport::Bool: bootstrap the files needed for DB connection setup via the SearchLight ORM\ndbadapter::Union{String,Symbol,Nothing} = nothing : pass the SearchLight database adapter to be used by default\n\n(one of :MySQL, :SQLite, or :PostgreSQL). If dbadapter is nothing, an adapter will have to be selected interactivel at the REPL, during the app creation process.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.newcontroller","page":"Generator","title":"Genie.Generator.newcontroller","text":"newcontroller(controller_name::Union{String,Symbol}) :: Nothing\n\nCreates a new controller file. If pluralize is false, the name of the controller is not automatically pluralized.\n\n\n\n\n\nnewcontroller(resource_name::String) :: Nothing\n\nGenerates a new Genie controller file and persists it to the resources folder.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.newresource","page":"Generator","title":"Genie.Generator.newresource","text":"newresource(resource_name::Union{String,Symbol}; pluralize::Bool = true, context::Union{Module,Nothing} = nothing) :: Nothing\n\nCreates all the files associated with a new resource. If pluralize is false, the name of the resource is not automatically pluralized.\n\n\n\n\n\nnewresource(resource_name::String, config::Settings) :: Nothing\n\nGenerates all the files associated with a new resource and persists them to the resources folder.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.newtask","page":"Generator","title":"Genie.Generator.newtask","text":"newtask(task_name::Union{String,Symbol}) :: Nothing\n\nCreates a new Genie Task file.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.remove_searchlight_initializer","page":"Generator","title":"Genie.Generator.remove_searchlight_initializer","text":"remove_searchlight_initializer(app_path::String = \".\") :: Nothing\n\nRemoves the SearchLight initializer file if it's unused\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.resource_does_not_exist","page":"Generator","title":"Genie.Generator.resource_does_not_exist","text":"resource_does_not_exist(resource_path::String, file_name::String) :: Bool\n\nReturns true if the indicated resources does not exists - false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.scaffold","page":"Generator","title":"Genie.Generator.scaffold","text":"scaffold(app_path::String = \".\") :: Nothing\n\nWrites the file necessary to scaffold a minimal Genie app.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.setup_resource_path","page":"Generator","title":"Genie.Generator.setup_resource_path","text":"setup_resource_path(resource_name::String) :: String\n\nComputes and creates the directories structure needed to persist a new resource.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.setup_nix_bin_files","page":"Generator","title":"Genie.Generator.setup_nix_bin_files","text":"setup_nix_bin_files(path::String = \".\") :: Nothing\n\nCreates the bin/server and bin/repl binaries for *nix systems\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.setup_windows_bin_files","page":"Generator","title":"Genie.Generator.setup_windows_bin_files","text":"setup_windows_bin_files(path::String = \".\") :: Nothing\n\nCreates the bin/server and bin/repl binaries for Windows\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.write_app_custom_files","page":"Generator","title":"Genie.Generator.write_app_custom_files","text":"write_app_custom_files(path::String, app_path::String) :: Nothing\n\nWrites the Genie app main module file.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.write_resource_file","page":"Generator","title":"Genie.Generator.write_resource_file","text":"write_resource_file(resource_path::String, file_name::String, resource_name::String) :: Bool\n\nGenerates all resouce files and persists them to disk.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#Genie.Generator.write_secrets_file","page":"Generator","title":"Genie.Generator.write_secrets_file","text":"write_secrets_file(app_path=\".\")\n\nGenerates a valid config/secrets.jl file with a random secret token.\n\n\n\n\n\n","category":"function"},{"location":"api/httputils.html","page":"-","title":"-","text":"CurrentModule = HTTPUtils","category":"page"},{"location":"api/httputils.html","page":"-","title":"-","text":"HTTPUtils.Dict","category":"page"},{"location":"API/input.html","page":"Input","title":"Input","text":"CurrentModule = Input","category":"page"},{"location":"API/input.html","page":"Input","title":"Input","text":"HttpFile\nHttpFormPart\nHttpInput\nall\nfiles\nget_multiform_parts!\nparse_seicolon_fields\npost\npost_from_request!\nparse_quoted_params\npost_multipart!\npost_url_encoded!","category":"page"},{"location":"API/input.html#Genie.Input.HttpFile","page":"Input","title":"Genie.Input.HttpFile","text":"HttpFile\n\nRepresents a file sent over HTTP\n\n\n\n\n\n","category":"type"},{"location":"api/watch.html","page":"-","title":"-","text":"CurrentModule = Watch","category":"page"},{"location":"api/watch.html","page":"-","title":"-","text":"WATCHED_FOLDERS\nWATCHING\ncollect_watched_files\nhandlers\nunwatch\nwatch\nwatchpath","category":"page"},{"location":"guides/Genie_Plugins.html#Genie-Plugins","page":"Using Genie Plugins","title":"Genie Plugins","text":"","category":"section"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Genie plugins are special Julia packages which extend Genie apps with powerful  functionality by providing specific integration points. A Genie plugin is made of two parts:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"the Julia package exposing the core functionality of the plugin, and\na files payload (controllers, modules, views, database migrations, initializers, etc) which are copied into the client app upon plugin installation.","category":"page"},{"location":"guides/Genie_Plugins.html#Using-Genie-Plugins","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"","category":"section"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The plugins are created by third party Genie/Julia developers. Take this simple demo plugin as an example: https://github.com/GenieFramework/HelloPlugin.jl","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"In order to add the plugin to an existing Genie app you need to:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Add the HelloPlugin package to your Genie app, just like any other Julia Pkg dependency:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"pkg> add https://github.com/GenieFramework/HelloPlugin.jl","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Bring the package into scope:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"julia> using HelloPlugin","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Install the plugin (this is a one time operation, when the package is added):","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"julia> HelloPlugin.install(@__DIR__)","category":"page"},{"location":"guides/Genie_Plugins.html#Running-the-Plugin","page":"Using Genie Plugins","title":"Running the Plugin","text":"","category":"section"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The installation will add a new hello resource in app/resources/hello/ in the form of HelloController.jl and views/greet.jl.html. Also, in your Genie app's plugins/ folder you fill find a new file, helloplugin.jl (which is the plugins' initializer and is automatically loaded by Genie early in the bootstrap process).","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The helloplugin.jl initializer is defining a new route route(\"/hello\", HelloController.greet). If you restart your Genie app and navigate to /hello you will get the plugin's greeting.","category":"page"},{"location":"guides/Genie_Plugins.html#Walkthrough","page":"Using Genie Plugins","title":"Walkthrough","text":"","category":"section"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Create a new Genie app:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"julia> using Genie\n\njulia> Genie.Generator.newapp(\"Greetings\", autostart = false)","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Add the plugin as a dependency:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"julia> ]\n\npkg> add https://github.com/GenieFramework/HelloPlugin.jl","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Bring the plugin into scope and run the installer (the installer should be run only once, upon adding the plugin package)","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"julia> using HelloPlugin\n\njulia> HelloPlugin.install(@__DIR__)","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The installation might show a series of logging messages informing about failure to copy some files or create folders. Normally it's nothing to worry about: these are due to the fact that some of the files and folders already exist in the app so they are not overwritten by the installer.","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Restart the app to load the plugin:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"julia> exit()\n\n$ cd Greetings/\n\n$ bin/repl","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Start the server:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"julia> up()","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Navigate to http://localhost:8000/hello to get the greeting from the plugin.","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"","category":"page"},{"location":"guides/Genie_Plugins.html#Developing-Genie-Plugins","page":"Using Genie Plugins","title":"Developing Genie Plugins","text":"","category":"section"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"GeniePlugins.jl is a Genie plugin that provides an efficient scaffold for creating a new Genie plugin packages. All you need to do is run this code to create your plugin project:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"julia> using Genie, GeniePlugins\n\njulia> GeniePlugins.scaffold(\"GenieHelloPlugin\") # use the actual name of your plugin\nGenerating project file\nGenerating project GenieHelloPlugin:\n    GenieHelloPlugin/Project.toml\n    GenieHelloPlugin/src/GenieHelloPlugin.jl\nScaffolding file structure\n\nAdding dependencies\n  Updating registry at `~/.julia/registries/General`\n  Updating git-repo `https://github.com/JuliaRegistries/General.git`\n  Updating git-repo `https://github.com/genieframework/Genie.jl`\n Resolving package versions...\n  # output truncated\n\nInitialized empty Git repository in /Users/adrian/GenieHelloPlugin/.git/\n[master (root-commit) 30533f9] initial commit\n 11 files changed, 261 insertions(+)\n\nCongratulations, your plugin is ready!\nYou can use this default installation function in your plugin's module:\n  function install(dest::String; force = false)\n    src = abspath(normpath(joinpath(@__DIR__, \"..\", GeniePlugins.FILES_FOLDER)))\n\n    for f in readdir(src)\n      isdir(f) || continue\n      GeniePlugins.install(joinpath(src, f), dest, force = force)\n    end\n  end","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The scaffold command will create the file structure of your plugin, including the Julia project, the .git repo, and the file structure for integrating with Genie apps:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":".\n├── Manifest.toml\n├── Project.toml\n├── files\n│   ├── app\n│   │   ├── assets\n│   │   │   ├── css\n│   │   │   ├── fonts\n│   │   │   └── js\n│   │   ├── helpers\n│   │   ├── layouts\n│   │   └── resources\n│   ├── db\n│   │   ├── migrations\n│   │   └── seeds\n│   ├── lib\n│   ├── plugins\n│   │   └── geniehelloplugin.jl\n│   └── task\n└── src\n    └── GenieHelloPlugin.jl","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The core of the functionality should go into the src/GenieHelloPlugin.jl module. While everything placed within the files/ folder should be copied into the corresponding folders of the Genie apps installing the plugin. You can add resources, controllers, models, database migrations, views, assets and any other files inside the files/ folder to be copied.","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The scaffolding will also create a plugins/geniehelloplugin.jl file - this is the initializer of the plugin and is meant to bootstrap the functionality of the plugin. Here you can load dependencies, define routes, set up configuration, etc.","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"Because any Genie plugin is a Julia Pkg project, you can add any other Julia packages as dependencies.","category":"page"},{"location":"guides/Genie_Plugins.html#The-Installation-Function","page":"Using Genie Plugins","title":"The Installation Function","text":"","category":"section"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The main module file, present in src/GenieHelloPlugin.jl should also expose an install(path::String) function, responsible for copying the files of your plugin into the user Genie app. The path param is the root of the Genie app where the installation will be performed.","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"As copying the plugin's files is a standard but tedious operation, Genie provides some helpers to get you started. The GeniePlugins module provides an install(path::String, dest::String; force = false) which can be used for copying the plugin's files to their destination in the app.","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"The scaffolding function will also recommend a default install(path::String) that you can use in your module:","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"function install(dest::String; force = false)\n  src = abspath(normpath(joinpath(@__DIR__, \"..\", GeniePlugins.FILES_FOLDER)))\n\n  for f in readdir(src)\n    isdir(f) || continue\n    GeniePlugins.install(joinpath(src, f), dest, force = force)\n  end\nend","category":"page"},{"location":"guides/Genie_Plugins.html","page":"Using Genie Plugins","title":"Using Genie Plugins","text":"You can use it as a starting point - and add any other specific extra logic to it.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#Migrating-Genie-apps-from-v4-to-v5","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie apps from v4 to v5","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Genie v5 is a major update to the Genie framework that introduces many new features and improvements. These include a nimble core architecture with many previously bundled features being now moved to stand-alone packages (cache, deployment, etc), the removal of legacy code and APIs, performance refactoring, restructuring of the core framework and APIs, and many other reliability, usability and performance improvements.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#Support-for-Genie-v4","page":"Migrating Genie v4 apps to Genie v5","title":"Support for Genie v4","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Despite introducing breaking changes, the upgrade from Genie v4 to v5 should be quite straightforward and should not take a long time. All users are recommended to upgrade to Genie v5.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"While we will not backport compatible features from Genie 5 to Genie 4, we will continue to support the v4 API for the foreseeable period of time and we will backport compatible security patches.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#Genie-v4-and-Julia-v1.8-compatibility-issue:-modules_warned_for-not-defined","page":"Migrating Genie v4 apps to Genie v5","title":"Genie v4 and Julia v1.8 compatibility issue: modules_warned_for not defined","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Due to an issue caused by the removal of some APIs in Julia 1.8, Genie v4 apps can not run on Julia 1.8. This results in a LoadError: UndefVarError: modules_warned_for not defined exception when loading a Genie v4 app on Julia 1.8 and above.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#Addressing-the-issue:-modules_warned_for-not-defined","page":"Migrating Genie v4 apps to Genie v5","title":"Addressing the issue: modules_warned_for not defined","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"The obvious and immediate solution is to simply go ahead and comment out the offending line – the exact line will depend on your specific app, but it's line 4 in bootstrap.jl and starts with push!(Base.modules_warned_for, Base.PkgId.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"However, this only eliminates the source of the exception. But it's possible that the Genie v4 app will still not run on Julia 1.8 and above as is, due to the fact that the loading of resources (controllers and models) in the app no longer works. So if the app does not work, mainly due to exceptions mentioning that the app does not have some controller or model \"in its dependencies\", this is the reason. The only way to fix this is to upgrade to Genie v5 and update your app to support Genie v5 by following the following steps.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#Upgrade-from-v4-to-v5","page":"Migrating Genie v4 apps to Genie v5","title":"Upgrade from v4 to v5","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"However, some of these deep changes come at the cost of breaking compatibility with older apps that were developed using Genie v4. This guide will walk you through the process of migrating a Genie app from v4 to v5. The following changes need to be made to various Genie v4 application files. Each section indicates the file that needs to be modified.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-config/secrets.jl","page":"Migrating Genie v4 apps to Genie v5","title":"1. config/secrets.jl","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"In Genie v5, Genie.secret_token! has been moved to a dedicated module called Secrets, so the config/secrets.jl file needs to be updated to include the new module.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Genie.Secrets.secret_token!(\"<your-secret-token>\")","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-config/initializers/ssl.jl","page":"Migrating Genie v4 apps to Genie v5","title":"2. config/initializers/ssl.jl","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Genie v5 completely removed the legacy config/initializers/ssl.jl file. This provided a crude way of setting up SSL support for local development that was limited and not reliable. In Genie v5 the recommended approach is to set up SSL at the proxy server level, for example by using Caddy, Nginx, or Apache as a reverse proxy.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"So just remove the config/initializers/ssl.jl file.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"julia> rm(\"config/initializers/ssl.jl\")","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-app/helpers/ViewHelper.jl","page":"Migrating Genie v4 apps to Genie v5","title":"3. app/helpers/ViewHelper.jl","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"The output_flash function defined in the ViewHelper file uses the flash function which relied on Genie.Session in Genie v4. In Genie v5, Genie.Session has been moved to a dedicated plugin called GenieSession.jl. In addition, GenieSession.jl is designed to support multiple backends for session storage (file system, database, etc) so we also need to add a backend, such as GenieSessionFileSession.jl.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"If your app uses the output_flash function then you need to add GenieSession.jl as a dependency of your app and update the ViewHelper file to use the GenieSession.Flash.flash function.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"module ViewHelper\n\nusing GenieSession, GenieSessionFileSession, GenieSession.Flash\n\nexport output_flash\n\nfunction output_flash(flashtype::String = \"danger\") :: String\n  flash_has_message() ? \"\"\"<div class=\"alert alert-$flashtype alert-dismissable\">$(flash())</div>\"\"\" : \"\"\nend\n\nend","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"If your app does not use output_flash then you can just remove the ViewHelper file.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"julia> rm(\"app/helpers/ViewHelper.jl\")","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-All-references-to-app-resources-(controllers-and-models)","page":"Migrating Genie v4 apps to Genie v5","title":"4. All references to app resources (controllers and models)","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"In Genie v5, the app resources such as controllers and models were accessible directly in routes.jl and in any other resource. For instance, let's say that we have:","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"a controller called HomeController\na model called Home\nour app (aka our project's main module) is called WelcomeHome (meaning that we have a file src/WelcomeHome.jl)","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"In v4 we could access them directly in routes.jl (or in other controllers and models) as using HomeController, Home.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"However, in Genie v5 all the app's resources are scoped to the app's main module. So we need to update all references to the app resources to use the app's main module, meaning that in v5 we'll need using WelcomeHome.HomeController, WelcomeHome.Home.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"We can also dynamically reference the app's main module by using ..Main.UserApp (so ..Main.UserApp is the same as WelcomeHome in our example).","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Cache","page":"Migrating Genie v4 apps to Genie v5","title":"5. Genie.Cache","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"In Genie v5, the Genie.Cache module has been moved to a dedicated plugin called GenieCache.jl. This means that all references to Genie.Cache need to be updated to use  GenieCache.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"This change was made to provide a leaner Genie core, making caching features opt-in. But also to allow the independent development of the caching features, independent from Genie itself.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Cache.FileCache","page":"Migrating Genie v4 apps to Genie v5","title":"6. Genie.Cache.FileCache","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Starting with Genie 5, the file-based caching functionality provided by Genie.Cache.FileCache has been moved to a dedicated plugin called GenieCacheFileCache.jl. This means that all references to Genie.Cache.FileCache need to be updated to use GenieCacheFileCache. The GenieCacheFileCache plugin is dependent on the GenieCache package and it extends the functionality of GenieCache.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"In the future, additional cache backends will be released.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Session","page":"Migrating Genie v4 apps to Genie v5","title":"7. Genie.Session","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"As mentioned above, the Genie.Session module has been moved to a dedicated plugin called GenieSession.jl. This means that all references to Genie.Session need to be updated to use GenieSession.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"This change was made to provide a leaner Genie core, making session related features opt-in. But also to allow the independent development of the session features, independent from Genie itself.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Session.FileSession","page":"Migrating Genie v4 apps to Genie v5","title":"8. Genie.Session.FileSession","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Starting with Genie 5, the file-based session storage provided by Genie.Session.FileSession has been moved to a dedicated plugin called GenieSessionFileSession.jl. This means that all references to Genie.Session.FileSession need to be updated to use GenieSessionFileSession. The GenieSessionFileSession plugin is dependent on the GenieSession package and it extends the functionality of GenieSession.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"In the future, additional session storage backends will be released.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Deploy","page":"Migrating Genie v4 apps to Genie v5","title":"9. Genie.Deploy","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Similar to Genie.Session and Genie.Cache, the Genie.Deploy module has been moved to a dedicated plugin called GenieDeploy.jl. This means that all references to Genie.Deploy need to be updated to use GenieDeploy.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Deploy.Docker","page":"Migrating Genie v4 apps to Genie v5","title":"10. Genie.Deploy.Docker","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Starting with Genie 5, the Docker deployment functionality provided by Genie.Deploy.Docker has been moved to a dedicated plugin called GenieDeployDocker.jl. This means that all references to Genie.Deploy.Docker need to be updated to use GenieDeployDocker. The GenieDeployDocker plugin is dependent on the GenieDeploy package and it extends the functionality of GenieDeploy.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Deploy.Heroku","page":"Migrating Genie v4 apps to Genie v5","title":"11. Genie.Deploy.Heroku","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Starting with Genie 5, the Heroku deployment functionality provided by Genie.Deploy.Heroku has been moved to a dedicated plugin called GenieDeployHeroku.jl. This means that all references to Genie.Deploy.Heroku need to be updated to use GenieDeployHeroku. The GenieDeployHeroku plugin is dependent on the GenieDeploy package and it extends the functionality of GenieDeploy.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Deploy.JuliaHub","page":"Migrating Genie v4 apps to Genie v5","title":"12. Genie.Deploy.JuliaHub","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Starting with Genie 5, the JuliaHub deployment functionality provided by Genie.Deploy.JuliaHub has been moved to a dedicated plugin called GenieDeployJuliaHub.jl. This means that all references to Genie.Deploy.JuliaHub need to be updated to use GenieDeployJuliaHub. The GenieDeployJuliaHub plugin is dependent on the GenieDeploy package and it extends the functionality of GenieDeploy.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.App","page":"Migrating Genie v4 apps to Genie v5","title":"13. Genie.App","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"The Genie.App module has been removed in v5 and its API has been moved to the Genie module.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.AppServer","page":"Migrating Genie v4 apps to Genie v5","title":"14. Genie.AppServer","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"The Genie.AppServer module has been renamed to Genie.Server in v5.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.Plugins","page":"Migrating Genie v4 apps to Genie v5","title":"15. Genie.Plugins","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Starting with Genie 5, the Genie.Plugins functionality has been moved to a dedicated plugin called GeniePlugins.jl. This means that all references to Genie.Plugins need to be updated to use GeniePlugins. The GeniePlugins plugin is dependent on the Genie package and it extends the functionality of Genie.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Genie.new-family-of-functions","page":"Migrating Genie v4 apps to Genie v5","title":"16. Genie.new family of functions","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"All the Genie.new functions have been moved to Genie.Generator in v5.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-No-automatic-import-of-Genie-in-Main-(at-REPL)","page":"Migrating Genie v4 apps to Genie v5","title":"17. No automatic import of Genie in Main (at REPL)","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Genie v4 apps would automatically import Genie in Main, so that Genie would be readily available at the REPL. Starting with Genie 5, this is no longer the case and at the app's REPL it's now necessary to first run julia> using Genie.","category":"page"},{"location":"guides/Migrating_from_v4_to_v5.html#.-Other","page":"Migrating Genie v4 apps to Genie v5","title":"18. Other","text":"","category":"section"},{"location":"guides/Migrating_from_v4_to_v5.html","page":"Migrating Genie v4 apps to Genie v5","title":"Migrating Genie v4 apps to Genie v5","text":"Genie 5 also changes or removes other APIs which can be generally be considered as internal. If you find other important breaking changes that have been missed, please open an issue on the Genie GitHub repository or just edit this file and submit a PR.","category":"page"},{"location":"API/webchannels.html","page":"WebChannels","title":"WebChannels","text":"CurrentModule = WebChannels","category":"page"},{"location":"API/webchannels.html","page":"WebChannels","title":"WebChannels","text":"ChannelNotFoundException\nChannelClient\nChannelClientsCollection\nChannelSubscriptionsCollection\nMessagePayload\nChannelMessage\nCLIENTS\nSUBSCRIPTIONS\nclients\nsubscriptions\nwebsockets\nchannels\nconnected_clients\ndisconnected_clients\nsubscribe\nunsubscribe\nunsubscribe_client\nunsubscribe_disconnected_clients\npush_subscription\npop_subscription\nbroadcast\nmessage","category":"page"},{"location":"API/webchannels.html#Genie.WebChannels.ChannelClientsCollection","page":"WebChannels","title":"Genie.WebChannels.ChannelClientsCollection","text":"Dict([itr])\n\nDict{K,V}() constructs a hash table with keys of type K and values of type V. Keys are compared with isequal and hashed with hash.\n\nGiven a single iterable argument, constructs a Dict whose key-value pairs are taken from 2-tuples (key,value) generated by the argument.\n\nExamples\n\njulia> Dict([(\"A\", 1), (\"B\", 2)])\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\nAlternatively, a sequence of pair arguments may be passed.\n\njulia> Dict(\"A\"=>1, \"B\"=>2)\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\n\n\n\n\n","category":"type"},{"location":"API/webchannels.html#Genie.WebChannels.ChannelSubscriptionsCollection","page":"WebChannels","title":"Genie.WebChannels.ChannelSubscriptionsCollection","text":"Dict([itr])\n\nDict{K,V}() constructs a hash table with keys of type K and values of type V. Keys are compared with isequal and hashed with hash.\n\nGiven a single iterable argument, constructs a Dict whose key-value pairs are taken from 2-tuples (key,value) generated by the argument.\n\nExamples\n\njulia> Dict([(\"A\", 1), (\"B\", 2)])\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\nAlternatively, a sequence of pair arguments may be passed.\n\njulia> Dict(\"A\"=>1, \"B\"=>2)\nDict{String, Int64} with 2 entries:\n  \"B\" => 2\n  \"A\" => 1\n\n\n\n\n\n","category":"type"},{"location":"API/webchannels.html#Genie.WebChannels.subscribe","page":"WebChannels","title":"Genie.WebChannels.subscribe","text":"Subscribes a web socket client ws to channel.\n\n\n\n\n\n","category":"function"},{"location":"API/webchannels.html#Genie.WebChannels.unsubscribe","page":"WebChannels","title":"Genie.WebChannels.unsubscribe","text":"Unsubscribes a web socket client ws from channel.\n\n\n\n\n\n","category":"function"},{"location":"API/webchannels.html#Genie.WebChannels.unsubscribe_client","page":"WebChannels","title":"Genie.WebChannels.unsubscribe_client","text":"Unsubscribes a web socket client ws from all the channels.\n\n\n\n\n\n","category":"function"},{"location":"API/webchannels.html#Genie.WebChannels.unsubscribe_disconnected_clients","page":"WebChannels","title":"Genie.WebChannels.unsubscribe_disconnected_clients","text":"unsubscribedisconnectedclients() :: ChannelClientsCollection\n\nUnsubscribes clients which are no longer connected.\n\n\n\n\n\n","category":"function"},{"location":"API/webchannels.html#Genie.WebChannels.push_subscription","page":"WebChannels","title":"Genie.WebChannels.push_subscription","text":"Adds a new subscription for client to channel.\n\n\n\n\n\n","category":"function"},{"location":"API/webchannels.html#Genie.WebChannels.pop_subscription","page":"WebChannels","title":"Genie.WebChannels.pop_subscription","text":"Removes the subscription of client to channel.\n\n\n\n\n\nRemoves all subscriptions of client.\n\n\n\n\n\n","category":"function"},{"location":"API/webchannels.html#Genie.WebChannels.broadcast","page":"WebChannels","title":"Genie.WebChannels.broadcast","text":"Pushes msg (and payload) to all the clients subscribed to the channels in channels, with the exception of except.\n\n\n\n\n\nPushes msg (and payload) to all the clients subscribed to the channels in channels, with the exception of except.\n\n\n\n\n\n","category":"function"},{"location":"API/webchannels.html#Genie.WebChannels.message","page":"WebChannels","title":"Genie.WebChannels.message","text":"Writes msg to web socket for client.\n\n\n\n\n\n","category":"function"},{"location":"api/configuration.html","page":"-","title":"-","text":"CurrentModule = Configuration","category":"page"},{"location":"api/configuration.html","page":"-","title":"-","text":"buildpath\nconfig!\nenv\nisdev\nisprod\nistest\npkginfo\nSettings","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html#Loading-and-starting-Genie-apps","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"","category":"section"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"Genie apps are Julia projects that are composed of multiple modules distributed over multiple files. Loading a Genie app will bring into scope all the app's files, including the main app module, controllers, models, etcetera.","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html#Starting-a-Genie-REPL-session-MacOS-/-Linux","page":"Loading and starting Genie apps","title":"Starting a Genie REPL session MacOS / Linux","text":"","category":"section"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"The quickest way to load an existing app in an interactive REPL is by executing bin/repl in the os shell, while in the app's root folder.","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"$ bin/repl","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"The Genie app will be loaded.","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"In order to start the web server, you can next execute:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"julia> up()","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"If you want to directly start the server without having access to the interactive REPL, use bin/server instead of bin/repl:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"$ bin/server","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"This will automatically start the web server in non interactive mode.","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html#Starting-a-Genie-REPL-on-Windows","page":"Loading and starting Genie apps","title":"Starting a Genie REPL on Windows","text":"","category":"section"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"On Windows the workflow is similar to macOS and Linux, but dedicated Windows scripts, repl.bat, server.bat are provided inside the project folder, within the bin/ directory. Double click them or execute them in the os shell (cmd, Windows Terminal, PowerShell, etc) to start an interactive REPL session or a server session, respectively, as explained in the previous paragraphs (the *nix and the Windows scripts run int the same way).","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"HEADS UP","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"It is possible that the scripts in the bin/ folder are missing - this is usually the case if the app was generated on an operating system (ex *nix) and ported to a different one (ex Windows). You can create them at anytime by running the generator in the Genie/Julia REPL (at the root of the Genie project).","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"To generate the Windows scripts:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"julia> using Genie\n\njulia> Genie.Generator.setup_windows_bin_files()","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"And for the *nix scripts:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"julia> Genie.Generator.setup_nix_bin_files()","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"Alternatively, we can pass the path where we want the files to be created as the argument to setup_*_bin_files:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"julia> Genie.Generator.setup_windows_bin_files(\"path/to/your/Genie/project\")","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html#REPL-/-Jupyter-/-Pluto-/-VSCode-/-other-Julia-environment","page":"Loading and starting Genie apps","title":"REPL / Jupyter / Pluto / VSCode / other Julia environment","text":"","category":"section"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"You might need to make the local package environment available, if it's not already activated:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"using Pkg\nPkg.activate(\".\")","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"Then:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"using Genie\n\nGenie.loadapp()","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"This will assume that we're already in the app's root folder, and load the app (in other words that the bootstrap.jl file is in the current working directory). Otherwise you can also pass the path to the Genie app's folder as the argument for loadapp.","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"julia> Genie.loadapp(\"path/to/your/Genie/project\")","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html#Manual-loading-in-Julia's-REPL","page":"Loading and starting Genie apps","title":"Manual loading in Julia's REPL","text":"","category":"section"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"In order to load a Genie app within an open Julia REPL session, first make sure that you're in the root dir of a Genie app. This is the project's folder and you can tell by the fact that there should be a bootstrap.jl file, plus Julia's Project.toml and Manifest.toml files, amongst others. You can julia> cd(...) or shell> cd ... your way into the folder of the Genie app.","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"Next, from within the active Julia REPL session, we have to activate the local package environment:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"julia> ] # enter pkg> mode\n\npkg> activate .","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"Then, back to the julian prompt, run the following to load the Genie app:","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"julia> using Genie\n\njulia> Genie.loadapp()","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"The app's environment will now be loaded.","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"In order to start the web server execute","category":"page"},{"location":"tutorials/10--Loading_Genie_Apps.html","page":"Loading and starting Genie apps","title":"Loading and starting Genie apps","text":"julia> up()","category":"page"},{"location":"API/configuration.html","page":"Configuration","title":"Configuration","text":"CurrentModule = Configuration","category":"page"},{"location":"API/configuration.html","page":"Configuration","title":"Configuration","text":"buildpath\nconfig!\nenv\nisdev\nisprod\nistest\npkginfo\nSettings","category":"page"},{"location":"API/configuration.html#Genie.Configuration.buildpath","page":"Configuration","title":"Genie.Configuration.buildpath","text":"buildpath() :: String\n\nConstructs the temp dir where Genie's view files are built.\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#Genie.Configuration.config!","page":"Configuration","title":"Genie.Configuration.config!","text":"config!(; kwargs...)\n\nUpdates Genie.confg using the provided keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#Genie.Configuration.env","page":"Configuration","title":"Genie.Configuration.env","text":"env() :: String\n\nReturns the current Genie environment.\n\nExamples\n\njulia> Configuration.env()\n\"dev\"\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#Genie.Configuration.isdev","page":"Configuration","title":"Genie.Configuration.isdev","text":"isdev()  :: Bool\n\nSet of utility functions that return whether or not the current environment is development, production or testing.\n\nExamples\n\njulia> Configuration.isdev()\ntrue\n\njulia> Configuration.isprod()\nfalse\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#Genie.Configuration.isprod","page":"Configuration","title":"Genie.Configuration.isprod","text":"isprod() :: Bool\n\nSet of utility functions that return whether or not the current environment is development, production or testing.\n\nExamples\n\njulia> Configuration.isdev()\ntrue\n\njulia> Configuration.isprod()\nfalse\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#Genie.Configuration.istest","page":"Configuration","title":"Genie.Configuration.istest","text":"istest() :: Bool\n\nSet of utility functions that return whether or not the current environment is development, production or testing.\n\nExamples\n\njulia> Configuration.isdev()\ntrue\n\njulia> Configuration.isprod()\nfalse\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#Genie.Configuration.pkginfo","page":"Configuration","title":"Genie.Configuration.pkginfo","text":"pkginfo(pkg::String)\n\nReturns installed package information for pkg\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#Genie.Configuration.Settings","page":"Configuration","title":"Genie.Configuration.Settings","text":"mutable struct Settings\n\nApp configuration - sets up the app's defaults. Individual options are overwritten in the corresponding environment file.\n\nArguments\n\nserver_port::Int: the port for running the web server (default 8000)\nserver_host::String: the host for running the web server (default \"127.0.0.1\")\nserver_document_root::String: path to the document root (default \"public/\")\nserver_handle_static_files::Bool: if true, Genie will also serve static files. In production, it is recommended to serve static files with a web server like Nginx.\nserver_signature::String: Genie's signature used for tagging the HTTP responses. If empty, it will not be added.\napp_env::String: the environment in which the app is running (dev, test, or prod)\ncors_headers::Dict{String,String}: default Access-Control-* CORS settings\ncors_allowed_origins::Vector{String}: allowed origin hosts for CORS settings\nlog_level::Logging.LogLevel: logging severity level\nlog_to_file::Bool: if true, information will be logged to file besides REPL\nlog_requests::Bool: if true, requests will be automatically logged\ninflector_irregulars::Vector{Tuple{String,String}}: additional irregular singular-plural forms to be used by the Inflector\nrun_as_server::Bool: when true the server thread is launched synchronously to avoid that the script exits\nwebsockets_server::Bool: if true, the websocket server is also started together with the web server\nwebsockets_port::Int: the port for the websocket server (default server_port)\ninitializers_folder::String: the folder where the initializers are located (default \"initializers/\")\npath_config::String: the path to the configurations folder (default \"config/\")\npath_env::String: the path to the environment files (default \"<path_config>/env/\")\npath_app::String: the path to the app files (default \"app/\")\nhtml_parser_close_tag::String: default \" /\". Can be changed to an empty string \"\" so the single tags would not be closed.\nwebchannels_keepalive_frequency::Int: default 30000. Frequency in miliseconds to send keepalive messages to webchannel/websocket to keep the connection alive. Set to 0 to disable keepalive messages.\n\n\n\n\n\n","category":"type"},{"location":"tutorials/13--Initializers.html#Customized-application-configuration-with-initializers","page":"Auto-loading configuration code with initializers","title":"Customized application configuration with initializers","text":"","category":"section"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"Initializers are plain Julia files which are loaded early in the application life-cycle (before routes, controller, or models). They are designed to implement configuration code which is used by other parts of the application (like database connections, logging settings, etc).","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"Initializers should be placed within the config/initializers/ folder and they will be automatically loaded by Genie into the app.","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"If your configuration is environment dependent (like a database connection which is different between dev and prod environments), it should be added to the corresponding config/env/*.jl file.","category":"page"},{"location":"tutorials/13--Initializers.html#Best-practices","page":"Auto-loading configuration code with initializers","title":"Best practices","text":"","category":"section"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"You can name the initializers as you wish (ideally a descriptive name, like redis.jl for connecting to a Redis DB).\nDon't use uppercase names unless you define a module (in order to respect Julia's naming practices).\nKeep your initializer files small and focused, so they serve only one purpose.\nYou can add as many initializers as you need.\nDo not abuse them, they are not meant to host complex code - app logic should be in models and controllers.","category":"page"},{"location":"tutorials/13--Initializers.html#Load-order","page":"Auto-loading configuration code with initializers","title":"Load order","text":"","category":"section"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"The initializers are loaded in the order they are read from the file system. If you have initializers which depend on other initializers, this is most likely a sign that you need to refactor using a model or a library file.","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"HEADS UP","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"Library files are Julia files which provide distinct functionality and can be placed in the lib/ folder where they are also automatically loaded by Genie. If the lib/ folder does not exist, you can create it yourself.","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"","category":"page"},{"location":"tutorials/13--Initializers.html#Scope","page":"Auto-loading configuration code with initializers","title":"Scope","text":"","category":"section"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"All the definitions (variables, constants, functions, modules, etc) added to initializer files are loaded into your app's module. So if your app is called MyGenieApp, the definitions will be available under the MyGenieApp module.","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"HEADS UP","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"Given that your app's name is variable, you can also access your app's module through the Main.UserApp constant. So all the definitions added to initializers can also be accessed through the Main.UserApp module.","category":"page"},{"location":"tutorials/13--Initializers.html","page":"Auto-loading configuration code with initializers","title":"Auto-loading configuration code with initializers","text":"","category":"page"},{"location":"api/loader.html","page":"-","title":"-","text":"CurrentModule = Loader","category":"page"},{"location":"api/loader.html","page":"-","title":"-","text":"autoload\nbootstrap\ndefault_context\nimportenv\nload\nload_helpers\nload_initializers\nload_libs\nload_plugins\nload_resources\nload_routes","category":"page"},{"location":"API/router.html","page":"Router","title":"Router","text":"CurrentModule = Router","category":"page"},{"location":"API/router.html","page":"Router","title":"Router","text":"Route\nChannel\nRouter.show\nParams\nispayload\nroute_request\nroute_ws_request\nRouter.push!\nroute\nchannel\nroutename\nchannelname\nbaptizer\nnamed_routes\nroutes\nnamed_channels\nchannels\nget_route\nroutes\nchannels\ndelete!\nto_link\ntolink\nlink_to\nlinkto\ntoroute\nroute_params_to_dict\naction_controller_params\nrun_hook\nmatch_routes\nmatch_channels\nparse_route\nparse_channel\nextract_uri_params\nextract_get_params\nextract_post_params\nextract_request_params\ncontent_type\ncontent_length\nrequest_type_is\nrequest_type\nnested_keys\nsetup_base_params\nto_response\nparams\n_params_\nrequest\nresponse_type\nappend_to_routes_file\nis_static_file\nto_uri\nescape_resource_path\nserve_static_file\npreflight_response\nresponse_mime\nfile_path\nfilepath\npathify\nfile_extension\nfile_headers\normatch","category":"page"},{"location":"API/router.html#Genie.Router.Route","page":"Router","title":"Genie.Router.Route","text":"mutable struct Route\n\nRepresentation of a route object\n\n\n\n\n\n","category":"type"},{"location":"API/router.html#Genie.Router.Channel","page":"Router","title":"Genie.Router.Channel","text":"mutable struct Channel\n\nRepresentation of a WebSocket Channel object\n\n\n\n\n\n","category":"type"},{"location":"API/router.html#Base.show","page":"Router","title":"Base.show","text":"show([io::IO = stdout], x)\n\nWrite a text representation of a value x to the output stream io. New types T should overload show(io::IO, x::T). The representation used by show generally includes Julia-specific formatting and type information, and should be parseable Julia code when possible.\n\nrepr returns the output of show as a string.\n\nTo customize human-readable text output for objects of type T, define show(io::IO, ::MIME\"text/plain\", ::T) instead. Checking the :compact IOContext property of io in such methods is recommended, since some containers show their elements by calling this method with :compact => true.\n\nSee also print, which writes un-decorated representations.\n\nExamples\n\njulia> show(\"Hello World!\")\n\"Hello World!\"\njulia> print(\"Hello World!\")\nHello World!\n\n\n\n\n\nshow(io::IO, mime, x)\n\nThe display functions ultimately call show in order to write an object x as a given mime type to a given I/O stream io (usually a memory buffer), if possible. In order to provide a rich multimedia representation of a user-defined type T, it is only necessary to define a new show method for T, via: show(io, ::MIME\"mime\", x::T) = ..., where mime is a MIME-type string and the function body calls write (or similar) to write that representation of x to io. (Note that the MIME\"\" notation only supports literal strings; to construct MIME types in a more flexible manner use MIME{Symbol(\"\")}.)\n\nFor example, if you define a MyImage type and know how to write it to a PNG file, you could define a function show(io, ::MIME\"image/png\", x::MyImage) = ... to allow your images to be displayed on any PNG-capable AbstractDisplay (such as IJulia). As usual, be sure to import Base.show in order to add new methods to the built-in Julia function show.\n\nTechnically, the MIME\"mime\" macro defines a singleton type for the given mime string, which allows us to exploit Julia's dispatch mechanisms in determining how to display objects of any given type.\n\nThe default MIME type is MIME\"text/plain\". There is a fallback definition for text/plain output that calls show with 2 arguments, so it is not always necessary to add a method for that case. If a type benefits from custom human-readable output though, show(::IO, ::MIME\"text/plain\", ::T) should be defined. For example, the Day type uses 1 day as the output for the text/plain MIME type, and Day(1) as the output of 2-argument show.\n\nContainer types generally implement 3-argument show by calling show(io, MIME\"text/plain\"(), x) for elements x, with :compact => true set in an IOContext passed as the first argument.\n\n\n\n\n\nBase.show(io::IO, ex::RuntimeException)\n\nCustom printing of RuntimeException\n\n\n\n\n\nBase.show(io::IO, ex::FileExistsException)\n\nCustom printing for FileExistsException\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.Params","page":"Router","title":"Genie.Router.Params","text":"mutable struct Params{T}\n\nCollection of key value pairs representing the parameters of the current request - response cycle.\n\n\n\n\n\n","category":"type"},{"location":"API/router.html#Genie.Router.ispayload","page":"Router","title":"Genie.Router.ispayload","text":"ispayload(req::HTTP.Request)\n\nTrue if the request can carry a payload - that is, it's a POST, PUT, or PATCH request\n\n\n\n\n\nispayload()\n\nTrue if the request can carry a payload - that is, it's a POST, PUT, or PATCH request\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.route_request","page":"Router","title":"Genie.Router.route_request","text":"route_request(req::Request, res::Response) :: Response\n\nFirst step in handling a request: sets up params collection, handles query vars, negotiates content.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.route_ws_request","page":"Router","title":"Genie.Router.route_ws_request","text":"route_ws_request(req::Request, msg::String, ws_client::HTTP.WebSockets.WebSocket) :: String\n\nFirst step in handling a web socket request: sets up params collection, handles query vars.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Base.push!","page":"Router","title":"Base.push!","text":"push!(collection, items...) -> collection\n\nInsert one or more items in collection. If collection is an ordered container, the items are inserted at the end (in the given order).\n\nExamples\n\njulia> push!([1, 2, 3], 4, 5, 6)\n6-element Vector{Int64}:\n 1\n 2\n 3\n 4\n 5\n 6\n\nIf collection is ordered, use append! to add all the elements of another collection to it. The result of the preceding example is equivalent to append!([1, 2, 3], [4, 5, 6]). For AbstractSet objects, union! can be used instead.\n\nSee sizehint! for notes about the performance model.\n\nSee also pushfirst!.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.route","page":"Router","title":"Genie.Router.route","text":"Named Genie routes constructors.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.channel","page":"Router","title":"Genie.Router.channel","text":"Named Genie channels constructors.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.routename","page":"Router","title":"Genie.Router.routename","text":"routename(params) :: Symbol\n\nComputes the name of a route.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.channelname","page":"Router","title":"Genie.Router.channelname","text":"channelname(params) :: Symbol\n\nComputes the name of a channel.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.baptizer","page":"Router","title":"Genie.Router.baptizer","text":"baptizer(params::Union{Route,Channel}, parts::Vector{String}) :: Symbol\n\nGenerates default names for routes and channels.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.named_routes","page":"Router","title":"Genie.Router.named_routes","text":"The list of the defined named routes.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.routes","page":"Router","title":"Genie.Router.routes","text":"routes() :: Vector{Route}\n\nReturns a vector of defined routes.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.named_channels","page":"Router","title":"Genie.Router.named_channels","text":"named_channels() :: Dict{Symbol,Any}\n\nThe list of the defined named channels.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.channels","page":"Router","title":"Genie.Router.channels","text":"channels() :: Vector{Channel}\n\nReturns a vector of defined channels.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.get_route","page":"Router","title":"Genie.Router.get_route","text":"Gets the Route correspoding to routename\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.delete!","page":"Router","title":"Genie.Router.delete!","text":"delete!(route_name::Symbol)\n\nRemoves the route with the corresponding name from the routes collection and returns the collection of remaining routes.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.to_link","page":"Router","title":"Genie.Router.to_link","text":"Generates the HTTP link corresponding to route_name using the parameters in d.\n\n\n\n\n\nGenerates the HTTP link corresponding to route_name using the parameters in route_params.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.tolink","page":"Router","title":"Genie.Router.tolink","text":"Generates the HTTP link corresponding to route_name using the parameters in d.\n\n\n\n\n\nGenerates the HTTP link corresponding to route_name using the parameters in route_params.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.link_to","page":"Router","title":"Genie.Router.link_to","text":"Generates the HTTP link corresponding to route_name using the parameters in d.\n\n\n\n\n\nGenerates the HTTP link corresponding to route_name using the parameters in route_params.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.linkto","page":"Router","title":"Genie.Router.linkto","text":"Generates the HTTP link corresponding to route_name using the parameters in d.\n\n\n\n\n\nGenerates the HTTP link corresponding to route_name using the parameters in route_params.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.toroute","page":"Router","title":"Genie.Router.toroute","text":"Generates the HTTP link corresponding to route_name using the parameters in d.\n\n\n\n\n\nGenerates the HTTP link corresponding to route_name using the parameters in route_params.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.route_params_to_dict","page":"Router","title":"Genie.Router.route_params_to_dict","text":"route_params_to_dict(route_params)\n\nConverts the route params to a Dict.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.action_controller_params","page":"Router","title":"Genie.Router.action_controller_params","text":"action_controller_params(action::Function, params::Params) :: Nothing\n\nSets up the :action_controller, :action, and :controller key - value pairs of the params collection.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.match_routes","page":"Router","title":"Genie.Router.match_routes","text":"match_routes(req::Request, res::Response, params::Params) :: Union{Route,Nothing}\n\nMatches the invoked URL to the corresponding route, sets up the execution environment and invokes the controller method.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.match_channels","page":"Router","title":"Genie.Router.match_channels","text":"match_channels(req::Request, msg::String, ws_client::HTTP.WebSockets.WebSocket, params::Params) :: String\n\nMatches the invoked URL to the corresponding channel, sets up the execution environment and invokes the channel controller method.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.parse_route","page":"Router","title":"Genie.Router.parse_route","text":"parse_route(route::String, context::Module = @__MODULE__) :: Tuple{String,Vector{String},Vector{Any}}\n\nParses a route and extracts its named params and types. context is used to access optional route parts types.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.parse_channel","page":"Router","title":"Genie.Router.parse_channel","text":"parse_channel(channel::String) :: Tuple{String,Vector{String},Vector{Any}}\n\nParses a channel and extracts its named parms and types.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.extract_uri_params","page":"Router","title":"Genie.Router.extract_uri_params","text":"extract_uri_params(uri::String, regex_route::Regex, param_names::Vector{String}, param_types::Vector{Any}, params::Params) :: Bool\n\nExtracts params from request URI and sets up the params Dict.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.extract_get_params","page":"Router","title":"Genie.Router.extract_get_params","text":"extract_get_params(uri::URI, params::Params) :: Bool\n\nExtracts query vars and adds them to the execution params Dict.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.extract_post_params","page":"Router","title":"Genie.Router.extract_post_params","text":"extract_post_params(req::Request, params::Params) :: Nothing\n\nParses POST variables and adds the to the params Dict.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.extract_request_params","page":"Router","title":"Genie.Router.extract_request_params","text":"extract_request_params(req::HTTP.Request, params::Params) :: Nothing\n\nSets up the params key-value pairs corresponding to a JSON payload.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.content_type","page":"Router","title":"Genie.Router.content_type","text":"content_type(req::HTTP.Request) :: String\n\nGets the content-type of the request.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.content_length","page":"Router","title":"Genie.Router.content_length","text":"content_length(req::HTTP.Request) :: Int\n\nGets the content-length of the request.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.request_type_is","page":"Router","title":"Genie.Router.request_type_is","text":"request_type_is(req::HTTP.Request, request_type::Symbol) :: Bool\n\nChecks if the request content-type is of a certain type.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.request_type","page":"Router","title":"Genie.Router.request_type","text":"request_type(req::HTTP.Request) :: Symbol\n\nGets the request's content type.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.nested_keys","page":"Router","title":"Genie.Router.nested_keys","text":"nested_keys(k::String, v, params::Params) :: Nothing\n\nUtility function to process nested keys and set them up in params.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.setup_base_params","page":"Router","title":"Genie.Router.setup_base_params","text":"setup_base_params(req::Request, res::Response, params::Dict{Symbol,Any}) :: Dict{Symbol,Any}\n\nPopulates params with default environment vars.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.to_response","page":"Router","title":"Genie.Router.to_response","text":"to_response(action_result) :: Response\n\nConverts the result of invoking the controller action to a Response.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.params","page":"Router","title":"Genie.Router.params","text":"function params()\n\nThe collection containing the request variables collection.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.request","page":"Router","title":"Genie.Router.request","text":"function request()\n\nThe request object.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.response_type","page":"Router","title":"Genie.Router.response_type","text":"response_type{T}(params::Dict{Symbol,T}) :: Symbol\nresponse_type(params::Params) :: Symbol\n\nReturns the content-type of the current request-response cycle.\n\n\n\n\n\nresponse_type{T}(check::Symbol, params::Dict{Symbol,T}) :: Bool\n\nChecks if the content-type of the current request-response cycle matches check.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.append_to_routes_file","page":"Router","title":"Genie.Router.append_to_routes_file","text":"append_to_routes_file(content::String) :: Nothing\n\nAppends content to the app's route file.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.is_static_file","page":"Router","title":"Genie.Router.is_static_file","text":"is_static_file(resource::String) :: Bool\n\nChecks if the requested resource is a static file.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.escape_resource_path","page":"Router","title":"Genie.Router.escape_resource_path","text":"escape_resource_path(resource::String)\n\nCleans up paths to resources.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.serve_static_file","page":"Router","title":"Genie.Router.serve_static_file","text":"serve_static_file(resource::String) :: Response\n\nReads the static file and returns the content as a Response.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.preflight_response","page":"Router","title":"Genie.Router.preflight_response","text":"preflight_response() :: HTTP.Response\n\nSets up the preflight CORS response header.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.response_mime","page":"Router","title":"Genie.Router.response_mime","text":"response_mime()\n\nReturns the MIME type of the response.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.file_path","page":"Router","title":"Genie.Router.file_path","text":"file_path(resource::String; within_doc_root = true, root = Genie.config.server_document_root) :: String\n\nReturns the path to a resource file. If within_doc_root it will automatically prepend the document root to resource.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.filepath","page":"Router","title":"Genie.Router.filepath","text":"file_path(resource::String; within_doc_root = true, root = Genie.config.server_document_root) :: String\n\nReturns the path to a resource file. If within_doc_root it will automatically prepend the document root to resource.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.pathify","page":"Router","title":"Genie.Router.pathify","text":"pathify(x) :: String\n\nReturns a proper URI path from a string x.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.file_extension","page":"Router","title":"Genie.Router.file_extension","text":"file_extension(f) :: String\n\nReturns the file extesion of f.\n\n\n\n\n\n","category":"function"},{"location":"API/router.html#Genie.Router.file_headers","page":"Router","title":"Genie.Router.file_headers","text":"file_headers(f) :: Dict{String,String}\n\nReturns the file headers of f.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/6--Working_with_POST_Payloads.html#Reading-POST-payloads","page":"Working with forms and POST payloads","title":"Reading POST payloads","text":"","category":"section"},{"location":"tutorials/6--Working_with_POST_Payloads.html","page":"Working with forms and POST payloads","title":"Working with forms and POST payloads","text":"Genie makes it easy to work with POST data. First, we need to register a dedicated route to handle POST requests. Then, when a POST request is received, Genie will automatically extract the payload, making it accessible throughout the Requests.postpayload method – and appending it to the Router.params(:POST) collection.","category":"page"},{"location":"tutorials/6--Working_with_POST_Payloads.html#Handling-form-data-payloads","page":"Working with forms and POST payloads","title":"Handling form-data payloads","text":"","category":"section"},{"location":"tutorials/6--Working_with_POST_Payloads.html","page":"Working with forms and POST payloads","title":"Working with forms and POST payloads","text":"The following snippet registers two routes in the root of the app, one for GET and the other for POST requests. The GET route displays a form which submits over POST to the other route. Finally, upon receiving the data, we display a message.","category":"page"},{"location":"tutorials/6--Working_with_POST_Payloads.html#Example","page":"Working with forms and POST payloads","title":"Example","text":"","category":"section"},{"location":"tutorials/6--Working_with_POST_Payloads.html","page":"Working with forms and POST payloads","title":"Working with forms and POST payloads","text":"using Genie, Genie.Renderer.Html, Genie.Requests\n\nform = \"\"\"\n<form action=\"/\" method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"text\" name=\"name\" value=\"\" placeholder=\"What's your name?\" />\n  <input type=\"submit\" value=\"Greet\" />\n</form>\n\"\"\"\n\nroute(\"/\") do\n  html(form)\nend\n\nroute(\"/\", method = POST) do\n  \"Hello $(postpayload(:name, \"Anon\"))\"\nend\n\nup()","category":"page"},{"location":"tutorials/6--Working_with_POST_Payloads.html","page":"Working with forms and POST payloads","title":"Working with forms and POST payloads","text":"The postpayload function has a few specializations, and one of them accepts the key and the default value. The default value is returned if the key variable is not defined. You can see the various implementations for postpayload using the API docs or Julia's help> mode.","category":"page"},{"location":"API/encryption.html","page":"Encryption","title":"Encryption","text":"CurrentModule = Encryption","category":"page"},{"location":"API/encryption.html","page":"Encryption","title":"Encryption","text":"decrypt\nencrypt\nencryption_sauce","category":"page"},{"location":"API/encryption.html#Genie.Encryption.decrypt","page":"Encryption","title":"Genie.Encryption.decrypt","text":"decrypt(s::String) :: String\n\nDecrypts s (a string previously encrypted by Genie).\n\n\n\n\n\n","category":"function"},{"location":"API/encryption.html#Genie.Encryption.encrypt","page":"Encryption","title":"Genie.Encryption.encrypt","text":"encrypt{T}(s::T) :: String\n\nEncrypts s.\n\n\n\n\n\n","category":"function"},{"location":"API/encryption.html#Genie.Encryption.encryption_sauce","page":"Encryption","title":"Genie.Encryption.encryption_sauce","text":"encryption_sauce() :: Tuple{Vector{UInt8},Vector{UInt8}}\n\nGenerates a pair of key32 and iv16 with salt for encryption/decryption\n\n\n\n\n\n","category":"function"},{"location":"API/headers.html","page":"Headers","title":"Headers","text":"CurrentModule = Genie.Headers","category":"page"},{"location":"API/headers.html","page":"Headers","title":"Headers","text":"normalize_header_key\nnormalize_headers\nset_access_control_allow_headers!\nset_access_control_allow_origin!\nset_headers!","category":"page"},{"location":"API/headers.html#Genie.Headers.normalize_header_key","page":"Headers","title":"Genie.Headers.normalize_header_key","text":"normalize_header_key(key::String) :: String\n\nBrings header keys to standard casing.\n\n\n\n\n\n","category":"function"},{"location":"API/headers.html#Genie.Headers.normalize_headers","page":"Headers","title":"Genie.Headers.normalize_headers","text":"normalize_headers(req::HTTP.Request)\n\nMakes request headers case insensitive.\n\n\n\n\n\n","category":"function"},{"location":"API/headers.html#Genie.Headers.set_headers!","page":"Headers","title":"Genie.Headers.set_headers!","text":"set_headers!(req::HTTP.Request, res::HTTP.Response, app_response::HTTP.Response) :: HTTP.Response\n\nConfigures the response headers.\n\n\n\n\n\n","category":"function"},{"location":"api/filetemplates.html","page":"-","title":"-","text":"CurrentModule = FileTemplates","category":"page"},{"location":"api/filetemplates.html","page":"-","title":"-","text":"appmodule\nnewcontroller\nnewtask\nnewtest","category":"page"},{"location":"api/util.html","page":"-","title":"-","text":"CurrentModule = Util","category":"page"},{"location":"api/util.html","page":"-","title":"-","text":"expand_nullable\nfile_name_without_extension\nwalk_dir\ntime_to_unixtimestamp","category":"page"},{"location":"API/httputils.html","page":"HttpUtils","title":"HttpUtils","text":"CurrentModule = HTTPUtils","category":"page"},{"location":"API/httputils.html","page":"HttpUtils","title":"HttpUtils","text":"HTTPUtils.Dict","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html#Working-with-Web-Sockets","page":"Working with WebSockets","title":"Working with Web Sockets","text":"","category":"section"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"Genie provides a powerful workflow for client-server communication over websockets. The system hides away the complexity of the network level communication, exposing powerful abstractions which resemble Genie's familiar MVC workflow: the clients and the server exchange messages over channels (which are the equivalent of routes).","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html#Registering-channels","page":"Working with WebSockets","title":"Registering channels","text":"","category":"section"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"The messages are mapped to a matching channel, where are processed by Genie's Router which extracts the payload and invokes the designated handler (controller method or function). For most purposes, the channels are the functional equivalents of routes and are defined in a similar way:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"using Genie.Router\n\nchannel(\"/foo/bar\") do\n  # process request\nend\n\nchannel(\"/baz/bax\", YourController.your_handler)","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"The above channel definitions will handle websocket messages sent to /foo/bar and /baz/bax.","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html#Setting-up-the-client","page":"Working with WebSockets","title":"Setting up the client","text":"","category":"section"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"In order to enable WebSockets communication in the browser we need to load a JavaScript file. This is provided by Genie, through the Assets module. Genie makes it extremely easy to setup the WebSockets infrastructure on the client side, by providing the Assets.channels_support() method. For instance, if we want to add support for WebSockets to the root page of a web app, all we need is this:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"using Genie.Router, Genie.Assets\n\nroute(\"/\") do\n  Assets.channels_support()\nend","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"That is all we need in order to be able to push and receive messages between client and server.","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html#Try-it!","page":"Working with WebSockets","title":"Try it!","text":"","category":"section"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"You can follow through by running the following Julia code in a Julia REPL:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"using Genie, Genie.Router, Genie.Assets\n\nGenie.config.websockets_server = true # enable the websockets server\n\nroute(\"/\") do\n  Assets.channels_support()\nend\n\nup() # start the servers","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"Now if you visit http://localhost:8000 you'll get a blank page – which, however, includes all the necessary functionality for WebSockets communication! If you use the browser's developer tools, the Network pane will indicate that a channels.js file was loaded and that a WebSockets request was made (Status 101 over GET). Additionally, if you peek at the Console, you will see a Subscription ready message.","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"What happened?","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"At this point, by invoking Assets.channels_support(), Genie has done the following:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"loaded the bundled channels.js file which provides a JS API for communicating over WebSockets\nhas created two default channels, for subscribing and unsubscribing: /__/subscribe and /__/unsubscribe\nhas invoked /__/subscribe and created a WebSockets connection between client and server","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html#Pushing-messages-from-the-server","page":"Working with WebSockets","title":"Pushing messages from the server","text":"","category":"section"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"We are ready to interact with the client. Go to the Julia REPL running the web app and run:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"julia> Genie.WebChannels.connected_clients()\n1-element Array{Genie.WebChannels.ChannelClient,1}:\n Genie.WebChannels.ChannelClient(HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}(T0  🔁    0↑🔒    0↓🔒 100s 127.0.0.1:8001:8001 ≣16, 0x01, true, UInt8[0x7b, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22  …  0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3a, 0x7b, 0x7d, 0x7d], UInt8[], false, false), [\"__\"])","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"We have one connected client to the __ channel! We can send it a message:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"julia> Genie.WebChannels.broadcast(\"__\", \"Hey!\")\ntrue","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"If you look in the browser's console you will see the \"Hey!\" message! By default, the client side handler simply outputs the message. We're also informed that we can \"Overwrite window.parse_payload to handle messages from the server\". Let's do it. Run this in the current REPL (it will overwrite our root route handler):","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"route(\"/\") do\n  Assets.channels_support() *\n  \"\"\"\n  <script>\n  window.parse_payload = function(payload) {\n    console.log('Got this payload: ' + payload);\n  }\n  </script>\n  \"\"\"\nend","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"Now if you reload the page and broadcast the message, it will be picked up by our custom payload handler.","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"We can remove clients that are no longer reachable (for instance, if the browser tab is closed) with:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"julia> Genie.WebChannels.unsubscribe_disconnected_clients()","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"The output of unsubscribe_disconnected_clients() is the collection of remaining (connected) clients.","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"Heads up!","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"You should routinely unsubscribe_disconnected_clients() to free memory.","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"At any time, we can check the connected clients with Genie.WebChannels.connected_clients() and the disconnected ones with Genie.WebChannels.disconnected_clients().","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html#Pushing-messages-from-the-client","page":"Working with WebSockets","title":"Pushing messages from the client","text":"","category":"section"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"We can also push messages from client to server. As we don't have a UI, we'll use the browser's console and Genie's JavaScript API to send the messages. But first, we need to set up the channel which will receive our message. Run this in the active Julia REPL:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"channel(\"/__/echo\") do\n  \"Received: $(params(:payload))\"\nend","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"Now that our endpoint is up, go to the browser's console and run:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"Genie.WebChannels.sendMessageTo('__', 'echo', 'Hello!')","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"The console will immediately display the response from the server:","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"Received: Hello!\nGot this payload: Received: Hello!","category":"page"},{"location":"tutorials/17--Working_with_Web_Sockets.html#Summary","page":"Working with WebSockets","title":"Summary","text":"","category":"section"},{"location":"tutorials/17--Working_with_Web_Sockets.html","page":"Working with WebSockets","title":"Working with WebSockets","text":"This concludes our intro to working with WebSockets in Genie. You now have the knowledge to set up the communication between client and server, send messages from both server and clients, and perform various tasks using the WebChannels API.","category":"page"},{"location":"api/cookies.html","page":"-","title":"-","text":"CurrentModule = Cookies","category":"page"},{"location":"api/cookies.html","page":"-","title":"-","text":"Cookies.Dict\nget\ngetcookies\nset!\nnullablevalue","category":"page"},{"location":"API/sessions.html","page":"-","title":"-","text":"CurrentModule = Sessions","category":"page"},{"location":"API/sessions.html","page":"-","title":"-","text":"Session\nid\nstart\nset!\nget\nunset!\nisset\npersist\nload\nsession\ninit","category":"page"},{"location":"API/sessions.html#Base.get","page":"-","title":"Base.get","text":"get(collection, key, default)\n\nReturn the value stored for the given key, or the given default value if no mapping for the key is present.\n\ncompat: Julia 1.7\nFor tuples and numbers, this function requires at least Julia 1.7.\n\nExamples\n\njulia> d = Dict(\"a\"=>1, \"b\"=>2);\n\njulia> get(d, \"a\", 3)\n1\n\njulia> get(d, \"c\", 3)\n3\n\n\n\n\n\nget(f::Function, collection, key)\n\nReturn the value stored for the given key, or if no mapping for the key is present, return f().  Use get! to also store the default value in the dictionary.\n\nThis is intended to be called using do block syntax\n\nget(dict, key) do\n    # default value calculated here\n    time()\nend\n\n\n\n\n\nget(sd,k,v)\n\nReturns the value associated with key k where sd is a SortedDict, or else returns v if k is not in sd. Time: O(c log n)\n\n\n\n\n\nget(collection, key, default)\n\nReturn the value stored for the given key, or the given default value if no mapping for the key is present.\n\nExamples\n\njulia> d = RobinDict(\"a\"=>1, \"b\"=>2);\n\njulia> get(d, \"a\", 3)\n1\n\njulia> get(d, \"c\", 3)\n3\n\n\n\n\n\nget(f::Function, collection, key)\n\nReturn the value stored for the given key, or if no mapping for the key is present, return f().  Use get! to also store the default value in the dictionary.\n\nThis is intended to be called using do block syntax\n\nget(dict, key) do\n    # default value calculated here\n    time()\nend\n\n\n\n\n\nget(collection, key, default)\n\nReturn the value stored for the given key, or the given default value if no mapping for the key is present.\n\nExamples\n\njulia> d = OrderedRobinDict(\"a\"=>1, \"b\"=>2);\n\njulia> get(d, \"a\", 3)\n1\n\njulia> get(d, \"c\", 3)\n3\n\n\n\n\n\nget(f::Function, collection, key)\n\nReturn the value stored for the given key, or if no mapping for the key is present, return f().  Use get! to also store the default value in the dictionary.\n\nThis is intended to be called using do block syntax\n\nget(dict, key) do\n    # default value calculated here\n    time()\nend\n\n\n\n\n\nget(collection, key, default)\n\nReturn the value stored for the given key, or the given default value if no mapping for the key is present.\n\nExamples\n\njulia> d = SwissDict(\"a\"=>1, \"b\"=>2);\n\njulia> get(d, \"a\", 3)\n1\n\njulia> get(d, \"c\", 3)\n3\n\n\n\n\n\nget(f::Function, collection, key)\n\nReturn the value stored for the given key, or if no mapping for the key is present, return f().  Use get! to also store the default value in the dictionary.\n\nThis is intended to be called using do block syntax\n\nget(dict, key) do\n    # default value calculated here\n    time()\nend\n\n\n\n\n\nget(x::Nullable[, y])\n\nAttempt to access the value of x. Returns the value if it is present; otherwise, returns y if provided, or throws a NullException if not.\n\nExamples\n\njulia> get(Nullable(5))\n5\n\njulia> get(Nullable())\nERROR: NullException()\nStacktrace:\n [1] get(::Nullable{Union{}}) at ./nullable.jl:102\n\n\n\n\n\n","category":"function"}]
}
